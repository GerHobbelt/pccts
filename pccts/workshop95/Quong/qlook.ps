%!PS-Adobe-1.0
%%DocumentFonts: Courier Times-Bold
%%Title: genlook.ps (mpage)
%%Creator: mpage
%%CreationDate: Tue Jul 18 15:19:54 1995
%%Orientation: Landscape
%%DocumentMedia: A4 596 842
%%BoundingBox: 20 20 576 822
%%Pages: (atend)
%%EndComments

/mp_stm usertime def
/mp_pgc statusdict begin pagecount end def
statusdict begin /jobname (genlook.ps) def end
/textfont /Courier findfont 11 scalefont def
/fnamefont /Times-Bold findfont 14 scalefont def
/headerfont /Times-Bold findfont 12 scalefont def
textfont setfont
(a) stringwidth pop /mp_a_x exch def
%%EndProlog
%%%Creator: dvipsk 5.58a Copyright 1986, 1994 Radical Eye Software
%%%Title: genlook.dvi
%%%Pages: 12
%%%PageOrder: Ascend
%%%Orientation: Landscape
%%%BoundingBox: 0 0 596 842
%%%DocumentFonts: Helvetica-Bold Helvetica Helvetica-Oblique
%%%DocumentPaperSizes: a4
%%%EndComments
/showsheet { showpage } bind def
/showpage { } def
%DVIPSCommandLine: dvips -t landscape genlook.dvi
%DVIPSParameters: dpi=300, compressed, comments removed
%DVIPSSource:  TeX output 1995.07.18:1457
%%BeginProcSet: texc.pro
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]/id ch-image N /rw ch-width 7 add 8 idiv string N /rc 0 N /gp 0 N
/cp 0 N{rc 0 ne{rc 1 sub /rc X rw}{G}ifelse}imagemask restore}B /G{{id
gp get /gp gp 1 add N dup 18 mod S 18 idiv pl S get exec}loop}B /adv{cp
add /cp X}B /chg{rw cp id gp 4 index getinterval putinterval dup gp add
/gp X adv}B /nd{/cp 0 N rw exit}B /lsh{rw cp 2 copy get dup 0 eq{pop 1}{
dup 255 eq{pop 254}{dup dup add 255 and S 1 and or}ifelse}ifelse put 1
adv}B /rsh{rw cp 2 copy get dup 0 eq{pop 128}{dup 255 eq{pop 127}{dup 2
idiv S 128 and or}ifelse}ifelse put 1 adv}B /clr{rw cp 2 index string
putinterval adv}B /set{rw cp fillstr 0 4 index getinterval putinterval
adv}B /fillstr 18 string 0 1 17{2 copy 255 put pop}for N /pl[{adv 1 chg}
{adv 1 chg nd}{1 add chg}{1 add chg nd}{adv lsh}{adv lsh nd}{adv rsh}{
adv rsh nd}{1 add adv}{/rc X nd}{1 add set}{1 add clr}{adv 2 chg}{adv 2
chg nd}{pop nd}]dup{bind pop}forall N /D{/cc X dup type /stringtype ne{]
}if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop product dup length 7 ge{0 7
getinterval dup(Display)eq exch 0 4 getinterval(NeXT)eq or}{pop false}
ifelse}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false
RMat{BDot}imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1
false RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform
round exch round exch itransform moveto rulex 0 rlineto 0 ruley neg
rlineto rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail
{dup /delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}
B /d{-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{
4 M}B /w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{
p 1 w}B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p
a}B /bos{/SS save N}B /eos{SS restore}B end
%%EndProcSet
%%BeginProcSet: texps.pro
TeXDict begin /rf{findfont dup length 1 add dict begin{1 index /FID ne 2
index /UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type /integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics /Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont /setfont load]cvx def}def
/ObliqueSlant{dup sin S cos div neg}B /SlantFont{4 index mul add}def
/ExtendFont{3 -1 roll mul exch}def /ReEncodeFont{/Encoding exch def}def
end
%%EndProcSet
%%BeginProcSet: special.pro
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end
%%EndProcSet
TeXDict begin 55380996 39158280 1000 300 300 (genlook.dvi)
@start /Fa 78[48 59[53 29 48 3[53 53 1[24 2[24 21[57
24[29 7[48 50[{}11 86.416689 /Helvetica-Bold rf /Fb 135[43
1[43 48 24 1[29 2[48 48 1[19 2[19 1[48 1[48 48 43 1[48
25[67 71[{}15 86.416689 /Helvetica-Oblique rf /Fc 53
125 df<1230127812FCB3B2127812301200A81230127812FCA21278123006366EB52A>
33 D<497E497EA6EB0FF0EB7FFE48B51280000714C0390FF3CFE0391F83C3F0393E03C1
F8003C13C0007C147C12780070143E12F0157EA3153C00F8141800781400127C123E123F
EA1FC3EA0FFF7E6C13F8C613FE90383FFF80010713C06D13E0ECC7F0ECC1F814C0157C15
3CA20030141E127812FCA312F8A2007C143CA21578003E14F8003FEBC1F0391F83C3E039
0FF3DFC06CB512806C1400C613FCEB1FE0EB03C0A66D5A1F437BBB2A>36
D<EB0F80EB3FC0497E497EEBF8F8EA01F0A23803E07CA75CA39039E1F0FFE0D9F1F113F0
3801F3E102C013E001F7EB3E009038FF807EEC007C7E4913FC495BA21401D801FE5B1203
1403D807FF5BEA0F9F381F1F87D81E0F5B003E13CFD87C075B14EF38F803FF92C7FC7F4A
13E00100EB01F014FC14FE7E387C01FF4913813A7E07EFC3E0393F0FC7E33A1FFF83FFC0
6C010113806C486C1300D801F8133E24377EB52A>38 D<14F01301EB03E0EB07C0EB0F80
EB1F00133E5B5B485AA2485A5B1207485AA290C7FC5AA2123EA35AA55AAD127CA57EA37E
A27E7FA26C7E12037F6C7EA26C7E137C7F7FEB0F80EB07C0EB03F013011300144372BB2A
>40 D<127012F8127C7E7E6C7E6C7E6C7E6C7E6C7EA2137C133C133E7FA27F1480A2EB07
C0A3EB03E0A5EB01F0ADEB03E0A5EB07C0A3EB0F80A214005BA2133E133C137C5BA2485A
485A485A485A48C7FC123E5A5A1270144379BB2A>I<EB0380A8002014080078143C00FC
147E007FEB81FC393F8383F8390FE38FE03903F39F806CB5120038007FFCEB1FF0EB07C0
EB1FF0EB7FFC48B5FC3903F39F80390FE38FE0393F8383F8397F0381FC00FCEB807E0078
143C0020140800001400A81F257BAC2A>I<120FEA1FC0123F13E0A213F0121F120F1200
A3EA01E0A2EA03C01207EA1F80EA7F0012FE5A12700C1471872A>44
D<007FB6FCB71280A36C150021057C9C2A>I<151C153EA2157E157CA215FC15F8140115
F0140315E0A2140715C0140F1580A2141F15005C143E147E147CA214FC5C13015C13035C
A213075C130F5CA2131F91C7FC5B133E137E137CA213FC5B12015B12035BA212075B120F
5BA2121F90C8FC5A123E127E127CA212FC5AA212701F437BBB2A>47
D<1306130F5BA25BA25BA25B1203121FEA7FDFEAFF9FEA7E1F12301200B3B1003FB51280
4814C0A26C14801A3678B52A>49 D<EB0FF0EB7FFE48B57E4814E03907E01FF0390FC003
F848C66C7E481300003E147E48143E81A248EC0F80A27EA312781230C8FCED1F00A3153E
A25DA25D4A5A14034A5A5D4A5A4AC7FC143E14FC495A495A495A495A495A49C8FC137E5B
485A485A48481307D80F80EB0F8048C7FC123E007FB6FCB7FCA26C150021367CB52A>I<
120FEA1F80EA3FC0A4EA1F80EA0F00C7FCB3A3120FEA1F80123F13C0A3121F120F1203A3
EA0780A2EA0F005A123E127E5A5A12600A3171A42A>59 D<1507ED0F80153F157F913801
FF004A5AEC0FF84A5AEC7FC04A5AD903FEC7FC495AEB1FF0495AEBFF804890C8FCEA07FC
485AEA3FE0485A48C9FC5A7EEA7FC06C7EEA0FF86C7EEA01FF6C7FEB3FE06D7EEB07FC6D
7E903800FF806E7EEC1FF06E7EEC03FE6E7E9138007F80153F150FED0700212B7CAF2A>
I<003FB612804815C0B712E0A26C15C0CAFCA9007FB612C0B712E0A26C15C06C15802313
7DA32A>I<127012F812FE7EEA7FC06C7EEA0FF86C7EEA01FF6C7FEB3FE06D7EEB07FC6D
7E903800FF806E7EEC1FF06E7EEC03FE6E7E9138007F80153F157F913801FF004A5AEC0F
F84A5AEC7FC04A5AD903FEC7FC495AEB1FF0495AEBFF804890C8FCEA07FC485AEA3FE048
5A48C9FC5A12F81270212B7CAF2A>I<EB3FF048B5FC000714C04814E0391FC00FF0393F
0001F8007EEB00FC007C147C48143E7EA312780030147CC8FC15FCEC03F8EC07F0EC1FE0
EC3F80EC7F0014FE14F81301495A5C495AA2495AA991C7FC130690C8FCA81306130F497E
A26DC7FC13061F357BB42A>I<14F8497EA3497EA214DEA2EB07DFA2148FA3010F7FA314
07011F7FA4EB1E03013E7FA4496C7EA5496C7EA390B5FC4880A39038F0007CA248487FA4
0007143F497FA44848EB0F80D87FF8EBFFF0486C4813F8A26C486C13F025367EB52A>65
D<007FB5FCB612E0816C14FC3907C001FEEC007E81ED1F80150FA2ED07C0A7ED0F80A2ED
1F005D157E4A5A90B55A5D5D15F89038C001FEEC003FED1F80ED0FC01507ED03E0A3ED01
F0A7ED03E0A21507ED0FC0151FED3F80EDFF00007FB55AB65A15F06C14C024357EB42A>
I<02FE13E0903807FF81011F13E14913F190387F81FB9038FC007F4848133F4848131F48
5A49130F485A150748C7FCA2003E1403A35AA292C7FCA25AAD127CA3ED03E07EA37E16C0
6C6C1307A26C6CEB0F807F6C6CEB1F006C6C5B6C6C137E90387F81FC6DB45A6D13E00107
1380D900FEC7FC23377DB52A>I<007FB612C0B712E0A27E3907C00003A6ED01C092C7FC
A9EC03804A7EA390B5FCA4EBC007A36E5A91C8FCB1EA7FFFB57EA26C90C8FC23357DB42A
>70 D<007FB512C0B612E0A26C14C0D8001FC7FCB3B3A9007FB512C0B612E0A26C14C01B
3579B42A>73 D<387FFF80B57EA26C5BD803E0C8FCB3B3ED01C0ED03E0A7007FB6FCB7FC
A26C15C023357DB42A>76 D<387FFFF8B6FC15C06C803907C00FF0EC03F86E7E1400157E
153E153F81A65D153E157E5D14014A5AEC0FF090B55A5D5D819038C00FE0EC03F06E7E14
0081157CAA161C163EA4153ED87FFC147C486CEB1FFC16F86C48EB0FF0C8EA03E027367E
B42A>82 D<90381FE00E9038FFF81E000313FE48EBFF9E390FE03FDE391F8007FE383F00
03003E1301481300A20078147E12F8A2153EA4127C92C7FC127E7E7FEA1FE0EA0FFE3807
FFE06C13FEC66D7E011F13E001017F9038001FF8EC03FC1400157E153E81A21680007814
0F12F8A57EED1F007E153E7E6D5B01E013FC39F7FC03F800F3B55A00F014C0013F90C7FC
38E007FC21377CB52A>I<007FB612F0B712F8A339F800F800A600701570C71400B3B3A2
90383FFFE0497FA26D5B25357EB42A>I<3A3FF803FFC0486C4813E0A26C486C13C03A07
E0007C00000314FC6D5B0001130101F85B0000130301FC5BEB7C07017E5B133E90383F0F
80131F149F010F90C7FC14FF6D5AA26D5AA26D5AA4497EA2497EA2EB0FDF149FEC8F80EB
1F0F6E7E133E6E7E137C6E7E13F86E7E120149137C120349137E0007143E49133F000F80
D87FF0EB7FF0486CEBFFF8A26C48EB7FF025357EB42A>88 D<D87FF8EB3FFC486CEB7FFE
A26C48EB3FFCD807C0EB07C06D130F000315806D131F00011500A26D5B0000143E6D137E
017C137C017E13FC013E5BA26D485AA21483010F5BA2903807C7C0A201035B14EF010190
C7FC14FF6D5AA3147CB2903807FFC0497FA26D5B27357FB42A>I<003FB6FC481580A300
7CC7EA1F005D153E5D15FC5D00381301C75B14034A5A5D140F5D141F4AC7FC143E147E14
7C14FC5C495A13035C13075C495A131F91C8FC5B133E137E5B5B12015B1203485A49EB03
80000FEC07C05B121F90C7FC123E127E127CB7FCA36C158022357CB42A>I<387FFFF0B5
12F8A214F000F8C7FCB3B3B3A5B512F014F8A26C13F015436FBB2A>I<387FFFF0B512F8
A27EC7FCB3B3B3A5EA7FFFB5FCA26C13F015437DBB2A>93 D<007FB6FCB71280A36C1500
21057C7C2A>95 D<EBFFE0000713F84813FE486D7E9038803FC0EC0FE0380F0003000680
C712016E7EA614FF131F90B5FC000313E0380FF800EA1FC048C7FC127E127C5AA56C1301
007C1303007F1307393FC03FFC3A1FFFFEFFF06C9038FC7FF80003EBF03FC69038800FF0
25257CA42A>97 D<EA7FC0487EA2127F1203ACEC3F80ECFFE001E313F801E77F9038EF81
FE9038FE007F49131F49148049EB0FC015075BED03E0A3ED01F0A9ED03E0A36DEB07C0A2
6DEB0F80151F6DEB3F006D137E9038EF81FCECFFF801E35B01E113C02601C07FC7FC2435
7EB42A>I<903807FF80011F13F0017F13F848B512FC3803FC00EA07E048481378484813
3090C8FC123EA25AA35AA9127CA37E003F143E6C7E7F6C6C137C6C6C13FC3903FE03F86C
B512F06C6C13C0011F1300EB07FC1F257AA42A>I<EC0FF84A7EA2140FEC007CACEB0FE0
EB3FF8EBFFFE4813FF3907F81FFCEBE007380FC003381F800190C7FC123E157C5AA35AA9
127CA36C14FCA2003F1301381F8003120FEBE00F3907F81F7C3A03FFFE7FE0C601FC13F0
EB7FF090390FC03FE024357DB42A>I<EB07FCEB3FFF4913C048B57E3903FC0FF03907F0
01F8390FC000FC4848137E90C7123E48143F003E80127E007C1580150F12FC5AB7FCA316
0000F8C9FCA27E127CA2127E003E1407003FEC0F806C7E000F141FD807E0EB3F006C6C13
7E3901FE03FC6CB55A6D5B011F13C0D903FEC7FC21257CA42A>I<EC03F8EC1FFEEC7FFF
49B51280903803F81F14E0903907C00F0015064948C7FCA8007FB512FCB67EA26C5C2600
0F80C7FCB3AB001FB512C04880A26C5C21357EB42A>I<EA7FC0487EA2127F1203AC143F
ECFFE001E37F01E77FEBEF819038FE00FC49137C497FA25BA35BB3A33A7FFF07FFF0B500
8F13F8A26C010713F025357EB42A>104 D<1306130F497EA26DC7FC130690C8FCABEA3F
FF487FA27EEA000FB3AB007FB512C0B612E0A26C14C01B3679B52A>I<EA7FC0487EA212
7F1203AC91381FFFE04A13F0A26E13E0913800FC004A5A4A5A4A5A4A5A4A5A4AC7FC147E
5CEBE1F8EBE3F0EBE7F8EBEFFC13FF80143F13FE496C7E496C7E13F0496C7E6E7E140181
6E7E157EA281ED1F803A7FFF01FFF8B5008313FCA26C010113F826357EB42A>107
D<EA7FFFB57EA27EEA000FB3B3A9007FB512F0B612F8A26C14F01D357AB42A>I<397F07
C01F3AFF9FF07FC09039BFF8FFE0387FFFF93A0FF87DE1F09038F07FC19039E03F80F801
C01300A4EB803EB3A43A7FF0FFC3FFD8FFF901E71380A2D87FF001C31300292580A42A>
I<387FC03F39FFE0FFE001E37FD87FE77F3803EF819038FE00FC49137C497FA25BA35BB3
A33A7FFF07FFF0B5008F13F8A26C010713F025257EA42A>I<EB0FE0EB7FFC497E0003EB
FF803907F83FC0390FE00FE0EB8003001F14F0393F0001F8003E1300A248147CA348143E
A86C147E007C147CA36C14F8A2003F1301391F8003F0390FC007E0EBE00F3907F83FC06C
B51280C6EBFE006D5AEB0FE01F257BA42A>I<397FC03F8039FFE0FFE001E313F8D87FE7
7F3903EF81FE9038FE007F49131F49148049EB0FC015075BED03E0A3ED01F0A9ED03E0A3
6DEB07C0A26DEB0F80151F6DEB3F006D137E9038EF81FCECFFF801E35B01E113C0D9E07F
C7FC91C8FCAFEA7FFFB57EA26C90C8FC24387EA42A>I<D87FF8EBFF8026FFFC0313E014
0F007F013F13F039007C7F0114FC90397DF000404A1300EB7FC05C91C8FCA2137EA3137C
B2007FB5FCB67EA26C91C7FC24257DA42A>114 D<90387FE0703903FFFCF0000F13FF5A
383F803F387C000F007813074813031401A37E127C007F90C7FCEA3FF06CB47E6C13F800
0313FFC66C1380010313E09038001FF014030078EB00F800F81478153C7EA37E15786C14
F89038C001F0EBE00F00F7B512E000F1148000F0EBFE0038E01FF01E257AA42A>I<131C
133EAA007FB512FCB67EA26C5CD8003EC8FCB31507ED0F80A6013FEB1F006D5BECC0FE6D
B45A6D5B6D13E0D9007FC7FC21307EAF2A>I<397FC007FC486C487EA2007F13070003EB
003EB3A6157E15FEA23801F003EBFC076CB5EABFF06DEB3FF8EB3FFC90390FF01FF02525
7EA42A>I<3A7FFC01FFF0486C4813F8A26C486C13F03A07C0001F00A26D5B0003143EA2
6D137E0001147CA26D13FC00005CA390387C01F0A36D485AA36D485AA490380F8F80A3D9
07DFC7FCA3EB03FEA36D5A6D5A25257EA42A>I<D87FFEEBFFFCB54813FEA26C486C13FC
D80F80EB03E0A46C6CEB07C0A66C6CEB0F801438147C14FEA33A01F1EF1F0014CFA401F3
139F0000149E1487A201FB13BEA290387B03BC017F13FCA21401137E90383C00F827257F
A42A>I<3A7FFC01FFF0486C4813F8A26C486C13F03A07C0001F007F00035C153E7F0001
147E157C7F12005D137CA24A5A133EA24A5A131FA25DEB0F87A3903807C78014CF130392
C7FCA2EB01EF14FEA213005CA35CA213015CA3495AA3381807C0127E495A131F49C8FCEA
3FFE5B6C5AEA07E025387EA42A>121 D<127012F8B3B3B3AB127005436EBB2A>124
D E /Fd 5 64 df<14401480EB010013025B130C5B5B132013605BA2485AA248C7FCA25A
1206120E120C121CA312181238A45AA612F0A25AAD7EA21270A67EA41218121CA3120C12
0E120612077EA26C7EA26C7EA21360132013307F7F13047F7FEB00801440125579BF1D>
40 D<7E12407E7E7E120C7E7E7E7F6C7EA21360A27FA213381318131C130C130EA31306
1307A4EB0380A614C0A21301AD1303A21480A6EB0700A41306130EA3130C131C13181338
1330A25BA25BA2485A90C7FC5A12065A12085A5A5A5A12557DBF1D>I<EB1FE0EBFFFC38
01C07F3903000F800004EB07C048EB03E048EB01F00030EB00F8122048147CA348147E12
FC6C143EA4007C147E1238C8127CA215FC15F8A2EC01F015E0140315C0EC0780EC0F00A2
141E5C14385C5C495A495A49C7FC13065B5B5B5B4913025B48C7FC000214045A5A5A150C
003FB512FC4814F8B6FCA21F397DB826>50 D<007FB812F0B912F8A2CCFCADB912F8A26C
17F035137D9E3C>61 D<EB7FC0380380783804001E48130748EB03804814C04814E01401
00B014F012F87EA31278C7FCEC03E0A215C0EC0780EC0F00141E5C1470A25C5C495AA249
C7FC13021306A21304A2130C1308A990C8FCA9131C133E137FA3133E131C1C3C7DBB23>
63 D E /Fe 8 121 df<EC3FC0ECFFF0903803E07C90380F801E90261E000F130C017C14
80491307484814C04848010313184914E0120748481530A248C714604815F0030113C012
3E007EEDF180A2EEF3005A16F616FCA25E485DA400781403007C1407150F003C02191308
003E02711318001EEB01E06C90390780F8303B07C03E0078E02601FFF8EB3FC026007F80
EB0F002E277CA536>11 D<167F923803FFC092380F81F092381C0078037013384B133CEC
01804AC7121E14065C173E5C5CA25C4A147CA21778494814F817F049C7120117E0EE03C0
0106EC078092387FDF00EDFFFCA249EB7FDEED000FEE0780A24915C0160317E0A25BA316
075BA449EC0FC0A317800001151FA2EE3F00163E12035E01605C5ED8063013014B5A6DEB
0780010E49C7FC486C133E903803FFF8010013E00204C8FC4890C9FCA45AA45AA45AA32F
4E7FBC30>I<18C0EF03E0170F173FEFFF80933803FE00EE0FF8EE3FE0EEFF80DB03FEC7
FCED0FF8ED3FE0913801FF80DA07FEC8FCEC1FF8EC7FE04948C9FCEB07FCEB1FF0EB7FC0
4848CAFCEA07FCEA1FF0EA7FC048CBFCA2EA7FC0EA1FF0EA07FCEA01FF38007FC0EB1FF0
EB07FCEB01FF9038007FE0EC1FF8EC07FE913801FF809138003FE0ED0FF8ED03FE923800
FF80EE3FE0EE0FF8EE03FE933800FF80EF3FE0170F1703EF00C0333279AE42>60
D<124012F812FE6C7EEA3FE0EA0FF8EA03FEC66C7EEB3FE0EB0FF8EB03FE903800FF80EC
3FF0EC0FFCEC03FF020013C0ED1FF0ED07FCED01FF9238007FC0EE1FF0EE07FCEE01FF93
38007FC0EF1FE0A2EF7FC0933801FF00EE07FCEE1FF0EE7FC04B48C7FCED07FCED1FF0ED
FFC0020390C8FCEC0FFCEC3FF0ECFF80D903FEC9FCEB0FF8EB3FE0EBFF80D803FECAFCEA
0FF8EA3FE0EAFF8048CBFC12F81260333279AE42>62 D<0103B512FCA29026000FFCC8FC
EC07F0A24A5AA44A5AA44A5AA44AC9FCA414FEA4495AA4495AA4495AA4495A18C0A2EF01
80495AA2EF0300A249485C1706170EA249C85A173CA25F01FEEC01F84C5A161F000315FF
B85AA2323B7CBA39>76 D<14F0EB01F81303A314F0EB01E090C7FCAC13F8EA01FEEA030F
38060780120C1218A2EA300FA21260EB1F00A212C0133E1200A25BA25BA3485AA3485A14
18A2EA07C01430EA0F8014201460A214C0EB0180EA0783EB8700EA03FCC65A153A7EB81D
>105 D<EB03E0EBFFF05C1303A3495AA4495AA449C8FCA4133EA449EB07E0ED1FF0ED38
38ED607C49EBC0FCEC01011402020413F83801F00891381000E0023013005C48485AEBE1
8001E7C8FC13FC485AEBFFC0EBDFF0EBC1FC380F807E808081381F000F1630A3003E9038
1F0060A316C05A6E13801501ED030048EB0786EC03FC0070EB00F8263D7CBB2C>107
D<903907E001F890391FF807FE9039383C0E0F9026601E1813809039C00E301F3A01800F
603FD8030013C0170000061480161C4892C7FCA24849C8FCA2C7FCA2143EA45CA45C160C
A349485B121C003E5DEA7E0300FE5D01065C00FC903878018027780C3803C7FC9038381E
0E393FF00FFC390FC003F029277EA530>120 D E /Ff 64[53 16[43
51[43 43 43 62 43 48 24 43 29 1[48 48 48 72 19 43 19
19 48 48 24 48 48 43 48 48 3[24 1[24 53 57 57 81 1[62
53 57 62 1[57 67 62 72 48 2[24 62 67 1[57 62 62 57 57
3[50 2[24 6[48 48 48 1[24 24 29 24 2[29 29 1[57 4[24
33[{}63 86.416689 /Helvetica rf /Fg 6 107 df<EB0FF0EB7FFE48B512804814C0
4814E04814F04814F84814FCA24814FEA3B7FCA86C14FEA36C14FCA26C14F86C14F06C14
E06C14C06C148039007FFE00EB0FF020207BA52B>15 D<150E151EA25DA25D5DA24A5A4A
5A4A5A140F4ACCFC4AB912C04A18E091BAFC5BD907E0CCFCEB0F80013FCDFC13FEEA03F8
EA1FE0EAFF80A2EA1FE0EA03F8EA00FE133FEB0F80EB07E00101BA12E07F806E18C06ECC
FC6E7E14076E7E6E7E6E7EA2157881A281A2150E4B307BAD56>40
D<170E170FA2717EA2717E717EA2717E187884183E84007FB97EBA7E8585CC12FC193E73
7EF10FE0F103F8F100FFF23FE0A2F2FF00F103F8F10FE0F11F80073EC7FC19FCBA12F061
616C60CB001FC8FC183E183C60604D5AA24D5A4D5AA24DC9FCA2170E4B307BAD56>I<15
FC140FEC3F80EC7E0014F8495A495A1307A2495AB3A9495AA249C7FC137E5BEA03F8EA7F
E048C8FCEA7FE0EA03F8C67E137E7F6D7EA26D7EB3A96D7EA213036D7E6D7E147EEC3F80
EC0FFC14001E577AC02B>102 D<127CEAFFC0EA07F0EA01F8EA007C7F7F80A26D7EB3A9
6D7EA26D7E6D7E6D7E147FEC1FF8EC03FCEC1FF8EC7F0014FC495A495A495AA2495AB3A9
495AA291C7FC133E5B485AEA07F0EAFFC0007CC8FC1E577AC02B>I<126012F0B3B3B3B3
AD1260045776C018>106 D E /Fh 18 118 df<007FB612FCB712FEA46C15FC27067BA2
32>45 D<123C127E12FFA4127E123C08086B8732>I<EC0FF0EC7FFC49B5FC4914C0010F
8090381FF80F90393FC007F090397F0001F801FE13004848804848147C49147E4848EB7C
3E9038C001FF260F800713FE4A7F48485AEC3F83003E1401EC7E004AEB7F804849133FA2
4948131FA212F84948130FAB6D6CEB1F00127CA26D6C133EA26C6D137E027E5B6E485A6C
14836EB45A6C6C6C5B6E5B2607C00190C7FC9038E0007C6C6C90C8FC7F6C7E6C6CEC0F80
017F143FD93FC0EBFF0090391FF807FE6DB55A01035C6D14E06D6C90C7FCEC0FF8293F7C
BE32>64 D<EBFFF0000713FE486D7E48804814F09038000FF81403EC00FC001E147CC87E
A281A7EC3FFF0103B5FC133F90B512DF0003EB801F3807F800EA0FE0EA1F8048C7FC127E
127C5AEE0380EE07C0A3153F007C147F007E14FF007F5B263FE01F138F6CB538CFFF8015
8F0007D9FE0713006C9038F003FEC690388000F82A2C7AAB32>97
D<903801FFF0010713FE011F7F017F148090B612C048EB000FEA03F8485AD80FC0EB0780
4990C7FC121F48C9FC123EA25AA35AA97E127CA2127E123E123FED03E06C7E6C7E6DEB07
C0D807F8130FD803FEEB1F803A01FFC07F006CEBFFFE6D5B011F5B010713E0010190C7FC
232C78AB32>99 D<EDFFC04A7FA3801503AEEB03F8EB1FFE90383FFF8390B512E34814F3
3903FE03FB3907F8007F4848133F01C0131F4848130F150748C7FC003E1403127E127CA3
5AAA127CA3007E1407123E003F140F7E6D131F6C6C133F6D137F6C6C13FB3903FE03F36C
B538E3FF806C02C313C06D138390381FFE03902607F00113802A3F7CBE32>I<EB01FE90
380FFFC0013F13F04913FC48B57E3903FE01FF9039F8007F804848131FD80FC0EB0FC048
48EB07E0150348C7FC003E15F0007E1401127C16F8150012FC5AA2B7FCA316F000F8C9FC
A27E127CA2127E123E003F15706C15F87F6C6C13016DEB03F06C6C1307D803FCEB0FE06C
B4EB7FC06C90B512806D1400011F5B010713F001001380252C7AAB32>I<EE1F80D901FE
EB7FE0903A07FF81FFF0011F01E313F84913F749EBFFE0D9FF03EB00F02701FC00FE1320
4848017F1300497F48486D7E49130FA248486D7EA86C6C495AA26D131F6C6C49C7FC6D5B
6C6C13FE3900FF03FC48EBFFF8485C019F5B01871380260781FEC8FC0180C9FCA36C7EA2
13F06CB512F8EDFF806C15E0000315F84815FE3A0FE00007FFD81F80EB007F48C8EA3F80
003E150F4816C016074816E01603A6007CED07C0007E150F6CED1F806D143F6C6CEC7F00
D80FF8EB03FE6CB4EB1FFC6C90B55AC615E0013F1480010F49C7FC010013E02D457DAC32
>103 D<EA7FE0487EA3127F1201AEEC07F0EC3FFC91B5FC01F18001F3809038F7E03F91
38800FE09038FF0007491303498015015BA35BB3A73B7FFFC07FFFC0B56CB512E0A36C49
6C13C02B3F7DBE32>I<3A7F81F001F09039C7FC07FC3AFFCFFE0FFE3A7FDFFF1FFF90B5
5A3B07FC1FBC1F809039F80FF80F01F013F00207EB07C001E013E0A401C013C0B3A83B7F
FC3FFC3FFCA23BFFFE7FFE7FFE3B7FFC3FFC3FFCA22F2C7FAB32>109
D<397FE007F039FFF03FFC91B5FC01F180D87FF3803901F7E03F9138800FE09038FF0007
491303498015015BA35BB3A73B7FFFC07FFFC0B56CB512E0A36C496C13C02B2C7DAB32>
I<EB01FC90380FFF80013F13E0497F48B512FC3903FE03FE3907F800FF01E0133F4848EB
1F804848EB0FC090C712074815E0003E1403007E15F0007C1401A348EC00F8A96C140100
7C15F0A2007E1403A2003E15E0003F14076C6CEB0FC06D131F000F1580D807F0EB7F006D
5B3903FE03FE6CB55A6C6C13F06D5B010F1380D901FCC7FC252C7AAB32>I<397FE003F8
39FFF01FFE91387FFF8091B57ED87FF114F03901F7F01F9138C003F89039FF0001FC4913
0049147E163E49143F82491580160FA3EE07C0AAEE0F80A36D141F17005E6D147E7F5E6D
13039039F7C007F89039F3F01FF091B55A01F15CD9F07F90C7FCEC1FFCEC07F091C9FCB2
387FFFC0B57EA36C5B2A437DAB32>I<D903F813E090390FFF01F0013F13C190B512E148
14F148EB01F93907F8007D49133D4848131F4848130F49130748C7FC003E1403127E127C
1501A25AAA127CA21503127E003E1407123F6C140F6D131F6C7E6D133DD807F813F93803
FE036CB512F16C14C16D138190381FFE01EB03F890C7FCB292B512E0A24A14F06E14E0A2
2C437BAB32>I<D87FFCEB0FF8486CEB7FFE4AB5FC02071480007F5B3A003E1FF01FEC3F
8091397E000F004A90C7FC14F0EB3FE0A25C5CA291C9FCA3133EB3A3007FB512E0B67EA3
6C5C292C7BAB32>I<90391FFC038090B51287000314E7000F14F74814FF383FE00348C7
FC007E143F007C141F5A150FA4127C007E91C7FC6C7EEA1FF8380FFFC06C13FE0001EBFF
C0D8003F13F0010313FC9038000FFEEC00FFED3F800078EC0FC000F8140716E06C1403A3
7EA26C14076D14C06D130F6DEB3F809039FC01FF0000F3B6FC00F114FCD8F07F5B6D13E0
26E007FEC7FC232C79AB32>I<EB0380497EAC007FB612F8B712FCA36C15F8260007C0C7
FCB3A4160E161FA76E133E0103147E6E13FCECFC036DB512F86D14F06E13C06E1300EC0F
F828397EB832>I<D87FE0EB7FE0486C497EA3007F147F00011401B3A91503A21507150F
6D131F6C6C133F01FF13FD903A7FFFF9FFC003F113E06D13E1010F1381902603FC0013C0
2B2C7DAB32>I E /Fi 2 42 df<140814101420144014801301EB03001306130E130C5B
133813301370136013E0485AA212035BA248C7FCA25AA2120E121EA3121C123CA45AA712
F8A25AB07EA21278A77EA4121C121EA3120E120FA27EA26C7EA27F1201A26C7E13601370
1330133813187F130E13067FEB018013001440142014101408156679CC20>40
D<7E12407E7E7E120C7E7E7F12016C7E7F13601370133013387FA2131E130EA27FA21480
A2130314C0A3130114E0A4EB00F0A714F8A21478B014F8A214F0A7EB01E0A414C01303A3
14801307A21400A2130EA2131E131CA25B13301370136013E05B485A120390C7FC12065A
12085A5A5A5A15667DCC20>I E /Fj 2 108 df<027FB512FCA39126007FF0C8FC16C05E
A44BC9FCA44A5AA44A5AA44A5AA44A5AA44A5AA44A5AA44A5AA44ACAFCA449481660A319
C0495A18011980A24948ED0300A26018064948150E181E181C183C49485D18F81701EF07
F04948141F177F01FF913807FFE0B9FC60A23B477BC645>76 D<147EEB3FFF495A133F13
00A25CA4495AA4495AA4495AA4495AA4495AEE0FC0EE7FE0EEF030903A3F000380F89238
0701FCED0C031518017E90383007F815609238C003F09139018001E04948C8FC14065C5C
48485A5CEBF9C0EBFF804890C9FC14F8EBF1FF9038F03FC03907E00FE0EC03F06E7E6E7E
485AA21720173048481560A448C74813C0A2EE0180A2127EEE0300ED7806153C48EC1C1C
007CEC0FF80038EC03E02E497BC735>107 D E /Fk 133[52 57
57 1[57 63 34 57 40 1[63 63 63 92 29 57 1[29 63 63 34
57 63 57 1[57 9[97 1[75 63 69 75 80 69 1[75 1[63 2[29
1[80 63 69 1[75 1[75 6[34 57 1[57 57 1[57 3[57 1[29 34
29 2[34 34 40[{}48 103.666681 /Helvetica-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 300dpi
TeXDict begin
%%PaperSize: a4
%%BeginPaperSize: a4
a4
%%EndPaperSize
 @landscape
%%EndSetup
% %%Page: 1 1
%%Page: 1 1
0 setlinewidth
20 20 moveto 0 802 rlineto
556 0 rlineto 0 -802 rlineto closepath stroke
20 421 moveto 556 0 rlineto stroke
/sheetsave save def
gsave
20 822 translate
-90 rotate
3 0 translate
4 4 translate
387 596 div 548 842 div scale
0 0 moveto 0 842 lineto 596 842 lineto 596 0 lineto
closepath clip newpath
1 0 bop 914 301 a Fk(Generaliz)q(ed)31 b(Lookahead:)783
444 y(P)m(ar)n(sing)f(pred-)p Fj(LL)p Fi(\()p Fj(k)s
Fi(\))f Fk(langua)o(g)q(es)455 692 y(T)-6 b(erence)30
b(P)m(arr)284 835 y(P)m(arr)f(Resear)n(c)o(h)i(Corp)310
978 y(San)e(Fransisco,)h(CA)187 1121 y Fh(parrt@parr-)q(res)q(ea)q(rch)
q(.co)q(m)1771 692 y Fk(Russell)f(W)-8 b(.)29 b(Quong)1769
835 y(Pur)n(due)g(Univer)n(sity)1671 978 y(W)-8 b(.)29
b(Lafa)n(y)o(ette)q(,)j(IN)c(47906)1705 1121 y Fh(quong@ecn.)q(pur)q
(du)q(e.e)q(du)1063 1377 y Fg(\017)c Ff(Introduction)1063
1496 y Fg(\017)g Ff(Examples)1063 1616 y Fg(\017)g Ff(Generalizations)
1063 1735 y Fg(\017)g Ff(Ef)n(\256ciency)h(Hacks)1063
1854 y Fg(\017)f Ff(Guarded)f(Predicates)1063 1974 y
Fg(\017)h Ff(Conclusion)p eop
% %%Page: 2 2
grestore sheetsave restore
/sheetsave save def
gsave
20 421 translate
-90 rotate
3 0 translate
4 4 translate
387 596 div 548 842 div scale
0 0 moveto 0 842 lineto 596 842 lineto 596 0 lineto
closepath clip newpath
2 1 bop 162 300 a Fk(Intr)n(oduction)202 445 y Fg(\017)24
b Ff(Normal)g(parsing)f Fe(LL)p Fd(\()p Fe(k)s Fd(\))202
581 y Fg(\017)h Ff(Rules)g(executed)f(in)h(order)f(given)202
716 y Fg(\017)h Ff(Re-evaluation)f(of)h(predicates)202
852 y Fg(\017)g Ff(Ef)n(\256ciency)h(\(lower)e(priority\))187
1105 y(What)174 b(Notation)131 b(Example)p 162 1142 1212
2 v 187 1226 a(rules)188 b(lowercase)64 b(r)-5 b(,)24
b(a,)f(a)p 1234 1226 26 2 v 31 w(2)187 1345 y(tokens)121
b(uppercase)49 b(A,)24 b(B,)g(C)187 1464 y(anything)49
b(greek)236 b Fe(\013)q Ff(,)23 b Fe(\014)216 1874 y
Fg(\017)i Ff(LA)f(=)g(lookahead)f(vector)h(of)g(depth)f
Fe(k)s Ff(.)216 2009 y Fg(\017)i Ff(LA[i])f(=)g Fe(i)p
Ff(-th)f(lookahead)h(token)216 2145 y Fg(\017)h Ff(token)e(vectors)h
(AB,AA)h(separated)e(by)h(commas)216 2401 y Fg(\017)h
Ff(Assume)f(lookahead)f(depth)g(=)h Fe(k)j Fd(=)d(2)p
Ff(,)f(today)-6 b(.)p eop
% %%Page: 3 3
grestore sheetsave restore
showsheet
%%Page: 2 2
0 setlinewidth
20 20 moveto 0 802 rlineto
556 0 rlineto 0 -802 rlineto closepath stroke
20 421 moveto 556 0 rlineto stroke
/sheetsave save def
gsave
20 822 translate
-90 rotate
3 0 translate
4 4 translate
387 596 div 548 842 div scale
0 0 moveto 0 842 lineto 596 842 lineto 596 0 lineto
closepath clip newpath
3 2 bop 162 300 a Fk(Normal)28 b(P)m(ar)n(sing)i(\(no)g(predicates\))
162 432 y Ff(Now)24 b(consider)f(some)h(examples.)247
618 y Fc(r)43 b(->)g(a_1)g(a_2)374 737 y(|)g(b)374 857
y(|)g(c)162 976 y(a_1)h(->)f(A)374 1095 y(|)g(BA)162
1215 y(a_2)h(->)f(A)247 1334 y(b)g(->)g(BB)247 1453 y(c)g(->)g(C)p
eop
% %%Page: 4 4
grestore sheetsave restore
/sheetsave save def
gsave
20 421 translate
-90 rotate
3 0 translate
4 4 translate
387 596 div 548 842 div scale
0 0 moveto 0 842 lineto 596 842 lineto 596 0 lineto
closepath clip newpath
4 3 bop 162 274 1232 2 v 161 393 2 120 v 188 358 a Fc(void)44
b(r\(\))f Fg(f)p 1393 393 V 161 513 V 289 477 a Fc(if)h(\()e(LA)i(in)f
(\(AA,BB\))i(\))e Fg(f)p 1393 513 V 161 632 V 391 596
a Fc(a)p 438 596 26 2 v 31 w(1\(\);)p 1393 632 2 120
v 161 751 V 391 716 a(a)p 438 716 26 2 v 31 w(2\(\);)p
1393 751 2 120 v 161 871 V 289 835 a Fg(g)g Fc(else)h(if)f(\()g(LA)g
(in)g(BB)h(\))f Fg(f)p 1393 871 V 161 990 V 391 954 a
Fc(b\(\);)p 1393 990 V 161 1109 V 289 1074 a Fg(g)g Fc(else)h(if)f(\()g
(LA[1])h(in)g(C)f(\))f Fg(f)p 1392 1109 V 161 1229 V
391 1193 a Fc(c\(\);)p 1393 1229 V 161 1348 V 289 1312
a Fg(g)p 1393 1348 V 161 1467 V 188 1432 a(g)p 1393 1467
V 162 1469 1232 2 v 162 1471 V 1673 274 1147 2 v 1672
393 2 120 v 1699 358 a Fc(void)i(a)p 1958 358 26 2 v
31 w(1)e(\(\))i Fg(f)p 2819 393 2 120 v 1672 513 V 1800
477 a Fc(if)g(\()e(LA)i(in)f(AA)g(\))g Fg(f)p 2819 513
V 1672 632 V 1902 596 a Fc(consume)i(A;)p 2819 632 V
1672 751 V 1800 716 a Fg(g)e Fc(else)h(if)f(\()g(LA)g(in)g(BA)h(\))e
Fg(f)p 2818 751 V 1672 871 V 1902 835 a Fc(consume)j(AB;)p
2819 871 V 1672 990 V 1800 954 a Fg(g)p 2819 990 V 1672
1109 V 1699 1074 a(g)d Fc(/*)h(a)p 1958 1074 26 2 v 31
w(1)g(*/)p 2819 1109 2 120 v 1673 1111 1147 2 v 1673
1113 V eop
% %%Page: 5 5
grestore sheetsave restore
showsheet
%%Page: 3 3
0 setlinewidth
20 20 moveto 0 802 rlineto
556 0 rlineto 0 -802 rlineto closepath stroke
20 421 moveto 556 0 rlineto stroke
/sheetsave save def
gsave
20 822 translate
-90 rotate
3 0 translate
4 4 translate
387 596 div 548 842 div scale
0 0 moveto 0 842 lineto 596 842 lineto 596 0 lineto
closepath clip newpath
5 4 bop 162 301 a Fk(Pred-)p Fj(LL)p Fi(\()p Fj(k)s Fi(\))29
b Fk(Lookahead)216 487 y Fg(\017)c Ff(Evaluate)f(a)g(predicate)46
b Fg(\()-14 b(\))48 b Ff(context)24 b(is)g(correct.)216
623 y Fg(\017)h Ff(Must)e(test)h(if)g(predicate)f(context)h(is)g
(correct)f(\256rst.)216 759 y Fg(\017)i Ff(Predicate)e(may)h(often)f
(uses)h(lookahead)284 887 y(Say)-6 b(,)24 b(a)f(symbol)h(table)g
(lookup:)238 b(pred)23 b(=)h Fc(isType\(LA)q([2)q(]\);)q
Ff(.)247 1073 y Fc(r)43 b(->)g(pred1)h(a)374 1193 y(|)f(\(A)g(|)g(B\))g
(C)p 162 1379 1601 2 v 161 1498 2 120 v 188 1462 a(void)h(r)f(\(\))g
Fg(f)p 1762 1498 V 161 1617 V 289 1582 a Fc(if)h(\()e(LA)i(in)f
(FIRST\(a\))j(&&)d(pred)p 1438 1582 26 2 v 32 w(1\(\))h(\))f
Fg(f)p 1762 1617 2 120 v 161 1737 V 391 1701 a Fc(a\(\);)p
1762 1737 V 161 1856 V 289 1820 a Fg(g)g Fc(else)h(if)f(\()g(LA)g(in)g
(\(AC,BC\))j(\))d Fg(f)p 1762 1856 V 161 1975 V 391 1940
a Fc(consume\()j([AB]C)e(\);)p 1762 1975 V 161 2095 V
289 2059 a Fg(g)p 1762 2095 V 161 2214 V 188 2178 a(g)e
Fc(/*)h(r)g(*/)p 1762 2214 V 162 2216 1601 2 v 162 2218
V eop
% %%Page: 6 6
grestore sheetsave restore
/sheetsave save def
gsave
20 421 translate
-90 rotate
3 0 translate
4 4 translate
387 596 div 548 842 div scale
0 0 moveto 0 842 lineto 596 842 lineto 596 0 lineto
closepath clip newpath
6 5 bop 162 287 a Ff(When)24 b(testing)f(for)h(an)f(alternative,)g
Fc(alt)p 1508 287 26 2 v 32 w(X)247 473 y(alt_X)44 b(=)f(predX)i
($alpha$)p 162 659 1427 2 v 161 779 2 120 v 188 743 a(if)e(\()g(LA\(\))
h(is)f(valid)h(&&)g(predX\(\))h(\))e Fg(f)p 1587 779
V 161 898 V 289 862 a Fc(predict)j(alternativ)q(e)p 1097
862 26 2 v 34 w(X;)p 1587 898 2 120 v 161 1017 V 188
982 a Fg(g)p 1587 1017 V 161 1137 V 1587 1137 V 162 1138
1427 2 v 162 1140 V eop
% %%Page: 7 7
grestore sheetsave restore
showsheet
%%Page: 4 4
0 setlinewidth
20 20 moveto 0 802 rlineto
556 0 rlineto 0 -802 rlineto closepath stroke
20 421 moveto 556 0 rlineto stroke
/sheetsave save def
gsave
20 822 translate
-90 rotate
3 0 translate
4 4 translate
387 596 div 548 842 div scale
0 0 moveto 0 842 lineto 596 842 lineto 596 0 lineto
closepath clip newpath
7 6 bop 162 300 a Fk(Predicate-conte)o(x)q(t)32 b(tree)216
486 y Fg(\017)25 b Ff(AND-OR)f(tree,)g(alternating)e(by)i(level)216
647 y Fg(\017)h Ff(describes)e(predicting)g(an)h(alternative/rule.)216
833 y Fg(\017)h Fb(e)m(v)n(aluating)j Ff(a)c(node)f Fe(x)h
Ff(=)g(evaluating)g(subtree)f(at)g Fe(x)216 969 y Fg(\017)i
Ff(each)e(node)h(has)g(a)f Fb(conte)m(xt)32 b Ff(=)24
b(all)g(valid)g(lookahead)f(for)h(subtree)f(at)h Fe(x)p
Ff(.)216 1105 y Fg(\017)h Ff(evaluate)e(a)h(node)f(if)n(f)i(context)e
(is)h(correct)216 1241 y Fg(\017)h Ff(3)f(kinds)g(of)f(nodes:)303
1368 y Fa(\261)h Ff(AND)h(-)e(true)h(if)g(all)g(children)f(eval)h(true)
303 1488 y Fa(\261)g Ff(OR)g(-)g(true)f(if)h(any)g(child)g(evals)f
(true)303 1607 y Fa(\261)h Ff(predicate)f(-)h(just)g(evaluate)p
eop
% %%Page: 8 8
grestore sheetsave restore
/sheetsave save def
gsave
20 421 translate
-90 rotate
3 0 translate
4 4 translate
387 596 div 548 842 div scale
0 0 moveto 0 842 lineto 596 842 lineto 596 0 lineto
closepath clip newpath
8 7 bop 247 277 a Fc(r)43 b(->)g(a)g(b)374 396 y(|)g(a)g(C)374
515 y(|)g(b)g(C)247 635 y(a)g(->)g(pred_1)i(\(A)e(|)g(AA\))247
754 y(b)g(->)g(pred_2)i(BB)162 951 y
 22592082 14208860 0 0 17037475 10656645 startTexFig
 162 951 a
%%BeginDocument: predtree.eps
/$F2psDict 200 dict def 
$F2psDict begin
$F2psDict /mtrx matrix put
/l {lineto} bind def
/m {moveto} bind def
/s {stroke} bind def
/n {newpath} bind def
/gs {gsave} bind def
/gr {grestore} bind def
/clp {closepath} bind def
/graycol {dup dup currentrgbcolor 4 -2 roll mul 4 -2 roll mul
4 -2 roll mul setrgbcolor} bind def
/col-1 {} def
/col0 {0 0 0 setrgbcolor} bind def
/col1 {0 0 1 setrgbcolor} bind def
/col2 {0 1 0 setrgbcolor} bind def
/col3 {0 1 1 setrgbcolor} bind def
/col4 {1 0 0 setrgbcolor} bind def
/col5 {1 0 1 setrgbcolor} bind def
/col6 {1 1 0 setrgbcolor} bind def
/col7 {1 1 1 setrgbcolor} bind def
 /DrawEllipse {
	/endangle exch def
	/startangle exch def
	/yrad exch def
	/xrad exch def
	/y exch def
	/x exch def
	/savematrix mtrx currentmatrix def
	x y translate xrad yrad scale 0 0 1 startangle endangle arc
	savematrix setmatrix
	} def

	end
/$F2psBegin {$F2psDict begin /$F2psEnteredState save def} def
/$F2psEnd {$F2psEnteredState restore end} def

$F2psBegin
0 setlinecap 0 setlinejoin
-135.0 234.0 translate 0.900 -0.900 scale
0.500 setlinewidth
% Ellipse
n 339 99 11 11 0 360 DrawEllipse gs col-1 s gr
% Ellipse
n 339 179 11 11 0 360 DrawEllipse gs col-1 s gr
% Ellipse
n 239 179 11 11 0 360 DrawEllipse gs col-1 s gr
% Polyline
n 339 109 m 339 169 l gs col-1 s gr
% Polyline
n 344 104 m 414 174 l gs col-1 s gr
% Polyline
n 329 104 m 244 174 l gs col-1 s gr
% Polyline
n 234 189 m 214 244 l gs col-1 s gr
n 214 244 m 214 244 l gs col-1 s gr
% Polyline
n 244 189 m 264 244 l gs col-1 s gr
% Polyline
n 334 189 m 314 244 l gs col-1 s gr
% Polyline
n 344 189 m 364 244 l gs col-1 s gr
/Helvetica findfont 16.00 scalefont setfont
149 184 m 
gs 1 -1 scale (AND) col-1 show gr
/Helvetica findfont 16.00 scalefont setfont
154 104 m 
gs 1 -1 scale (OR) col-1 show gr
/Helvetica-Oblique findfont 16.00 scalefont setfont
249 259 m 
gs 1 -1 scale (p_2) col-1 show gr
/Helvetica-Oblique findfont 16.00 scalefont setfont
299 259 m 
gs 1 -1 scale (p_1) col-1 show gr
/Helvetica-Oblique findfont 16.00 scalefont setfont
249 259 m 
gs 1 -1 scale (p_2) col-1 show gr
/Helvetica-Oblique findfont 16.00 scalefont setfont
199 259 m 
gs 1 -1 scale (p_1) col-1 show gr
/Helvetica-Oblique findfont 16.00 scalefont setfont
399 189 m 
gs 1 -1 scale (p_2) col-1 show gr
/Courier findfont 14.00 scalefont setfont
304 239 m 
gs 1 -1 scale (A) col-1 show gr
/Courier findfont 14.00 scalefont setfont
369 239 m 
gs 1 -1 scale (A) col-1 show gr
/Courier findfont 14.00 scalefont setfont
309 169 m 
gs 1 -1 scale (AA) col-1 show gr
/Courier findfont 14.00 scalefont setfont
419 169 m 
gs 1 -1 scale (BB) col-1 show gr
/Courier findfont 14.00 scalefont setfont
264 239 m 
gs 1 -1 scale (BB) col-1 show gr
/Courier findfont 14.00 scalefont setfont
199 239 m 
gs 1 -1 scale (A) col-1 show gr
/Helvetica-Oblique findfont 16.00 scalefont setfont
349 259 m 
gs 1 -1 scale (true) col-1 show gr
/Helvetica findfont 16.00 scalefont setfont
154 259 m 
gs 1 -1 scale (OR) col-1 show gr
/Courier findfont 14.00 scalefont setfont
184 169 m 
gs 1 -1 scale (AA,AB) col-1 show gr
/Courier findfont 14.00 scalefont setfont
249 89 m 
gs 1 -1 scale (AA,AB,BB) col-1 show gr
$F2psEnd
%%EndDocument

 endTexFig
 eop
% %%Page: 9 9
grestore sheetsave restore
showsheet
%%Page: 5 5
0 setlinewidth
20 20 moveto 0 802 rlineto
556 0 rlineto 0 -802 rlineto closepath stroke
20 421 moveto 556 0 rlineto stroke
/sheetsave save def
gsave
20 822 translate
-90 rotate
3 0 translate
4 4 translate
387 596 div 548 842 div scale
0 0 moveto 0 842 lineto 596 842 lineto 596 0 lineto
closepath clip newpath
9 8 bop 162 274 1941 2 v 161 393 2 120 v 188 358 a Fc(void)44
b(r)f(\(\))g Fg(f)p 2102 393 V 161 513 V 289 477 a Fc(if)h(\()e(\(LA)i
(in)f(\(AA,AB\))j(&&)d(pred)p 1438 477 26 2 v 32 w(1\(\)\))h(&&)p
2102 513 2 120 v 161 632 V 391 596 a(\()f(LA[2])i(in)e(\(B\))g(&&)h
(pred)p 1328 596 26 2 v 32 w(2\(\)\))g(\))f Fg(f)p 2102
632 2 120 v 161 751 V 391 716 a Fc(a\(\);)p 2102 751
V 161 871 V 391 835 a(b\(\);)p 2102 871 V 161 990 V 289
954 a Fg(g)g Fc(else)h(if)f(\()g(\(LA)h(in)f(\(AA,AC\))i(&&)e(pred)p
1735 954 26 2 v 33 w(1\(\)\))h(\))f Fg(f)p 2102 990 2
120 v 161 1109 V 391 1074 a Fc(a\(\);)p 2102 1109 V 161
1229 V 391 1193 a(consume)j(C;)p 2102 1229 V 161 1348
V 289 1312 a Fg(g)d Fc(else)h(if)f(\()g(\(LA)h(in)f(\(BB\))h(&&)f(pred)
p 1608 1312 26 2 v 32 w(2\(\)\))h(\))f Fg(f)p 2102 1348
2 120 v 161 1467 V 391 1432 a Fc(b\(\);)p 2102 1467 V
161 1587 V 391 1551 a(consume)j(C;)p 2102 1587 V 161
1706 V 289 1670 a Fg(g)p 2102 1706 V 161 1825 V 188 1790
a(g)p 2102 1825 V 162 1827 1941 2 v 162 1829 V 162 1909
a Ff(Here,)23 b(LA[2])h(=)g(second)g(lookahead)f(token.)p
eop
% %%Page: 10 10
grestore sheetsave restore
/sheetsave save def
gsave
20 421 translate
-90 rotate
3 0 translate
4 4 translate
387 596 div 548 842 div scale
0 0 moveto 0 842 lineto 596 842 lineto 596 0 lineto
closepath clip newpath
10 9 bop 162 300 a Fk(Explicit)29 b(predicate-cont)q(e)n(x)q(t)j(guar)n
(d)162 432 y Ff(E.g.)g(evaluate)23 b(a)h Fc(pred)p 941
432 26 2 v 32 w(XYZ\(\))p Ff(,)i(if)e(LA[2])g(is)g(X,Y)-11
b(,)25 b(or)e(Z.)162 564 y(Might)g(try)247 750 y Fc(r)43
b(->)g(<<)g(LA[2])i(in)e(\(X,Y,Z\))i(&&)e(pred_XYZ)j(>>?)e(\(A|B\))g
(\(A|B|C|X|)q(Y|)q(Z\))p 162 936 1448 2 v 161 1056 2
120 v 188 1020 a(void)g(r)f(\(\))g Fg(f)p 1608 1056 V
161 1175 V 289 1139 a Fc(if)h(\()e(LA)i(in)f(\([AB][ABC)q(XY)q(Z]\))j
(&&)p 1608 1175 V 161 1294 V 391 1259 a(\()d(LA[2])i(in)e([ABC])h(&&)f
(pred)p 1412 1259 26 2 v 33 w(XYZ\))p 1607 1294 2 120
v 161 1414 V 391 1378 a(\))g Fg(f)p 1608 1414 V 161 1533
V 391 1497 a Fc(consume)j(two)d(tokens;)p 1608 1533 V
161 1652 V 289 1617 a Fg(g)p 1608 1652 V 161 1772 V 188
1736 a(g)f Fc(/*)h(r)g(*/)p 1608 1772 V 162 1773 1448
2 v 162 1775 V 162 1900 a Ff(W)n(rong!)32 b(Incorrectly)-6
b(,)22 b(fails)i(to)g(parse)f(when)h(lookahead)f(is)h(AA.)162
2032 y(Reason:)31 b(manual)24 b(context)f(makes)h Fe(<<)f
Ff(contex)g(&&)i(predicate)e Fe(>>)g Ff(fail.)162 2164
y(Moral:)31 b(Cannot)23 b(use)h(normal)f(&&)i(in)f(a)g(predicate)f(for)
g(context.)p eop
% %%Page: 11 11
grestore sheetsave restore
showsheet
%%Page: 6 6
0 setlinewidth
20 20 moveto 0 802 rlineto
556 0 rlineto 0 -802 rlineto closepath stroke
20 421 moveto 556 0 rlineto stroke
/sheetsave save def
gsave
20 822 translate
-90 rotate
3 0 translate
4 4 translate
387 596 div 548 842 div scale
0 0 moveto 0 842 lineto 596 842 lineto 596 0 lineto
closepath clip newpath
11 10 bop 162 288 a Fa(2)24 b(Solutions:)162 420 y Ff(1\))f(Manually)h
(split)g(an)f(alternative.)162 552 y(Ugh.)32 b(Can)23
b(be)h(inconvenient)f(or)h(dif)n(\256cult)g(to)g(do.)162
685 y(E.g.)247 871 y Fc(r)43 b(->)85 b(<<pred_X)q(YZ)46
b(>>?)86 b(\(A|B\))44 b(\(X|Y|Z\))374 990 y(|)764 b(\(A|B\))44
b(\(A|B|C\))p eop
% %%Page: 12 12
grestore sheetsave restore
/sheetsave save def
gsave
20 421 translate
-90 rotate
3 0 translate
4 4 translate
387 596 div 548 842 div scale
0 0 moveto 0 842 lineto 596 842 lineto 596 0 lineto
closepath clip newpath
12 11 bop 162 287 a Ff(2\))23 b(Use)h(a)g(guarded)f(predicate:)31
b Fe(<<)23 b Ff(context)g(=\277)h(predicate)f Fe(>>)p
Fd(?)162 419 y Ff(Ugh.)32 b(Y)-8 b(et)24 b(another)f(ANTLR)h(feature.)
162 552 y Fb(Guard)31 b Ff(=)25 b(restricts)e(allowable)h(context.)p
162 729 1665 2 v 161 848 2 120 v 188 812 a Fc(void)44
b(r)f(\(\))g Fg(f)p 1826 848 V 161 967 V 289 932 a Fc(if)h(\()e(LA)i
(in)f(\([AB][ABC)q(XY)q(Z]\))j(&&)p 1826 967 V 161 1087
V 391 1051 a(\()d(!)85 b(LA[2])45 b(in)e([ABC])h Fg(jj)f
Fc(pred)p 1503 1051 26 2 v 32 w(XYZ\(\))h(\))p 1825 1087
2 120 v 161 1206 V 391 1170 a(\))f Fg(f)p 1826 1206 V
161 1325 V 391 1290 a Fc(consume)j(two)d(tokens;)p 1826
1325 V 161 1445 V 289 1409 a Fg(g)p 1826 1445 V 161 1564
V 188 1528 a(g)f Fc(/*)h(r)g(*/)p 1826 1564 V 162 1566
1665 2 v 162 1568 V eop
% %%Trailer
grestore sheetsave restore
showsheet
%%Trailer
%%Pages: 6
