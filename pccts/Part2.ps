%!PS-Adobe-3.0%%Title: (! Integrated)%%Creator: (FrameMaker5: PSPrinter 8.1.1)%%CreationDate: (2:48 PM Tuesday, March 28, 2000)%%For: (Moog)%%Pages: 49%%DocumentFonts: Times-Italic Times-Roman Courier Symbol%%DocumentNeededFonts: Times-Italic Times-Roman Courier Symbol%%DocumentSuppliedFonts:%%DocumentData: Clean7Bit%%PageOrder: Ascend%%Orientation: Portrait%ADO_PaperArea: -12 -12 780 600%ADO_ImageableArea: 0 0 768 588%%EndComments/md 168 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if%%BeginFile: adobe_psp_basic%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved./bd{bind def}bind def/xdf{exch def}bd/xs{exch store}bd/ld{load def}bd/Z{0 def}bd/T/true/F/false/:L/lineto/lw/setlinewidth/:M/moveto/rl/rlineto/rm/rmoveto/:C/curveto/:T/translate/:K/closepath/:mf/makefont/gS/gsave/gR/grestore/np/newpath14{ld}repeat/$m matrix def/av 81 def/por true def/normland false def/psb-nosave{}bd/pse-nosave{}bd/us Z/psb{/us save store}bd/pse{us restore}bd/level2/languagelevel where{pop languagelevel 2 ge}{false}ifelsedef/featurecleanup{stoppedcleartomarkcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bd/noload Z/startnoload{{/noload save store}if}bd/endnoload{{noload restore}if}bdlevel2 startnoload/setjob{statusdict/jobname 3 -1 roll put}bd/setcopies{userdict/#copies 3 -1 roll put}bdlevel2 endnoload level2 not startnoload/setjob{1 dict begin/JobName xdf currentdict end setuserparams}bd/setcopies{1 dict begin/NumCopies xdf currentdict end setpagedevice}bdlevel2 not endnoload/pm Z/mT Z/sD Z/realshowpage Z/initializepage{/pm save store mT concat}bd/endp{pm restore showpage}def/$c/DeviceRGB def/rectclip where{pop/rC/rectclip ld}{/rC{np 4 2 roll:M1 index 0 rl0 exch rlneg 0 rl:Kclip np}bd}ifelse/rectfill where{pop/rF/rectfill ld}{/rF{gSnp4 2 roll:M1 index 0 rl0 exch rlneg 0 rlfillgR}bd}ifelse/rectstroke where{pop/rS/rectstroke ld}{/rS{gSnp4 2 roll:M1 index 0 rl0 exch rlneg 0 rl:KstrokegR}bd}ifelse%%EndFile%%BeginFile: adobe_psp_colorspace_level1%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved./G/setgray ld/:F/setrgbcolor ld%%EndFile%%BeginFile: adobe_psp_customps%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved./$t Z/$p Z/$s Z/$o 1. def/2state? false def/ps Zlevel2 startnoload/pushcolor/currentrgbcolor ld/popcolor/setrgbcolor ld/setcmykcolor where{pop/currentcmykcolor where{pop/pushcolor/currentcmykcolor ld/popcolor/setcmykcolor ld}if}iflevel2 endnoload level2 not startnoload/pushcolor{currentcolorspace $c eq{currentcolor currentcolorspace true}{currentcmykcolor false}ifelse}bd/popcolor{{setcolorspace setcolor}{setcmykcolor}ifelse}bdlevel2 not endnoload/pushstatic{ps2state?$o$t$p$s}bd/popstatic{/$s xs/$p xs/$t xs/$o xs/2state? xs/ps xs}bd/pushgstate{save errordict/nocurrentpoint{pop 0 0}putcurrentpoint3 -1 roll restorepushcolorcurrentlinewidthcurrentlinecapcurrentlinejoincurrentdash exch aload lengthnp clippath pathbbox$m currentmatrix aload pop}bd/popgstate{$m astore setmatrix2 index sub exch3 index sub exchrCarray astore exch setdashsetlinejoinsetlinecaplwpopcolornp :M}bd/bu{pushgstategRpushgstate2state?{gRpushgstate}ifpushstaticpm restoremT concat}bd/bn{/pm save storepopstaticpopgstategSpopgstate2state?{gSpopgstate}if}bd/cpat{pop 64 div G 8{pop}repeat}bd%%EndFile%%BeginFile: adobe_psp_basic_text%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved./S/show ld/A{0.0 exch ashow}bd/R{0.0 exch 32 exch widthshow}bd/W{0.0 3 1 roll widthshow}bd/J{0.0 32 4 2 roll 0.0 exch awidthshow}bd/V{0.0 4 1 roll 0.0 exch awidthshow}bd/fcflg true def/fc{fcflg{vmstatus exch sub 50000 lt{(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store}if pop}if}bd/$f[1 0 0 -1 0 0]def/:ff{$f :mf}bd/MacEncoding StandardEncoding 256 array copy defMacEncoding 39/quotesingle putMacEncoding 96/grave put/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacEncoding 128 128 getinterval astore poplevel2 startnoload/copyfontdict{findfont dup length dictbegin{1 index/FID ne{def}{pop pop}ifelse}forall}bdlevel2 endnoload level2 not startnoload/copyfontdict{findfont dup length dictcopybegin}bdlevel2 not endnoloadmd/fontname known not{/fontname/customfont def}if/Encoding Z/:mre{copyfontdict/Encoding MacEncoding deffontname currentdictenddefinefont :ff def}bd/:bsr{copyfontdict/Encoding Encoding 256 array copy defEncoding dup}bd/pd{put dup}bd/:esr{pop popfontname currentdictenddefinefont :ff def}bd/scf{scalefont def}bd/scf-non{$m scale :mf setfont}bd/ps Z/fz{/ps xs}bd/sf/setfont ld/cF/currentfont ld/mbf{/makeblendedfont where{popmakeblendedfont/ABlend exch definefont}{pop}ifelsedef}def%%EndFile%%BeginFile: adobe_psp_derived_styles%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved./wiversion(23.0)eq{{gS 0 0 0 0 rC stringwidth gR}bind}{/stringwidth load}ifelsedef/$o 1. def/gl{$o G}bd/ms{:M S}bd/condensedmtx[.82 0 0 1 0 0]def/:mc{condensedmtx :mf def}bd/extendedmtx[1.18 0 0 1 0 0]def/:me{extendedmtx :mf def}bd/basefont Z/basefonto Z/dxa Z/dxb Z/dxc Z/dxd Z/dsdx2 Z/bfproc Z/:fbase{dup/FontType get 0 eq{dup length dict begindup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall/FDepVector exch/FDepVector get[exch/:fbase load forall]def}/bfproc load ifelse/customfont currentdict end definefont}bd/:mo{/bfproc{dup dup length 2 add dictbegin{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall/PaintType 2 def/StrokeWidth .012 0 FontMatrix idtransform pop def/customfont currentdictenddefinefont8 dict begin/basefonto xdf/basefont xdf/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/Encoding StandardEncoding def/BuildChar{exch beginbasefont setfont( )dup 0 4 -1 roll putdup wisetcharwidth0 0 :MgSgldup showgRbasefonto setfontshowend}def}store :fbase}bd/:mso{/bfproc{7 dict begin/basefont xdf/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/Encoding StandardEncoding def/BuildChar{exch beginsD begin/dxa 1 ps div defbasefont setfont( )dup 0 4 -1 roll putdup wi1 index 0 ne{exch dxa add exch}ifsetcharwidthdup 0 0 msdup dxa 0 msdup dxa dxa msdup 0 dxa msgldxa 2. div dup msendend}def}store :fbase}bd/:ms{/bfproc{dup dup length 2 add dictbegin{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall/PaintType 2 def/StrokeWidth .012 0 FontMatrix idtransform pop def/customfont currentdictenddefinefont8 dict begin/basefonto xdf/basefont xdf/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/Encoding StandardEncoding def/BuildChar{exch beginsD begin/dxb .05 defbasefont setfont( )dup 0 4 -1 roll putdup wiexch dup 0 ne{dxb add}ifexch setcharwidthdup dxb .01 add 0 ms0 dxb :TgSgldup 0 0 msgRbasefonto setfont0 0 msendend}def}store :fbase}bd/:mss{/bfproc{7 dict begin/basefont xdf/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/Encoding StandardEncoding def/BuildChar{exch beginsD begin/dxc 1 ps div def/dsdx2 .05 dxc 2 div add defbasefont setfont( )dup 0 4 -1 roll putdup wiexch dup 0 ne{dsdx2 add}ifexch setcharwidthdup dsdx2 .01 add 0 ms0 .05 dxc 2 div sub :Tdup 0 0 msdup dxc 0 msdup dxc dxc msdup 0 dxc msgldxc 2 div dup msendend}def}store :fbase}bd/:msb{/bfproc{7 dict begin/basefont xdf/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/Encoding StandardEncoding def/BuildChar{exch beginsD begin/dxd .03 defbasefont setfont( )dup 0 4 -1 roll putdup wi1 index 0 ne{exch dxd add exch}ifsetcharwidthdup 0 0 msdup dxd 0 msdup dxd dxd ms0 dxd msendend}def}store :fbase}bd/italicmtx[1 0 -.212557 1 0 0]def/:mi{italicmtx :mf def}bd/:v{[exch dup/FontMatrix get exchdup/FontInfo known{/FontInfo getdup/UnderlinePosition known{dup/UnderlinePosition get2 index 03 1 rolltransformexch pop}{.1}ifelse3 1 rolldup/UnderlineThickness known{/UnderlineThickness getexch 0 3 1 rolltransformexch popabs}{pop pop .067}ifelse}{pop pop .1 .067}ifelse]}bd/$t Z/$p Z/$s Z/:p{aload pop2 index mul/$t xs1 index mul/$p xs.012 mul/$s xs}bd/:m{gS0 $p rm$t lw0 rl strokegR}bd/:n{gS0 $p rm$t lw0 rlgSglstrokegRstrokepath$s lw/setstrokeadjust where{popcurrentstrokeadjust true setstrokeadjust stroke setstrokeadjust}{stroke}ifelsegR}bd/:o{gS0 $p rm$t 2 div dup rm$t lwdup 0 rlstrokegR:n}bd%%EndFile/currentpacking where {pop sc_oldpacking setpacking}ifend		% md%%EndProlog%%BeginSetupmd begincountdictstack[{%stopped%%BeginFeature: *ManualFeed False    1 dict    dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put	setpagedevice	1 dict     dup /ManualFeed false put     setpagedevice%%EndFeature}featurecleanupcountdictstack[{%stopped%%BeginFeature: *PageSize Letter    1 dict    dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put	setpagedevice	2 dict    dup /PageSize [612 792] put    dup /ImagingBBox null put    setpagedevice%%EndFeature}featurecleanup(Moog)setjob/pT[1 0 0 -1 12 780]def/mT[1 0 0 -1 12 780]def/sD 16 dict def300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse%%IncludeFont: Times-Italic%%IncludeFont: Times-Roman%%IncludeFont: Courier%%IncludeFont: Symbol/f0_1/Times-Italic :mre/f0_10 f0_1 10 scf/f1_1/Times-Roman :mre/f1_10 f1_1 10 scf/f1_8 f1_1 8 scf/f2_1/Courier :mre/f2_10 f2_1 10 scf/f3_1/Symbol :bsr240/apple pd:esr /f4_1 f3_1 :mi/f4_10 f4_1 10 scf/Courier findfont[10 0 0 -10 0 0]:mf setfont% Frame PostScript Prolog for use with Macintosh Frame Products 5.0.1% Copyright (c) 1986-95 Frame Technology Corp.  All rights reserved.%%BeginProcSet: "FrameMacDict" 501 1userdict/FrameMacDict 250 dict put FrameMacDict begin systemdict/setpackingknown{/fMSP currentpacking def true setpacking}if[/fM1/fM18/fM2/fM3/fM4/fMAB/fM5/fM6/fM8/fM9/fMBC/fMBM/fMC/fMCD/fMCG/fMCK/fMCM/fMCl/fMCO/fMef/fMet/fMeh/fMew/fMey/fMex/fMei/fMej/fMek/fMel/fMFl/fMGC/fMGL/fMGM/fMIx/fMJB/fMJC/fMJG/fMJK/fMJM/fMJR/fMJY/fMK/fML1/fMM/fMN/fMNC/fMNg/fMND/fMOx/fMPC/fMPH/fMPt/fMRC/fMS/fMSJ/fMUC/fMUM/fMUY/fMY/fMdm/fM2x/fMa2/fMi/fMk/fms/fmBS/fMdp/freq/sangle/sflipx/sflipy/pflipx/pflipy/xx/yy/xindex/yindex/fM1B/fM0B/fMdc/fMds]{0 def}forall/fML1/languagelevel where{pop languagelevel}{1}ifelse 2 lt def/fMCl fML1{/statusdict where{pop statusdict/processcolors known{statusdict/processcolorsget exec 1 gt}{F}ifelse}{F}ifelse}{T}ifelse def/fMXN/statusdict where{popstatusdict/product known{statusdict/product get}{(Unknown)}ifelse}{(Unknown)}ifelse def/fMHq fMXN(LaserWriter-Sim)eq def/FmBD{bind def}bind def/fmBx{[exch{dup/FrameMacDict eq{pop FrameMacDict}{dup type dup/arraytype eq exch/packedarraytype eq or{dup xcheck{fmBi}if}if}ifelse}forall]cvx}FmBD/fmBi{bindfmBx}FmBD fML1{userdict/FrMacBegin{FrameMacDict begin}fmBi put/FmE{end}FmBD}{/fMdc 6 array def userdict/FrMacBegin{FrameMacDict begin/fMds currentcolorspacestore mark 0 0 0 0 0 currentcolor fMdc astore pop cleartomark}fmBi put/FmE{fMdssetcolorspace mark fMdc aload pop setcolor cleartomark end}FmBD}ifelse/fMEd 35dict def/fmPE{fMEd 3 1 roll fmBi put}bind def/T true def/F false def userdict/FrameSuccessfull F put userdict/FrameEndPictSave F put userdict/FrameEndPictStopped F put userdict/fM7 known not{userdict/fM7 0 put}if/fmXD{exch def}FmBD/FmG/gsave load def/FmR/grestore load def/fm_l/grestoreall loaddef/fm_v/save load def/fm_g/setgray load def/fm_r/setrgbcolor load def/fm_h/sethsbcolor load def/fm_f/fill load def/fm_e/eofill load def/fm_t/stroke loaddef/fm_m/imagemask load def/fm_i/image load def/fm_s/show load def/fm_a/ashowload def/fm_w/widthshow load def/fm_y/awidthshow load def/RealKshow/kshow loaddef/fMdm matrix defaultmatrix def/fM2x matrix def/fMa2 matrix def/fmSM{fM2xcurrentmatrix pop}FmBD/fmRM{fM2x setmatrix}FmBD/FmRF{currentpoint 2 copytranslate 4 2 roll{-1 1 scale}if rotate neg exch neg exch translate}FmBD/fmax{2copy lt{exch}if pop}FmBD/fmin{2 copy gt{exch}if pop}FmBD systemdict/pdfmarkknown{/fMAB true def/FmPD/pdfmark load def/FmPT/fm_s load defcurrentdistillerparams/CoreDistVersion get 2000 ge{/FmPD2/pdfmark load def/FmPA{mark exch/Dest exch 5 3 roll/View[/XYZ null 6 -2 roll FmDC exch pop null]/DESTFmPD}FmBD}{/FmPD2/cleartomark load def/FmPA{pop pop pop}FmBD}ifelse}{/fMABfalse def/FmPD/cleartomark load def/FmPD2/cleartomark load def/FmPT/pop loaddef/FmPA{pop pop pop}FmBD}ifelse/FmDC{transform fMdm itransform cvi exch cviexch}FmBD/FmBx{dup 3 index lt{3 1 roll exch}if 1 index 4 index lt{4 -1 roll 3 1roll exch 4 1 roll}if}FmBD/fmgS 32 array def/fMgt 0 def/fMtp 0 def/fmSG{fmgSfMgt get dup null eq{pop fmgS fMgt 10 dict dup 4 1 roll put}if 3 1 roll put}FmBD/fmGG{fMgt -1 -1{fmgS exch get dup null ne{2 copy exch known{2 copy exchget/_notdef ne{exch get dup exit}if}if}if pop}for pop}FmBD/gsave{FrameMacDictbegin FmG/fMgt fMgt 1 add def fmgS fMgt get dup null eq{pop}{dup dup{pop/_notdef put dup}forall pop pop}ifelse end}fmPE/grestore{FrameMacDict beginfMgt fMtp gt{/fMgt fMgt 1 sub def}if FmR null fmCN end}fmPE/grestoreall{FrameMacDict begin/fMgt fMtp def fm_l null fmCN end}fmPE/save{FrameMacDict/fm_vget exec FrameMacDict begin/fMgt fMgt 1 add def fmgS fMgt get dup null eq{pop}{dup dup{pop/_notdef put dup}forall pop pop}ifelse/fMtp fMgt def end}fmPE/fMND Fdef/fMCC null fmSG/fMOP F fmSG/fMKO F fmSG/fmRY{1 exch sub 3 1 roll 1 exch sub3 1 roll 1 exch sub 3 1 roll 3 copy 2 copy le{pop}{exch pop}ifelse 2 copy le{pop}{exch pop}ifelse dup dup dup 6 1 roll 4 1 roll 7 1 roll sub 6 1 roll sub 51 roll sub 4 1 roll}fmSG/fmkn{2 copy known{get T}{pop pop false}ifelse}FmBD/fmfp{exch currentfont dup/FontMatrix get exch/FontInfo fmkn{T}{currentfont/dffmkn{dup/FontInfo fmkn{3 1 roll/FontMatrix get mtx concatmatrix exch T}{pop poppop F}ifelse}{pop pop F}ifelse}ifelse{3 -1 roll fmkn{exch 0 3 1 roll dtransformneg exch pop exch pop}{pop exec}ifelse}{exec}ifelse}FmBD/fmdl{3 index 16 and 0ne{FmG currentlinewidth 2. div dup rmoveto currentpoint newpath moveto 2 index0 rlineto fm_t FmR}if 3 index 24 and 0 ne{FmG currentrgbcolor dup 4 1 roll eq 31 roll eq and{1 currentgray sub setgray}{1 setgray}ifelse 2 index 0 rlinetofm_t FmR FmG 2 index 0 rlineto strokepath .24 setlinewidth fm_t FmR}{2 index 0rlineto fm_t 0 0 moveto}ifelse}FmBD/FmUl{FmG/fM2 fmXD currentpoint/UnderlineThickness{fM2 15 div}fmfp abs dup setlinewidth/fM1 fmXD 4 index 1 and0 ne{newpath 2 copy moveto 0/UnderlinePosition{fM2 10 div neg}fmfp neg rmovetofmdl}if 4 index 2 and 0 ne{newpath 2 copy moveto 0/XHeight{FmG newpath 0 0moveto(x)F charpath flattenpath pathbbox 4 -1 roll pop pop pop FmR dup 0 eq{popfM2 2. mul 3. div neg}if}fmfp 2. div rmoveto fmdl}if 4 index 4 and 0 ne{newpath2 copy moveto 0/CapHeight{FmG newpath 0 0 moveto(H)F charpath flattenpathpathbbox 4 -1 roll pop pop pop FmR dup 0 eq{pop fM2 3. mul 4. div neg}if}fmfpfM1 sub rmoveto fmdl}if pop pop pop pop pop FmR}FmBD/FmTx{/fM3 fmXD/fM2 fmXD/fM1 fmXD 0 32 fM1 fM3 stringwidth pop fM2 sub fM3 length div sub 0 fM3 fm_y}FmBD/fMN 0 def/fMC 1 def/fMM 2 def/fMY 3 def/fMK 4 def/fMS 5 def/fMNg 0currenttransfer exec .5 gt def/fMCM fMN def/fMJK 0 def/fMJY 0 def/fMJM 0 def/fMJC 0 def/fMJR 1 def/fMJG 1 def/fMJB 1 def/fMCG 1 def/fMPt null def/fMCK[0 00 1 0 0 0]def/fmCH{fML1{14 dict dup begin fMCl{/HalftoneType 2 defcurrentcolorscreen[/GraySpotFunction/GrayAngle/GrayFrequency/BlueSpotFunction/BlueAngle/BlueFrequency/GreenSpotFunction/GreenAngle/GreenFrequency/RedSpotFunction/RedAngle/RedFrequency]{exch def}forall}{/HalftoneType 1 defcurrentscreen[/SpotFunction/Angle/Frequency]{exch def}forall}ifelse statusdict/checkscreen known{statusdict/accuratescreens get exec}{F}ifelse/AccurateScreens exch def end}{currenthalftone}ifelse}FmBD/fmSH{fML1{beginstatusdict/checkscreen known{currentdict/AccurateScreens known{AccurateScreens}{F}ifelse statusdict/setaccuratescreens get exec}if HalftoneType 1 eq{FrequencyAngle currentdict/SpotFunction get setscreen}{HalftoneType 2 eq{fMCl{RedFrequency RedAngle currentdict/RedSpotFunction get GreenFrequency GreenAnglecurrentdict/GreenSpotFunction get BlueFrequency BlueAngle currentdict/BlueSpotFunction get GrayFrequency GrayAngle currentdict/GraySpotFunction getsetcolorscreen}{GrayFrequency GrayAngle currentdict/GraySpotFunction getsetscreen}ifelse}if}ifelse end}{sethalftone}ifelse}FmBD/FmCS{14 dict begin/HalftoneType 2 def/AccurateScreens exch def/GraySpotFunction exch def/GrayAngle exch def/GrayFrequency exch def/BlueSpotFunction exch def/BlueAngleexch def/BlueFrequency exch def/GreenSpotFunction exch def/GreenAngle exch def/GreenFrequency exch def/RedSpotFunction exch def/RedAngle exch def/RedFrequency exch def currentdict dup end/fMPH exch def fmSH}FmBD/FmSS{5 dictbegin/HalftoneType 1 def/AccurateScreens exch def/SpotFunction exch def/Angleexch def/Frequency exch def currentdict dup end/fMPH exch def fmSH}FmBD/fMPHfmCH def/fmcp{/FmPr2 exch cvlit def/FmPr1 exch cvlit def/FmPrn FmPr1 lengthFmPr2 length add array def FmPrn 0 FmPr1 putinterval FmPrn FmPr1 length FmPr2putinterval FmPrn cvx}FmBD/fmEp{sub dup 0 lt{neg}if .001 le}FmBD/fmQC{2 copy 0get exch 0 get fmEp{2 copy 1 get exch 1 get fmEp{2 copy 2 get exch 2 get fmEp{3get exch 3 get fmEp}{pop pop F}ifelse}{pop pop F}ifelse}{pop pop F}ifelse}FmBD/fmQR{2 copy 4 get exch 0 get fmEp{2 copy 5 get exch 1 get fmEp{6 get exch 2get fmEp}{pop pop F}ifelse}{pop pop F}ifelse}FmBD/FmSC{/fMCM fmXD/fMJB fmXD/fMJG fmXD/fMJR fmXD/fMJK fmXD/fMJY fmXD/fMJM fmXD/fMJC fmXD fmCC}FmBD/FmSP{/fMCM fmXD fmCC}FmBD/FrameSetSepColors{FrameMacDict begin[exch 1 add 1 roll]/fMSC exch def end}fmBi def/fmLC{fMSC{exch dup 3 -1 roll fmQC{pop T exit}if}forall dup T ne{pop F}if}FmBD/fmLR{fMSC{exch dup 3 -1 roll fmQR{pop T exit}if}forall dup T ne{pop F}if}FmBD/fmLM{fMSC{exch dup 3 -1 roll dup 7 get 3 -1 rolleq{exch pop T exit}{pop}ifelse}forall dup T ne{pop F}if}FmBD/fmCN{fMND F fMCMfMN ne{/fMOP fmGG{/fMKO fmGG{pop T}if}if}if dup/fMND exch def{pop pop}{exch dupnull ne{exch pop dup type dup/integertype eq exch/realtype eq or{fm_g}{setcolor}ifelse}{pop{1 fm_g}if}ifelse}ifelse}FmBD/fill{FrameMacDict begin fMND{newpath}{fm_f}ifelse end}fmPE/eofill{FrameMacDict begin fMND{newpath}{fm_e}ifelse end}fmPE/stroke{FrameMacDict begin fMND{newpath}{fm_t}ifelse end}fmPE/imagemask{FrameMacDict begin fMND{FmG nulldevive fm_m FmR}{fm_m}ifelse end}fmPE/fmNX{loadfMND{FmG fMa2 currentmatrix end nulldevice setmatrix exec currentpointFrameMacDict/FmR get exec moveto}{end exec}ifelse}fmBi def/show{FrameMacDictbegin/fm_s fmNX}fmPE/ashow{FrameMacDict begin/fm_a fmNX}fmPE/widthshow{FrameMacDict begin/fm_w fmNX}fmPE/awidthshow{FrameMacDict begin/fm_y fmNX}fmPE/kshow{FrameMacDict begin/RealKshow fmNX}fmPE/image{FrameMacDict begin fMCM fMNne fMCM fMK ne and{FmG/fMOP fmGG{nulldevice}{fMNg{{pop 0}}{{pop 1}}ifelsesettransfer}ifelse/fm_i load end exec FmR}{/fm_i load end exec}ifelse}fmPE/fMGMT def/fMBM F def/findcmykcustomcolor{0 0 0 4 -1 roll 8 array astore}fmPE/findrgbcustomcolor{FrameMacDict begin 4 1 roll 3 copy/fmRY fmGG exec 8 4 roll4 -1 roll 8 array astore end}fmPE/findgraycustomcolor{0 0 0 exch 1 exch subexch findcmykcustomcolor}fmPE/findhsbcustomcolor{FrameMacDict begin 4 1 rollgsave fm_h currentrgbcolor grestore 4 -1 roll findrgbcustomcolor end}fmPE/setcustomcolor{FrameMacDict begin dup type dup/integertype eq exch/realtype eqor not{1.0}if exch dup/fMCC exch fmSG/fMBM F def fMCM fMN eq{0 4 getintervalaload pop 4{4 index mul 4 1 roll}repeat fmSK pop}{dup{7 get}stopped{pop 4 get}if fmLM{exch pop 0 4 getinterval aload pop fMCM fMS eq{fMJK eq exch fMJY eq andexch fMJM eq and exch fMJC eq and{1 exch sub F}{pop 1 T}ifelse}{5{pop}repeat 1T}ifelse}{fMCM fMK eq{3 get F}{fMCM fMY eq{2 get F}{fMCM fMM eq{1 get F}{fMCMfMC eq{0 get F}{pop 0 T}ifelse}ifelse}ifelse}ifelse 3 1 roll mul 1 exch subexch}ifelse/fMKO exch fmSG fmCN}ifelse end}fmPE/setoverprint{FrameMacDict begin/fMOP exch fmSG null fmCN end}fmPE/currentoverprint{FrameMacDict begin/fMOPfmGG end}fmPE/fmCC{fMCM fMN eq{fMGM fML1 or not{[/Pattern[/DeviceCMYK]]setcolorspace fMCK 0 4 getinterval aload pop fMPt setcolor}{fMCK 3 get 1.0 ge{fMCG fm_g}{fMAB not fMCl fMGM and and{0 1 3{fMCK exch get 1 fMCG sub mul}forfmSK}{4 1 6{fMCK exch get fMGM{1 exch sub 1 fMCG sub mul 1 exch sub}{1.0 lt{fMCG}{1}ifelse}ifelse}for fm_r}ifelse}ifelse}ifelse null/fMKO F fmSG}{fMBM{fMCGF}{fMCK 0 4 getinterval aload fmLC{fMCM fMS eq{fMJK eq exch fMJY eq and exchfMJM eq and exch fMJC eq and{fMCG F}{1 T}ifelse}{pop pop pop pop 1 T}ifelse}{fMCM fMK eq{fMCG 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop F}{fMCM fMYeq{pop fMCG 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop F}{fMCM fMM eq{poppop fMCG 1.0 exch sub mul 1.0 exch sub exch pop F}{fMCM fMC eq{pop pop pop fMCG1.0 exch sub mul 1.0 exch sub F}{pop pop pop pop 1 T}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse/fMKO exch fmSG fMGM fML1 or not{[/Pattern[/DeviceGray]]setcolorspace fMPt}{fMGM not fML1 and{dup 1 lt{pop fMCG}if}if}ifelse}ifelsefmCN}FmBD/setgray{FrameMacDict begin fMCM fMN eq{F}{fMCM fMK eq{F}{fMCM fMS eqfMJR 0 eq and fMJG 0 eq and fMJB 0 eq and{F}{pop 1 T}ifelse}ifelse}ifelse/fMKOexch fmSG fmCN end}fmPE/setrgbcolor{FrameMacDict begin/fMBM F def fMCM fMN eq{fm_r}{3 copy[4 1 roll]fmLR{fMCM fMS eq{fMJB eq exch fMJG eq and exch fMJR eqand{0 F}{1 T}ifelse}{pop pop pop 1 T}ifelse}{/fmRY fmGG exec fMCM fMK eq{1.0exch sub 4 1 roll pop pop pop F}{fMCM fMY eq{pop 1.0 exch sub 3 1 roll pop popF}{fMCM fMM eq{pop pop 1.0 exch sub exch pop F}{fMCM fMC eq{pop pop pop 1.0exch sub F}{pop pop pop pop 1 T}ifelse}ifelse}ifelse}ifelse}ifelse/fMKO exchfmSG fmCN}ifelse end}fmPE/sethsbcolor{FrameMacDict begin fMCM fMN eq{fm_h}{fm_hcurrentrgbcolor setrgbcolor}ifelse end}fmPE/setcmykcolor where{pop/fmSK/setcmykcolor load def}{/fmSK{4 1 roll 3{3 index add 0 fmax 1 fmin 1 exch sub 31 roll}repeat fm_r pop}FmBD}ifelse/currentcmykcolor where{pop}{/currentcmykcolor{FrameMacDict begin currentrgbcolor/fmRY fmGG exec end}fmPE}ifelse/setcmykcolor{FrameMacDict begin/fMBM F def fMCM fMN eq{fmSK}{4 copy[5 1roll]fmLC{fMCM fMS eq{fMJK eq exch fMJY eq and exch fMJM eq and exch fMJC eqand{0 F}{1 T}ifelse}{pop pop pop pop 1 T}ifelse}{fMCM fMK eq{1.0 exch sub 4 1roll pop pop pop dup 1.0 ge}{fMCM fMY eq{pop 1.0 exch sub 3 1 roll pop pop dup1.0 ge}{fMCM fMM eq{pop pop 1.0 exch sub exch pop dup 1.0 ge}{fMCM fMC eq{poppop pop 1.0 exch sub dup 1.0 ge}{pop pop pop pop 1 T}ifelse}ifelse}ifelse}ifelse}ifelse/fMKO exch fmSG fmCN}ifelse end}fmPE/fMFl[0 .1 .3 .5 .7 .9 .97 1<0f1e3c78f0e1c387><0f87c3e1f0783c1e><cccccccccccccccc><ffff0000ffff0000><8142241818244281><0102040810204080><8040201008040201>]def fML1{/patScreenDict 7 dictdup begin<0f1e3c78f0e1c387>[45{pop}{exch pop}.5 2 sqrt]FmBD<0f87c3e1f0783c1e>[135{pop}{exch pop}.5 2 sqrt]FmBD<cccccccccccccccc>[0{pop}dup .5 2]FmBD<ffff0000ffff0000>[90{pop}dup .5 2]FmBD<8142241818244281>[45{2 copy lt{exch}if pop}dup.75 2 sqrt]FmBD<0102040810204080>[45{pop}{exch pop}.875 2 sqrt]FmBD<8040201008040201>[135{pop}{exch pop}.875 2 sqrt]FmBD end def}{/fMPP 5 dict dup begin<0f87c3e1f0783c1e>{3 setlinewidth -1 -1 moveto 9 9 lineto fm_t 4 -4 moveto 12 4lineto fm_t -4 4 moveto 4 12 lineto fm_t}FmBD<0f1e3c78f0e1c387>{3 setlinewidth-1 9 moveto 9 -1 lineto fm_t -4 4 moveto 4 -4 lineto fm_t 4 12 moveto 12 4lineto fm_t}FmBD<8142241818244281>{1 setlinewidth -1 9 moveto 9 -1 lineto fm_t-1 -1 moveto 9 9 lineto fm_t}FmBD<8040201008040201>{1 setlinewidth -1 -1 moveto9 9 lineto fm_t 4 -4 moveto 12 4 lineto fm_t -4 4 moveto 4 12 lineto fm_t}FmBD<0102040810204080>{1 setlinewidth -1 9 moveto 9 -1 lineto fm_t -4 4 moveto 4 -4lineto fm_t 4 12 moveto 12 4 lineto fm_t}FmBD end def/fMPD 15 dict dup begin/PatternType 1 def/PaintType 2 def/TilingType 3 def/BBox[0 0 8 8]def/XStep 8def/YStep 8 def/PaintProc{begin fMPP fmBS known{fMPP fmBS get exec}{8 8 T[1 0 0-1 0 8]fmBS fm_m}ifelse end}FmBD end def}ifelse/fMdp 72 0 fMdm dtransform dupmul exch dup mul add sqrt def/freq fMdp dup 72 div round dup 0 eq{pop 1}if 8mul div def/sangle 1 0 fMdm dtransform exch atan def sangle fMa2 rotate fMdmfMa2 concatmatrix dup 0 get/sflipx exch def 3 get/sflipy exch def fML1{/fmgF{fMa2 exch get mul 0 lt{-1}{1}ifelse}FmBD}if/fmPM fML1{{dup patScreenDict exchknown{patScreenDict exch get aload pop freq mul 5 2 roll fMa2 currentmatrix 1get 0 ne{3 -1 roll 90 add 3 1 roll sflipx 1 fmgF sflipy 2 fmgF mul}{sflipx 0fmgF sflipy 3 fmgF neg mul}ifelse 0 lt{exch pop}{pop}ifelse fMNg{{neg}fmcp}ifbind systemdict/setscreen get exec}{/fmBS fmXD/fM1B 0 def/fM0B 0 def freq 0fMa2 currentmatrix 1 get 0 ne{90 add/pflipx sflipx 1 fmgF def/pflipy sflipy 2fmgF def}{/pflipx sflipx 0 fmgF def/pflipy sflipy 3 fmgF neg def}ifelse{pflipymul/yy fmXD pflipx mul/xx fmXD/xindex xx 1 add 2 div 8 mul cvi def/yindex yy 1add 2 div 8 mul cvi def fmBS yindex xindex 8 idiv add get 1 7 xindex 8 mod subbitshift and 0 ne fMNg{not}if{/fM1B fM1B 1 add def 1}{/fM0B fM0B 1 add def 0}ifelse}setscreen fM0B fM0B fM1B add div fMNg{1.0 exch sub}if}ifelse/fMCG exchdef/fMGM F def fmCC}}{/fMPC 8 dict def{dup fMPC exch known{fMPC exch get}{dupfMPD/fmBS 3 -1 roll put fMPD matrix makepattern dup fMPC 4 -1 roll 3 -1 rollput}ifelse/fMCG 0 def/fMPt exch def/fMGM F def fmCC}}ifelse FmBD/fmgr{fMGM not{/fMGM T def fML1{fMPH fmSH}if}if/fMCG exch def fmCC}FmBD/FmP{fMFl exch get duptype/stringtype eq{fmPM}{fmgr}ifelse}FmBD/FmK{fMCK astore pop/fMBM F def fmCC}FmBD/FmFB{0 0 0 1 0 0 0 fMCK astore pop/fMCG 0 def/fMBM T def fmCC}FmBD/fMOxmatrix def fMOx currentmatrix pop/FmSO{/FmOs save def fmSM fMOx setmatrix}FmBD/FmIO{fmRM}FmBD/FmEO{FmOs restore}FmBD/fm3R[{.3 mul add 1}bind{.59 mul add 2}bind{.11 mul add round cvi fMs exch fMi exch put/fMi fMi 1 add def 0 0}bind]def/fm31{/fMi 0 def 0 exch 0 exch{exch fm3R exch get exec}forall pop pop fMs}FmBD/fm41{0 exch 4 exch{exch 1 sub dup 0 eq{pop 4 1 roll 3 index add 255 fmin 255exch sub .11 mul 3 1 roll 3 index add 255 fmin 255 exch sub .59 mul 3 1 roll 3index add 255 fmin 255 exch sub .3 mul add add 255 fmin round cvi fMs exch 3index exch put pop 1 add 4}if}forall pop pop fMs}FmBD fML1{/Fmi{save userdict/fM7 3 -1 roll put/fM9 F def{{dup length 1 sub/fMGL fmXD/fMBC fmXD/fMNC fmXD/fMRC fmXD/fMGC fMGL 1 add array def/setcolortransfer where{popcurrentcolortransfer/gryt fmXD/blut fmXD/grnt fmXD/redt fmXD 0 1 fMGL{/fMIxfmXD/fMUC 1 fMRC fMIx get sub def/fMUM 1 fMNC fMIx get sub def/fMUY 1 fMBC fMIxget sub def/fMk fMUC fMUM fmin fMUY fmin def/FmU fMk currentundercolorremovalexec def fMRC fMIx 1 0 fMUC FmU sub fmax sub redt exec put fMNC fMIx 1 0 fMUMFmU sub fmax sub grnt exec put fMBC fMIx 1 0 fMUY FmU sub fmax sub blut execput fMGC fMIx 1 fMk currentblackgeneration exec sub gryt exec put}for{fMGL mulcvi fMRC exch get}{fMGL mul cvi fMNC exch get}{fMGL mul cvi fMBC exch get}{fMGLmul cvi fMGC exch get}setcolortransfer{pop 0}setundercolorremoval{}setblackgeneration/fM9 T def}{0 1 fMGL{fMGC exch dup dup fMRC exch get .3 mulexch dup fMNC exch get .59 mul exch fMBC exch get .11 mul add add put}for{fMGLmul cvi fMGC exch get}currenttransfer fmcp settransfer}ifelse}{dup length 1 sub/fMGL fmXD/fMGC fmXD{fMGL mul cvi fMGC exch get}currenttransfer fmcpsettransfer}ifelse}{{{1 exch sub}currenttransfer fmcp settransfer}if}ifelse/fM5fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD translate rotate scale{-1 1 scale}if/fM18 fM8 string def fM4 fM3 fM6[fM4 0 0 fM3 fM4 2 div fM3 2 div]{currentfilefM18 fM5{readstring}{readhexstring}ifelse pop}fM9{{fM18}{fM18}T 3 colorimage}{fm_i}ifelse fM7 restore}FmBD}{/Fmi{save userdict/fM7 3 -1 roll put/fM9 F def{{dup length 1 sub/fMGL fmXD/fMBC fmXD/fMNC fmXD/fMRC fmXD[/Indexed/DeviceRGBfMGL{dup fMRC exch get exch dup fMNC exch get exch fMBC exch get}]setcolorspace}{dup length 1 sub/fMGL fmXD/fMGC fmXD[/Indexed/DeviceGray fMGL{fMGC exch get}]setcolorspace}ifelse}{1 4 index bitshift 1 sub/fMGL fmXD[/Indexed/DeviceGrayfMGL 5 -1 roll{{fMGL div 1 exch sub}}{{fMGL div}}ifelse]setcolorspace}ifelse/fM5 fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD translate rotate scale{-1 1 scale}if/fM18 fM8 string def 7 dict begin/ImageType 1 def/Width fM4 def/Height fM3def/ImageMatrix[fM4 0 0 fM3 fM4 2 div fM3 2 div]def/DataSource{currentfile fM18fM5{readstring}{readhexstring}ifelse pop}def/BitsPerComponent fM6 def/Decode[0fMGL]def currentdict end fm_i fM7 restore}FmBD}ifelse/Fmci{save userdict/fM7 3-1 roll put/fM5 fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD/fM18 fM8 string def/fMs fM18 0 fM18 length 3 idiv getinterval def translate rotate scale{-1 1scale}if fM4 fM3 fM6[fM4 0 0 fM3 fM4 2 div fM3 2 div]fMCl{{currentfile fM18 fM5{readstring}{readhexstring}ifelse pop}F 3 colorimage}{{currentfile fM18 fM5{readstring}{readhexstring}ifelse pop fm31}fm_i}ifelse fM7 restore}FmBD/Fmc4{save userdict/fM7 3 -1 roll put/fM5 fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD/fM18 fM8 string def/fMs fM18 0 fM18 length 4 idiv getinterval def translaterotate scale{-1 1 scale}if fM4 fM3 fM6[fM4 0 0 fM3 fM4 2 div fM3 2 div]fMCl{{currentfile fM18 fM5{readstring}{readhexstring}ifelse pop}F 4 colorimage}{{currentfile fM18 fM5{readstring}{readhexstring}ifelse pop fm41}fm_i}ifelse fM7restore}FmBD fML1{/fmAn{transform round .5 sub exch round .5 sub exchitransform}FmBD/fmAc{transform round 1.5 sub exch round 1.5 sub exch itransform}FmBD/fmDn{dtransform round exch round exch idtransform}FmBD/fmLn{0 dtransformexch cvi 2 idiv 2 mul .1 add exch idtransform pop}FmBD/FmCv{fmDn 6 2 roll fmDn6 2 roll fmDn 6 2 roll rcurveto}FmBD}{T setstrokeadjust/fmAn{}FmBD/fmAc{}FmBD/fmDn{}FmBD/fmLn{}FmBD/FmCv{rcurveto}FmBD}ifelse/FmM{fmAn moveto}FmBD/M{moveto}FmBD/N{0 rmoveto}FmBD/S{fm_s}FmBD/A{0 exch fm_a}FmBD/W{0 exch 32 exch fm_w}FmBD/X{0 exch 0 32 5 2 roll fm_y}FmBD/fmQP{fML1 fMGM or not{FmG dup 1 fm_g exec FmR}if exec}FmBD/FmB{newpath fmAn moveto}FmBD/FmL{rlineto}FmBD/FmAL{fmAn lineto}FmBD/FmSo{fmLn setlinewidth setlinecap{fm_t}fmQP 0 0 moveto}FmBD/FmS{fmLnsetlinewidth closepath{fm_t}fmQP 0 0 moveto}FmBD/FmDS{fmLn setlinewidthsetlinecap{closepath}if setdash{fm_t}fmQP[]0 setdash 0 0 moveto}FmBD/FmFl{FmG{fm_e}fmQP FmR}FmBD/fmq{fmDn 4 2 roll fmAn newpath moveto 1 index 0 rlineto 0exch rlineto neg 0 rlineto closepath}FmBD/FmqP{fmq fmLn setlinewidth{fm_t}fmQP0 0 moveto}FmBD/FmqF{fmq FmG{fm_f}fmQP FmR}FmBD/FmKp{{currentpoint}stopped{F 51 roll}{T 7 3 roll}ifelse fmDn 4 2 roll fmAn newpath moveto 1 index 0 rlineto 0exch rlineto neg 0 rlineto closepath clip{moveto}{newpath}ifelse}FmBD/FmKb{{currentpoint}stopped}FmBD/FmKe{clip{newpath}{moveto}ifelse}FmBD/FmAF{FmGnewpath fmAn translate not{0.0 0.0 moveto}if rotate fmDn scale 0.0 0.0 1.0 5 3roll arc closepath{fm_f}fmQP FmR}FmBD/FmAP{FmG{setdash}if fmLn setlinewidthsetlinecap fmSM newpath 2 index 2 div add exch 3 index 2 div sub exch fmAn 2index 2 div sub exch 3 index 2 div add exch translate rotate scale 0.0 0.0 1.05 3 roll exch arcn{closepath}if fmRM{fm_t}fmQP FmR}FmBD/FmST{FmG fmAn translate.3 fmLn setlinewidth 0 setlinecap 0 setlinejoin newpath 1 fm_g 0 0 10 0 360 arcfm_f 0 fm_g 0 0 10 0 360 arc fm_t 36{1 0 moveto 0 0 10 -2.5 2.5 arc fm_f 10rotate}repeat FmR}FmBD/FmSL{FmG fmAn translate .25 fmLn setlinewidth 0setlinecap 0 setlinejoin newpath 1 fm_g 0 0 10 0 360 arc fm_f 0 fm_g 10 .5 fmLnneg .1{0 0 3 -1 roll 0 360 arc fm_t}for FmR}FmBD/FrameEr where{pop}{userdict/FrameEr(\000)put}ifelse/fMSJ 100 string def/fmXC{userdict/FrameEndPictSave 2index put FmE{countdictstack userdict begin/showpage{}def/FrameDictStackDepthexch def count/FrameStackDepth exch def}if userdict/FrameSuccessfull false putFrameMacDict/fMHq get/$brkpage where dup{exch pop}if or{userdict/FrameEndPictStopped false put}{userdict/FrameEndPictStopped true putcurrentfile cvx stopped pop FrameSuccessfull not{systemdict/clear get execuserdict/FrameEr get 0 1 put FrameMacDict begin FmG systemdict/initmatrix getexec 0 systemdict/setgray get exec clippath{pathbbox}stopped{100 100 512 692}ifexch pop add 2. div newpath moveto(Courier-BoldOblique)findfont 18 scalefontsetfont FrameEr1 fm_s( \()fm_s $error begin errorname 20 string cvs fm_s(, )fm_s/command load 128 string cvs fm_s end(\))fm_s FrameEr2 print flushFrameMacDict/fMSJ get{dup currentfile exch{readline}stopped{pop exch pop T}ifnot{exit}if(EndFrame5Picture)eq{exit}if}loop grestore end}if userdict/FrameSuccessfull false put userdict/FrameEndPictStopped false put FrameMacDict/fmIR get exec}ifelse}fmBi def/FmEP{save userdict/fM7 3 -1 roll put fMEd{userdict 3 1 roll put}forall setoverprint{fMN FmSP}if[/fMef/fMet/fMeh/fMew/fMey/fMex/fMei/fMej/fMek/fMel]{fmXD}forall fMex fMey translate fMet rotate fMewfMeh scale fMef{-1 1 scale}if 1 fMej fMel sub div 1 fMek fMei sub div scalefMej fMel add 2 div neg fMei fMek add 2 div neg translate 0 setgray 0setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit[]0 setdash newpathfML1 not{F setstrokeadjust}if T fmXC}FmBD/FmPI{newpath 0 0 moveto F fmXC}FmBD/FmPc{save userdict/fM7 3 -1 roll put newpath 3 index neg 3 index neg translate1 -1 scale 0.0 0.0 moveto T fmXC}FmBD/fmIR{FrameEndPictSave{fM7 type/savetypeeq{end/FrameDictStackDepth where{pop countdictstack FrameDictStackDepth sub dup0 gt{{end}repeat}{pop}ifelse count FrameStackDepth sub dup 0 gt{{pop}repeat}{pop}ifelse}if fM7 restore}if}if FrMacBegin}FmBD userdict/EndFrame5Picture{userdict/FrameEndPictSave 3 -1 roll put userdict/FrameEndPictStopped get{userdict/FrameSuccessfull true put stop}{FrameMacDict/fmIR get exec}ifelse}fmBiput/alphaimage where{pop}{/alphaimage{1 ne{limitcheck}if not{limitcheck}if popimage}fmPE}ifelse/fmDE{systemdict/initgraphics get exec clippath{pathbbox}stopped{100 100 512 692}if exch pop add 2. div newpath moveto(Courier-BoldOblique)findfont 18 scalefont setfont currentpoint 2 copy FrameEr3fm_s 20 sub 2 copy moveto FrameEr4 fm_s 20 sub 2 copy moveto(\()fm_s statusdict/jobname get fm_s(\))fm_s 20 sub moveto FrameEr5 fm_s showpage}FmBD/cd where{dup/cd get/fmRC fmXD/cd{FrameMacDict begin FrameEr 0 get 0 ne{fmDE}if/fmRC loadend exec}fmBi put}{/endp where{dup/endp get/fMRE fmXD/endp{FrameMacDict/fMREget exec FrameEr 0 get 0 ne{FrameMacDict begin currentfile fMSJ{readline}stopped{pop exch pop true}if pop(%%Trailer)eq{fmDE}if end}if}fmBi put}if}ifelsesystemdict/setpacking known{fMSP setpacking}if end%%EndProcSet%%FRMSetupFrameMacDict begin/FrameEr1(PostScript error)def/FrameEr2(A PostScript error occurred. FrameMaker is attempting recovery.)def/FrameEr3(FrameMaker has detected one or more)def/FrameEr4(PostScript errors in this document.)def/FrameEr5(Please check your output.)defend%%FRMEndSetup%%EndSetup%%Page: 1 1%%BeginPageSetupinitializepage(Moog; page: 1 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC0 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE0 0 :Mf0_10 sf( )S2 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S128.881 N (1)S7 FmP60 78 495 648 FmqFFmE3 0 :Mf1_10 sf( )S5 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (Mail corrections, suggestions, or comments to tmoog@polhode.com)SFmE60 107 495 12 rC5 0 :MFrMacBegin60 108 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 109 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC5 0 :Mf1_10 sf( )S7 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 104.667 M (Where is)S60 128.667 M (#1.)S12.7 N (The current maintenance release of )SFmE8 0 :Mf1_8 sf( )S10 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP228.161 128.667 M (PCCTS)SFmE10 0 :Mf1_10 sf( )S12 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP252.618 128.667 M (, these notes, and related examples are available on the net)S85.2 144.667 M (Primary Site:)SFmE12 0 :Mf1_8 sf( )S14 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 160.667 M (URL)SFmE14 0 :Mf1_10 sf( )S16 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP112 160.667 M (:)S17.222 N ( )S33.5 N (http://www.polhode.com/pccts.html)S96 172.667 M (anonymous ftp:)S9.51 N (ftp://ftp.enteract.com/users/tmoog)S85.2 188.667 M (Europe:)S96 204.667 M (anonymous ftp)S(:)S9.51 N (ftp://ftp.th-darmstadt.de/pub/programming/compiler-compiler/pccts/*)S276 220.667 M (\(This is updated weekly on Sunday.\))S60 236.667 M (#2.)S12.7 N (Some other items available at http://www.polhode.com:)S85.2 252.667 M (Link to the complete and unabridged version of T.J. Parr\325s book, )SFmE17 0 :Mf0_10 sf( )S19 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP346.782 252.667 M (Language Translation Using PCCTS and C++.)SFmE19 0 :Mf1_10 sf( )S21 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 264.667 M (Link to the source code for the examples from this book. )S85.2 280.667 M (Example grammars for C++, )SFmE22 0 :Mf1_8 sf( )S24 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP202.825 280.667 M (ANSI)SFmE24 0 :Mf1_10 sf( )S26 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP221.492 280.667 M ( C, and Fortran 77.   The Fortran 77 grammar \(C mode\) by Ferhat Hajdarpasic )S85.2 292.667 M (includes Sorcerer routines.)S85.2 308.667 M (Log of all changes made as part of the maintenance releases: )SFmE26 0 :Mf1_8 sf( )S28 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP330.351 308.667 M (CHANGES_FROM_133*.TXT)SFmE28 0 :Mf1_10 sf( )S30 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP432.359 308.667 M (.)S85.2 320.667 M (List of known problems: )SFmE31 0 :Mf1_8 sf( )S33 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP186.291 320.667 M (KNOWN_PROBLEMS.TXT)SFmE33 0 :Mf1_10 sf( )S35 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP280.737 320.667 M (.)S60 336.666 M (#3.)S12.7 N (Newsgroup is comp.compilers.tools.pccts.  Mailing list is pccts_1-33 at onelist.com.)SFmE60 359 495 11 rC35 0 :MFrMacBegin60 360 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 361 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC35 0 :Mf1_10 sf( )S37 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 356.666 M (Basics)S60 380.667 M (#4.)S12.7 N (Invoke )SFmE38 0 :Mf1_8 sf( )S40 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP115.466 380.667 M (ANTLR)SFmE40 0 :Mf1_10 sf( )S42 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP142.13 380.667 M ( or )SFmE42 0 :Mf1_8 sf( )S44 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP155.458 380.667 M (DLG)SFmE44 0 :Mf1_10 sf( )S46 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP171.899 380.667 M ( with no arguments to get a switch summary)S60 396.667 M (#5.)S12.7 N (Tokens begin with uppercase characters, rules begin with lowercase characters)S60 412.667 M (#6.)S12.7 N (Even in C mode you can use C++ style comments in the non-action portion of )SFmE47 0 :Mf1_8 sf( )S49 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP400.019 412.667 M (ANTLR)SFmE49 0 :Mf1_10 sf( )S51 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP426.683 412.667 M ( source code)S85.2 426.666 M (Inside an action you have to obey the comment conventions of your compiler.)S60 442.666 M (#7.)S12.7 N (In #token regular expressions spaces and tabs which are not escaped are ignored)S85.2 456.666 M (This makes it easy to add white space to a regular expression:)SFmE51 0 :Mf2_10 sf( )S57 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 470.666 M 0 0 252(#token  Symbol  \"[a-z A-Z] [a-z A-Z 0-9]*\")FmTxFmE57 0 :Mf1_10 sf( )S59 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 484.666 M (#8.)S12.7 N (Never choose names which coincide with compiler reserved words or library names)S85.2 500.666 M (You\325d be surprised how often someone has done something like one of the following:)SFmE60 0 :Mf2_10 sf( )S66 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 514.666 M 0 0 120(#token FILE   \"file\")FmTx132 524.666 M 0 0 102(#token EOF    \"@\")FmTx132 534.666 M 0 0 144(const:        \"[0-9]*\" ;)FmTxFmE66 0 :Mf1_10 sf( )S68 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 550.666 M (#9.)S12.7 N (Write <<predicate>>? not <<predicate )SFmE68 0 :Mf0_10 sf( )S70 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP242.292 550.666 M (semi-colon)SFmE71 0 :Mf1_10 sf( )S73 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP286.162 550.666 M (>>? \(semantic predicates go in \"if\" conditions\))S60 566.666 M (#10.)S7.7 N (Some constructs which cause warnings about ambiguities and optional paths)SFmE73 0 :Mf2_10 sf( )S79 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 580.666 M 0 0 150(rule : a { \( b | c \)* } ;)FmTx96 592.666 M 0 0 96(rule : a { b } ;)FmTx96 602.666 M 0 0 90(b    : \( c \)* ;)FmTx96 618.666 M 0 0 78(rule : a c* ;)FmTx96 628.666 M 0 0 96(a    : b { c } ;)FmTx96 644.666 M 0 0 132(rule : a { b | c | } ;)FmTxFmE60 665 495 11 rC79 0 :MFrMacBegin60 666 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 667 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC79 0 :Mf1_10 sf( )S81 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 662.666 M (Checklist)S60 686.666 M (#11.)S7.7 N (Locate incorrectly spelled #token symbols using )SFmE82 0 :Mf1_8 sf( )S84 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP281.25 686.666 M (ANTLR)S( )SFmE84 0 :Mf1_10 sf( )S86 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP309.914 686.666 M (\320w2 switch or by inspecting )SFmE86 0 :Mf0_10 sf( )S88 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP425.165 686.666 M (parserClassName)SFmE89 0 :Mf1_10 sf( )S91 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP496.825 686.666 M (.cpp)S85.2 702.666 M (If a #token symbol is spelled incorrectly )SFmE91 0 :Mf1_8 sf( )S93 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP248.752 702.666 M (ANTLR)SFmE93 0 :Mf1_10 sf( )S95 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP275.416 702.666 M ( will assign it a new #token number which, of course, will never be )S85.2 714.666 M (matched.)SFmEendp%%Page: 2 2%%BeginPageSetupinitializepage(Moog; page: 2 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC96 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE96 0 :Mf0_10 sf( )S98 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S128.881 N (2)S7 FmP60 78 495 648 FmqFFmE99 0 :Mf1_10 sf( )S101 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (#12.)S7.7 N (Be consistent with in-line token definitions:  \")SFmE101 0 :Mf2_10 sf( )S107 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP269.519 84.667 M 0 0 12(&&)FmTxFmE107 0 :Mf1_10 sf( )S109 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP281.519 84.667 M (\" will not be assigned the same token number as \")SFmE110 0 :Mf2_10 sf( )S116 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP480.733 84.667 M 0 0 24(\\&\\&)FmTxFmE116 0 :Mf1_10 sf( )S118 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP504.733 84.667 M (\")S60 100.667 M (#13.)S7.7 N (Duplicate definition of a #token name is not reported if there are no actions attached)SFmE118 0 :Mf1_8 sf( )S120 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 116.667 M (ANTLR)SFmE120 0 :Mf1_10 sf( )S122 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 116.667 M ( will simply use the later definition and forget the earlier one.  Using the )SFmE123 0 :Mf1_8 sf( )S125 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP403.424 116.667 M (ANTLR)SFmE125 0 :Mf1_10 sf( )S127 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP430.088 116.667 M ( \320w2 option does not help)S60 132.667 M (#14.)S7.7 N (Use )SFmE127 0 :Mf1_8 sf( )S129 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 132.667 M (ANTLR)SFmE129 0 :Mf1_10 sf( )S131 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP129.911 132.667 M ( option -info o to detect orphan rules when ambiguities are reported)S60 148.667 M (#15.)SFmE132 0 :Mf2_10 sf( )S138 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 148.667 M 0 0 12(LT)FmTxFmE138 0 :Mf1_10 sf( )S140 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP97.2 148.667 M (\()SFmE140 0 :Mf0_10 sf( )S142 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP100.528 148.667 M (i)SFmE143 0 :Mf1_10 sf( )S145 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.306 148.667 M (\) and )SFmE145 0 :Mf2_10 sf( )S151 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP126.072 148.667 M 0 0 36(LATEXT)FmTxFmE151 0 :Mf1_10 sf( )S153 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP162.072 148.667 M (\()SFmE154 0 :Mf0_10 sf( )S156 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP165.4 148.667 M (i)SFmE156 0 :Mf1_10 sf( )S158 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168.178 148.667 M (\) are magical names in semantic predicates \321 punctuation is critical)SFmE159 0 :Mf1_8 sf( )S161 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 164.667 M (ANTLR)SFmE161 0 :Mf1_10 sf( )S163 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 164.667 M ( wants to determine the amount of lookahead required for evaluating a semantic predicate.  It does this by )S85.2 176.667 M (searching in C++ mode for strings of the form \")SFmE163 0 :Mf2_10 sf( )S169 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP276.33 176.667 M 0 0 18(LT\()FmTxFmE169 0 :Mf1_10 sf( )S171 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP294.33 176.667 M (\" and in C mode for strings of the form \")SFmE172 0 :Mf2_10 sf( )S178 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP456.889 176.667 M 0 0 42(LATEXT\()FmTxFmE178 0 :Mf1_10 sf( )S180 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP498.889 176.667 M (\".  If there )S85.2 188.667 M (are spaces before the open \"\(\" it won\325t make a match.  It evaluates the expression following the \"\(\" under the )S85.2 200.667 M (assumption that it is an integer literal \(e.g.\"1\"\).  If it is something like \")SFmE180 0 :Mf2_10 sf( )S186 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP369.858 200.667 M 0 0 36(LT\(1+i)FmTxFmE186 0 :Mf1_10 sf( )S188 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP405.858 200.667 M (\)\" then you\325ll have problems.  With )SFmE189 0 :Mf1_8 sf( )S191 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 212.667 M (ANTLR)SFmE191 0 :Mf1_10 sf( )S193 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 212.667 M ( switch \320w2 you will receive a warning if )SFmE193 0 :Mf1_8 sf( )S195 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP280.409 212.667 M (ANTLR)SFmE195 0 :Mf1_10 sf( )S197 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP307.073 212.667 M ( doesn\325t find at least one )SFmE198 0 :Mf2_10 sf( )S204 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP407.591 212.667 M 0 0 12(LT)FmTxFmE204 0 :Mf1_10 sf( )S206 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP419.591 212.667 M (\()SFmE206 0 :Mf0_10 sf( )S208 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP422.918 212.667 M (i)SFmE209 0 :Mf1_10 sf( )S211 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP425.697 212.667 M (\) in a semantic predicate.)SFmE60 235 495 11 rC211 0 :MFrMacBegin60 236 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 237 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC211 0 :Mf1_10 sf( )S213 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 232.667 M (#token)S60 256.667 M (#16.)S7.7 N (To change the token name appearing in syntax error messages: #token ID\(\"identifier\"\) \"[a-z A-Z]+\")S85.2 272.667 M (The string appearing inside the parenthesis will be used for the token name in zztokens and _token_tbl)S60 288.667 M (#17.)S7.7 N (To match any single character use: \")SFmE214 0 :Mf2_10 sf( )S220 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP230.876 288.667 M 0 0 18(~[])FmTxFmE220 0 :Mf1_10 sf( )S222 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP248.876 288.667 M (\", to match everything to a newline use: \")SFmE222 0 :Mf2_10 sf( )S228 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP414.484 288.667 M 0 0 36(~[\\n]*)FmTxFmE228 0 :Mf1_10 sf( )S230 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP450.484 288.667 M (\")S60 304.667 M (#18.)S7.7 N (To match an \")SFmE231 0 :Mf2_10 sf( )S237 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP141.76 304.667 M 0 0 6(@)FmTxFmE237 0 :Mf1_10 sf( )S239 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP147.76 304.667 M (\" in your input text use \")SFmE239 0 :Mf2_10 sf( )S245 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP245.905 304.667 M 0 0 18(\\@\")FmTxFmE245 0 :Mf1_10 sf( )S247 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP263.905 304.667 M (, otherwise it will be interpreted as the end-of-file symbol)S60 320.667 M (#19.)S7.7 N (The escaped literals in #token regular expressions are: )SFmE248 0 :Mf2_10 sf( )S254 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP304.536 320.667 M 0 0 72(\\t \\n \\r \\b )FmTxFmE254 0 :Mf1_10 sf( )S256 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP376.536 320.667 M (\(not the same as )SFmE256 0 :Mf1_8 sf( )S258 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP443.731 320.667 M (ANSI)SFmE258 0 :Mf1_10 sf( )S260 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP462.399 320.667 M ( C\))S60 336.666 M (#20.)S7.7 N (In #token expressions \"\\12\" is decimal, \"\\012\" is octal, and \"\\0x12\" is hex \(not the same as )SFmE261 0 :Mf1_8 sf( )S263 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP449.866 336.666 M (ANSI)SFmE263 0 :Mf1_10 sf( )S265 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP468.533 336.666 M ( C\))S85.2 352.666 M (Contributed by John D. Mitchell \(johnm@jGuru.net\).)S60 368.666 M (#21.)SFmE265 0 :Mf1_8 sf( )S267 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 368.666 M (DLG)SFmE267 0 :Mf1_10 sf( )S269 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP101.641 368.666 M ( wants to find the longest possible string that matches)S85.2 384.666 M (The regular expression \")SFmE270 0 :Mf2_10 sf( )S276 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP183.398 384.666 M 0 0 24(~[]*)FmTxFmE276 0 :Mf1_10 sf( )S278 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP207.398 384.666 M (\" will cause problems \321 it will gobble up everything to the end-of-file.)S60 400.666 M (#22.)S7.7 N (When two regular expressions of equal length match a regular expression the first one is chosen)S85.2 416.666 M (Thus more specific regular expressions should appear in the grammar file before more general ones:)SFmE278 0 :Mf2_10 sf( )S284 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 430.666 M 0 0 402(#token  HELP    \"help\"         /*  should appear before \"symbol\" */)FmTx96 440.666 M 0 0 402(#token  Symbol  \"[a-z A-Z]*\"   /*  should appear after keywords  */)FmTxFmE284 0 :Mf1_10 sf( )S286 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 456.666 M (Some of these may be caught by using the )SFmE287 0 :Mf1_8 sf( )S289 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP256.543 456.666 M (DLG)SFmE289 0 :Mf1_10 sf( )S291 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP272.984 456.666 M ( switch \320Wambiguity.  In the following grammar the input string )S85.2 468.666 M (\"HELP\" will never be matched:)SFmE291 0 :Mf2_10 sf( )S297 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 482.666 M 0 0 306(#token  WhiteSpace      \"[\\ \\t]\"        <<skip\(\);>>)FmTx96 492.666 M 0 0 216(#token  ID              \"[a-z A-Z]+\")FmTx96 502.666 M 0 0 180(#token  HELP            \"HELP\")FmTx96 522.666 M 0 0 54(statement)FmTx132 532.666 M 0 0 330(: HELP \"@\"      <<printf\(\"token HELP\\n\"\);>>    /* a1 */)FmTx132 542.666 M 0 0 330(| \"inline\" \"@\"  <<printf\(\"token inline\\n\"\);>>  /* a2 */)FmTx132 552.666 M 0 0 330(| ID \"@\"        <<printf\(\"token ID\\n\"\);>>      /* a3 */)FmTx132 562.666 M 0 0 6(;)FmTxFmE297 0 :Mf1_10 sf( )S299 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 578.666 M (The best advice may be to follow the practice of TJP:  place \"#token ID\" at the end of the grammar file.)S60 594.666 M (#23.)S7.7 N (Inline regular expression are no different than #token statements)SFmE300 0 :Mf1_8 sf( )S302 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 610.666 M (PCCTS)SFmE302 0 :Mf1_10 sf( )S304 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP109.657 610.666 M ( code does )SFmE304 0 :Mf0_10 sf( )S306 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP154.362 610.666 M (not)SFmE307 0 :Mf1_10 sf( )S309 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP167.14 610.666 M ( check for a match to \"inline\" \(Item )S(#22)S( line a2\) before attempting a match to the regular )S85.2 622.666 M (expressions defined by #token statements. The first two alternatives \(\"a1\" and \"a2\"\) will )SFmE309 0 :Mf0_10 sf( )S311 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP440.83 622.666 M (never )SFmE312 0 :Mf1_10 sf( )S314 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP465.534 622.666 M (be matched. All of )S85.2 634.666 M (this will be clear from examination of the file \"parser.dlg\" \(the name does )SFmE314 0 :Mf0_10 sf( )S316 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP382.676 634.666 M (not)SFmE317 0 :Mf1_10 sf( )S319 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP395.454 634.666 M ( depend on the parser\325s class name\).)S85.2 650.666 M (Another way of looking at this is to recognize that the conversion of character strings to tokens takes place in class )SFmE319 0 :Mf1_8 sf( )S321 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 662.666 M (DLG)SFmE321 0 :Mf1_10 sf( )S323 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP101.641 662.666 M (Lexer, not class )SFmE324 0 :Mf1_8 sf( )S326 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP167.166 662.666 M (ANTLR)SFmE326 0 :Mf1_10 sf( )S328 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP193.83 662.666 M (Parser, and that all that is happening with an inline regular expression is that )SFmE328 0 :Mf1_8 sf( )S330 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP501.78 662.666 M (ANTLR)SFmE330 0 :Mf1_10 sf( )S332 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP528.444 662.666 M ( is )S85.2 674.666 M (allowing you to define a token\'s regular expression in a more convenient fashion \321 not changing the fundamental )S85.2 686.666 M (behavior.)S85.2 702.666 M (If one builds the example above using the )SFmE333 0 :Mf1_8 sf( )S335 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP254.59 702.666 M (DLG)SFmE335 0 :Mf1_10 sf( )S337 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP271.031 702.666 M ( switch \320Wambiguity one gets the message:)SFmE337 0 :Mf2_10 sf( )S343 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 716.666 M 0 0 282(dlg warning: ambigious regular expression  3  4)FmTxFmEendp%%Page: 3 3%%BeginPageSetupinitializepage(Moog; page: 3 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC343 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE343 0 :Mf0_10 sf( )S345 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S128.881 N (3)S7 FmP60 78 495 648 FmqFFmE346 0 :Mf2_10 sf( )S352 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 84.667 M 0 0 282(dlg warning: ambigious regular expression  3  5)FmTxFmE352 0 :Mf1_10 sf( )S354 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 100.667 M (The numbers which appear in the )SFmE354 0 :Mf1_8 sf( )S356 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP221.255 100.667 M (DLG)SFmE356 0 :Mf1_10 sf( )S358 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP237.696 100.667 M ( message refer to the assigned token numbers.  Examine the array _token_tbl )S85.2 112.667 M (in )SFmE359 0 :Mf0_10 sf( )S361 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP95.478 112.667 M (parserClassName)SFmE361 0 :Mf1_10 sf( )S363 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP167.138 112.667 M (.cpp to find the regular expression which corresponds to the token number reported by )SFmE364 0 :Mf1_8 sf( )S366 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP515.063 112.667 M (DLG)SFmE366 0 :Mf1_10 sf( )S368 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP531.505 112.667 M (:)SFmE368 0 :Mf2_10 sf( )S374 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 126.667 M 0 0 30(ANTLR)FmTxFmE374 0 :Mf1_8 sf( )S376 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP126 126.667 M (C)SFmE376 0 :Mf2_10 sf( )S382 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP131.336 126.667 M 0 0 162(har *Parser::_token_tbl[]={)FmTx132 136.667 M 0 0 156(/* 00 */        \"Invalid\",)FmTx132 146.667 M 0 0 120(/* 01 */        \"@\",)FmTx132 156.667 M 0 0 174(/* 02 */        \"WhiteSpace\",)FmTx132 166.667 M 0 0 126(/* 03 */        \"ID\",)FmTx132 176.667 M 0 0 138(/* 04 */        \"HELP\",)FmTx132 186.667 M 0 0 144(/* 05 */        \"inline\")FmTx96 196.667 M 0 0 12(};)FmTxFmE382 0 :Mf1_10 sf( )S384 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 212.666 M (Well, there is one important difference for those using Sorcerer.  With in-line regular expressions there is no )S85.2 224.666 M (symbolic name for the token, hence it can\325t be referenced in a Sorcerer rule.  Contributed by John D. Mitchell )S85.2 236.666 M (\(johnm@jGuru.com\).)S60 252.666 M (#24.)S7.7 N (Watch out when you see )SFmE385 0 :Mf2_10 sf( )S391 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP185.996 252.666 M 0 0 12(~[)FmTxFmE391 0 :Mf0_10 sf( )S393 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP197.996 252.666 M (list-of-characters)SFmE393 0 :Mf2_10 sf( )S399 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP267.415 252.666 M 0 0 6(])FmTxFmE399 0 :Mf1_10 sf( )S401 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP273.415 252.666 M ( at the end of a regular expression)S85.2 266.666 M (What the user usually wants to express is that the regular expression should stop )SFmE402 0 :Mf0_10 sf( )S404 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP408.984 266.666 M (before)SFmE404 0 :Mf1_10 sf( )S406 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP434.529 266.666 M ( the)SFmE407 0 :Mf0_10 sf( )S409 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP449.245 266.666 M ( list-of-characters)SFmE409 0 :Mf1_10 sf( )S411 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP521.164 266.666 M (.  )S85.2 278.666 M (However the expression will include the complement  of that list as part of the regular expression.  Often users )S85.2 290.666 M (forget about what happens to the characters which are in the complement of the set.)S85.2 306.666 M (Consider for example a #lexclass for a C style comment:)SFmE412 0 :Mf2_10 sf( )S418 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 320.666 M 0 0 180(/* C-style comment handling */)FmTx96 332.666 M 0 0 414(#lexclass COMMENT                                            /* a1 */)FmTx96 342.666 M 0 0 414(#token \"\\*/\"            << mode\(START\); skip\(\); >>           /* a2 */)FmTx96 352.666 M 0 0 414(#token \"~[\\*]+\"         << skip\(\); >>                        /* a3 */)FmTx96 362.666 M 0 0 414(#token \"\\*~[/]\"         << skip\(\); >>  /* WRONG */           /* a4 */)FmTx96 372.666 M 0 0 414(             /* Should be \"\\*\"                        */     /* a5 */)FmTx96 382.666 M 0 0 414(             /* Correction due to Tim Corringham      */     /* a6 */)FmTx96 392.666 M 0 0 414(             /*    tim@ramjam.u-net.com    20-Dec-94  */     /* a7 */)FmTxFmE418 0 :Mf1_10 sf( )S420 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 408.666 M (The RE at line a2 accepts \"*/\" and changes to #lexclass START.  The RE at line a4 accepts a \"*\" which is )SFmE420 0 :Mf0_10 sf( )S422 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP511.369 408.666 M (not)SFmE423 0 :Mf1_10 sf( )S425 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP524.148 408.666 M ( )S85.2 420.666 M (followed by a \"/\".  The problem arises with comments of the form:)SFmE425 0 :Mf2_10 sf( )S431 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 434.666 M 0 0 234(/* this comments breaks the example **/)FmTxFmE431 0 :Mf1_10 sf( )S433 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 448.666 M (The RE at line a4 consumes the \"**\" at the end of the comment leaving nothing to be matched by \"\\*/\".)S85.2 464.666 M (This is a relatively efficient way to span a comment. However it is not the simplest. A simpler description is:)SFmE434 0 :Mf2_10 sf( )S440 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 478.666 M 0 0 414(#token \"\\*/\"            << mode\(START\); skip\(\); >>           /* b1 */)FmTx96 488.666 M 0 0 414(#token \"~[]\"            << skip\(\); >>                        /* b2 */)FmTxFmE440 0 :Mf1_10 sf( )S442 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 504.666 M (This works because b1 \(\"*/\"\) is two characters long while b2 is only one character long \321 and )SFmE442 0 :Mf1_8 sf( )S444 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP466.548 504.666 M (DLG)SFmE444 0 :Mf1_10 sf( )S446 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP482.989 504.666 M ( always prefers )S85.2 516.666 M (the longest expression which matches.)S85.2 532.666 M (For those who are concerned with the efficiency of scanning:)SFmE447 0 :Mf2_10 sf( )S453 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 546.666 M 0 0 36(#token)FmTx36 N 0 0 48(\"[\\n\\r]\")FmTx60 N 0 0 126(<<skip\(\);newline\(\);>>)FmTx132 556.666 M 0 0 36(#token)FmTx36 N 0 0 30(\"\\*/\")FmTx78 N 0 0 138(<<mode\(START\);skip\(\);>>)FmTx132 566.666 M 0 0 36(#token)FmTx36 N 0 0 24(\"\\*\")FmTx84 N 0 0 66(<<skip\(\);>>)FmTx132 576.666 M 0 0 36(#token)FmTx36 N 0 0 72(\"~[\\*\\n\\r]+\")FmTx36 N 0 0 66(<<skip\(\);>>)FmTxFmE453 0 :Mf1_10 sf( )S455 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP276 590.666 M (Contributed by Brad Schick)S60 606.666 M (#25.)S7.7 N (Watch out when one regular expression is the prefix of another)S85.2 622.666 M (If the shorter regular expression is followed by something which can be the first character of the suffix of the longer )S85.2 634.666 M (regular expression, )SFmE455 0 :Mf1_8 sf( )S457 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP163.772 634.666 M (DLG)SFmE457 0 :Mf1_10 sf( )S459 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP180.213 634.666 M ( will happily assume that it is looking at the longer regular expression.  See Item )S(#44)S( for one )S85.2 646.666 M (approach to this problem.)S60 662.666 M (#26.)SFmE460 0 :Mf1_8 sf( )S462 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 662.666 M (DLG)SFmE462 0 :Mf1_10 sf( )S464 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP101.641 662.666 M ( is not able to backtrack \(unlike flex\))S85.2 678.666 M (Consider the following example:)SFmE464 0 :Mf2_10 sf( )S470 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 692.666 M 0 0 258(#token          \"[\\ \\t]*\"       <<skip\(\);>>)FmTx132 702.666 M 0 0 132(#token ELSE     \"else\")FmTx132 712.666 M 0 0 198(#token ELSEIF   \"else [\\ \\t]* if\")FmTx132 722.666 M 0 0 132(#token STOP     \"stop\")FmTxFmEendp%%Page: 4 4%%BeginPageSetupinitializepage(Moog; page: 4 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC470 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE470 0 :Mf0_10 sf( )S472 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S128.881 N (4)S7 FmP60 78 495 648 FmqFFmE473 0 :Mf1_10 sf( )S475 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (with input:)SFmE475 0 :Mf2_10 sf( )S481 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 98.667 M 0 0 54(else stop)FmTxFmE481 0 :Mf1_10 sf( )S483 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 112.667 M (When )SFmE484 0 :Mf1_8 sf( )S486 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.577 112.667 M (DLG)SFmE486 0 :Mf1_10 sf( )S488 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP128.018 112.667 M ( gets to the end of \"else\" it realizes that the space will allow it to match a longer string than \"else\" by )S85.2 124.667 M (itself.  So )SFmE488 0 :Mf1_8 sf( )S490 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP125.749 124.667 M (DLG)SFmE490 0 :Mf1_10 sf( )S492 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP142.191 124.667 M ( accept the spaces.  Everything is fine until )SFmE493 0 :Mf1_8 sf( )S495 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP316.012 124.667 M (DLG)SFmE495 0 :Mf1_10 sf( )S497 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP332.453 124.667 M ( gets to the initial \"s\" in \"stop\".  It then realizes it has )S85.2 136.667 M (no match \321 but it can\'t backtrack.  It passes back an error status to )SFmE497 0 :Mf1_8 sf( )S499 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP355.222 136.667 M (ANTLR)SFmE499 0 :Mf1_10 sf( )S501 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP381.886 136.667 M ( which \(normally\) prints out something )S85.2 148.667 M (like:)SFmE502 0 :Mf2_10 sf( )S508 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 162.667 M 0 0 288(invalid token near line 1 \(text was \'else \'\) ...)FmTxFmE508 0 :Mf1_10 sf( )S510 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 176.667 M (There is an \"extra\" space between the \"else\" and the closing single quote mark.)S85.2 192.667 M (This problem is not detected by the )SFmE510 0 :Mf1_8 sf( )S512 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP228.772 192.667 M (DLG)SFmE512 0 :Mf1_10 sf( )S514 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP245.213 192.667 M ( option \320Wambiguity.)S85.2 208.667 M (The section, \"Lexical Lookahead\" has some additional information.)S60 224.667 M (#27.)S7.7 N (The lexical routines mode\(\), skip\(\), and more\(\) are )SFmE515 0 :Mf0_10 sf( )S517 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP290.647 224.667 M (not)SFmE517 0 :Mf1_10 sf( )S519 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP303.425 224.667 M ( complicated !)S85.2 240.666 M (All they do is set status bits in a structure owned by the lexical analyzer and then return immediately.  Thus it is OK )S85.2 252.666 M (to call these routines anywhere from within a lexical action.  You can even call them from within a subroutine called )S85.2 264.666 M (from a lexical action routine.)S85.2 280.666 M (It is meaningless to call both more\(\) and skip\(\) in the same action.)S60 296.666 M (#28.)S7.7 N (lextext\(\) includes strings accumulated via more\(\) \321 begexpr\(\)/endexpr\(\) refer only to the last matched RE)S60 312.666 M (#29.)S7.7 N (Use )SFmE520 0 :Mf2_10 sf( )S526 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 312.666 M 0 0 186(\"if \(_lextext != _begexpr\) {...)FmTxFmE526 0 :Mf1_10 sf( )S528 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP289.247 312.666 M (}\" to test for RE being appended to lextext using more\(\))S85.2 328.666 M (To track the line number of the )SFmE528 0 :Mf0_10 sf( )S530 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP212.092 328.666 M (start)SFmE531 0 :Mf1_10 sf( )S533 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP230.427 328.666 M ( of a lexical element that may span several lines I use the following test:)SFmE533 0 :Mf2_10 sf( )S539 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 342.666 M 0 0 408(if \(_lextext == _begexpr\) {startingLine=_line;}  // user-defined var)FmTxFmE539 0 :Mf1_10 sf( )S541 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 356.666 M (#30.)S7.7 N (#token actions can access protected variables of the )SFmE542 0 :Mf1_8 sf( )S544 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP293.982 356.666 M (DLG)SFmE544 0 :Mf1_10 sf( )S546 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP310.423 356.666 M ( base class)S60 372.666 M (#31.)S7.7 N (When lookahead will break semantic routines in #token actions, consider using semantic predicates)S85.2 388.666 M (In early versions on )SFmE546 0 :Mf1_8 sf( )S548 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP166.833 388.666 M (PCCTS)SFmE548 0 :Mf1_10 sf( )S550 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP191.29 388.666 M ( it was common to change the token code based on semantic routines in the #token )S85.2 400.666 M (actions.)S85.2 416.666 M (Old style:)SFmE551 0 :Mf2_10 sf( )S557 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 430.666 M 0 0 108(#token TypedefName)FmTx132 440.666 M 0 0 138(#token ID  \"[a-z A-Z]*\")FmTx168 450.666 M 0 0 306(<<if \(isTypedefName\(lextext\)\) return TypedefName;>>)FmTxFmE557 0 :Mf1_10 sf( )S559 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 466.666 M (New Style C mode:)SFmE559 0 :Mf2_10 sf( )S565 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 480.666 M 0 0 138(#token ID  \"[a-z A-Z]*\")FmTx132 490.666 M 0 0 324(typedefName : <<isTypedefName\(LA\(1\)->getText\(\)\)>>? ID;)FmTxFmE565 0 :Mf1_10 sf( )S567 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 506.666 M (The old technique is appropriate for making )SFmE568 0 :Mf0_10 sf( )S570 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP263.742 506.666 M (lexical)SFmE570 0 :Mf1_10 sf( )S572 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP290.393 506.666 M ( decisions based on the input: for instance, treating a number )S85.2 518.666 M (appearing in columns 1 through 5 as a statement label rather than a number.  The new style is important because of )S85.2 530.666 M (the buffer between the lexer and parser introduced by large amounts of lookahead, especially syntactic predicates. )S85.2 542.666 M (For instance a declaration of a type may not have been entered into the symbol table by the parser by the time the )S85.2 554.666 M (lexer encounters a declaration of a variable of that type.  An extreme case is infinite lookahead in C mode:  parsing )S85.2 566.666 M (doesn\325t even begin until the entire input has been processed by the lexer.  See Item )S(#138)S( for an extended discussion )S85.2 578.666 M (of semantic predicates.  Example )S(#10)S( shows how some semantic decisions can be moved from the lexer to the token )S85.2 590.666 M (buffer.)S60 606.666 M (#32.)S7.7 N (For 8 bit characters use flex or in )SFmE573 0 :Mf1_8 sf( )S575 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP220.137 606.666 M (DLG)SFmE575 0 :Mf1_10 sf( )S577 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP236.578 606.666 M ( make )SFmE577 0 :Mf2_10 sf( )S583 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP263.233 606.666 M 0 0 24(char)FmTxFmE583 0 :Mf1_10 sf( )S585 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP287.233 606.666 M ( variables unsigned \(g++ option \320funsigned-char\))S60 622.666 M (#33.)S7.7 N (The maximum size of a )SFmE586 0 :Mf1_8 sf( )S588 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP182.109 622.666 M (DLG)SFmE588 0 :Mf1_10 sf( )S590 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP198.551 622.666 M ( token is set by an optional argument of the ctor )SFmE590 0 :Mf1_8 sf( )S592 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP392.103 622.666 M (DLG)SFmE592 0 :Mf1_10 sf( )S594 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP408.544 622.666 M (Lexer\(\) \321 default is 2000)S85.2 638.666 M (The maximum size of a character string stored in an )SFmE595 0 :Mf1_8 sf( )S597 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP295.659 638.666 M (ANTLR)SFmE597 0 :Mf1_10 sf( )S599 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP322.323 638.666 M (Token is independent of the maximum size of a )SFmE599 0 :Mf1_8 sf( )S601 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP515.316 638.666 M (DLG)SFmE601 0 :Mf1_10 sf( )S603 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP531.758 638.666 M ( )S85.2 650.666 M (token.  See Item )S(#60)S(.)S60 666.666 M (#34.)S7.7 N (If a token is recognized using more\(\) and its #lexclass ignores end-of-file then the very last token will be lost)S85.2 682.666 M (When a token is recognized in several pieces using more\(\) it may happen that an end-of-file is detected before the )S85.2 694.666 M (entire token is recognized.  Without treatment of this special case the portions of the token already recognized will )S85.2 706.666 M (be ignored and the error of a lexically incomplete token will be ignored.  Since all appearances of the regular )S85.2 718.666 M (expression \"@\", regardless of #lexclass, are mapped to the same #token value, proper handling requires some work-)SFmEendp%%Page: 5 5%%BeginPageSetupinitializepage(Moog; page: 5 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC604 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE604 0 :Mf0_10 sf( )S606 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S128.881 N (5)S7 FmP60 78 495 648 FmqFFmE607 0 :Mf1_10 sf( )S609 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (arounds.)S85.2 100.667 M (Suppose one wants to recognize C style comments using:)SFmE609 0 :Mf2_10 sf( )S615 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 114.667 M 0 0 90(#lexclass START)FmTx96 124.667 M 0 0 390(#token  Comment_Begin  \"/\\*\"  <<skip\(\);mode\(LC_Comment\);more\(\);>>)FmTx96 134.667 M 0 0 156(#token  Eof            \"@\")FmTx96 144.667 M 0 0 18(...)FmTx96 154.667 M 0 0 120(#lexclass LC_Comment)FmTx96 164.667 M 0 0 276(#token  Unexpected_Eof  \"@\"   <<mode\(START\);>>)FmTx96 174.667 M 0 0 318(#token  Comment_End     \"\\*/\" <<skip\(\);mode\(START\);>>)FmTx96 184.667 M 0 0 246(#token                  \"~[]\" <<skip\(\);>>)FmTx96 194.667 M 0 0 18(...)FmTxFmE615 0 :Mf1_10 sf( )S617 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 210.666 M (The token code \"Unexpected_Eof\" will never be seen by the parser.  The result is that C style comments which omit )S85.2 222.666 M (the trailing \"*/\" can swallow all the input to the end-of-file and not give any error message.   My solution to this )S85.2 234.666 M (problem is to fool )SFmE618 0 :Mf1_8 sf( )S620 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP159.075 234.666 M (PCCTS)SFmE620 0 :Mf1_10 sf( )S622 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP183.532 234.666 M ( by using the following definition:)SFmE622 0 :Mf2_10 sf( )S628 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 248.666 M 0 0 282(#token  Unexpected_Eof  \"@@\"   <<mode\(START\);>>)FmTxFmE628 0 :Mf1_10 sf( )S630 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 262.666 M (This exploits a characteristic of )SFmE631 0 :Mf1_8 sf( )S633 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP213.193 262.666 M (DLG)SFmE633 0 :Mf1_10 sf( )S635 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP229.635 262.666 M ( character streams:  once they reach end-of-file they must return end-of-file to )S85.2 274.666 M (every request for another character until explicitly reset.)S85.2 290.666 M (Another example of this pitfall, is the recognition of unterminated C style strings at the end of a file.)S60 306.666 M (#35.)S7.7 N (Sometimes the easiest )SFmE635 0 :Mf1_8 sf( )S637 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP176.006 306.666 M (DLG)SFmE637 0 :Mf1_10 sf( )S639 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP192.447 306.666 M ( solution is to accept one character at a time.)S85.2 322.666 M (One example is the processing of Fortran style Hollerith constants.  See Example )S(#12)S(.)S85.2 338.666 M (Another example is recognizing radix expressions such as 2#1011 or 16#ffff.  Given that the radix can vary between )S85.2 350.666 M (2 and 36 the easiest way to handle it is to save the radix and then change to another #lexclass where the digits can be )S85.2 362.666 M (inspected one by one.  Another alternative is to accept the entire string and then check all the characters at one time.)SFmE60 385 495 11 rC640 0 :MFrMacBegin60 386 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 387 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC640 0 :Mf1_10 sf( )S642 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 382.666 M (#tokclass)S60 406.666 M (#36.)S7.7 N (#tokclass provides an efficient way to combine reserved words into reserved word sets)SFmE643 0 :Mf2_10 sf( )S649 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 420.666 M 0 0 132(#token Read     \"read\")FmTx96 430.666 M 0 0 138(#token Write    \"write\")FmTx96 440.666 M 0 0 132(#token Exec     \"exec\")FmTx96 450.666 M 0 0 270(#token ID       \"[a-z A-Z] [a-z A-Z 0-9 \\@]*\")FmTx96 460.666 M 0 0 228(#tokclass Any     {ID Read Write Exec})FmTx96 470.666 M 0 0 210(#tokclass Verb    {Read Write Exec})FmTx96 480.666 M 0 0 114(command: Verb Any ;)FmTxFmE649 0 :Mf1_10 sf( )S651 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 496.666 M (#37.)S7.7 N (Use )SFmE651 0 :Mf1_8 sf( )S653 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 496.666 M (ANTLR)SFmE653 0 :Mf1_10 sf( )S655 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP129.911 496.666 M (Parser::set_el\(\) to test whether an )SFmE656 0 :Mf1_8 sf( )S658 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP266.229 496.666 M (ANTLR)SFmE658 0 :Mf1_10 sf( )S660 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP292.893 496.666 M (TokenType is in a #tokclass or #FirstSetSymbol)S85.2 512.666 M (To test whether a token \"t\" is in the #tokclass \"Verb\":)SFmE660 0 :Mf2_10 sf( )S666 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 526.666 M 0 0 240(if \(set_el\(t->getType\(\),Verb_set\)\) {...})FmTxFmE666 0 :Mf1_10 sf( )S668 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 540.666 M (There are several variations of this routine in the )SFmE669 0 :Mf1_8 sf( )S671 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP282.048 540.666 M (ANTLR)SFmE671 0 :Mf1_10 sf( )S673 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP308.712 540.666 M (Parser class.)SFmE60 563 495 11 rC673 0 :MFrMacBegin60 564 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 565 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC673 0 :Mf1_10 sf( )S675 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 560.666 M (#tokdef)S60 584.666 M (#38.)S7.7 N (A #tokdef must appear near the start of the grammar file \(only #first and #header may precede it\))SFmE60 607 495 11 rC676 0 :MFrMacBegin60 608 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 609 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC676 0 :Mf1_10 sf( )S678 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 604.666 M (#lexclass)S60 628.666 M (#39.)S7.7 N (Inline regular expressions are put in the most recently defined lexical class)S85.2 644.666 M (If the most recently defined lexical class is not START you may be surprised:)SFmE679 0 :Mf2_10 sf( )S685 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 658.666 M 0 0 90(#lexclass START)FmTx132 668.666 M 0 0 18(...)FmTx132 678.666 M 0 0 120(#lexclass LC_Comment)FmTx132 688.666 M 0 0 18(...)FmTx132 698.666 M 0 0 234(inline_example: symbol \"=\" expression ;)FmTxFmE685 0 :Mf1_10 sf( )S687 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 714.666 M (This will place \"=\" in the #lexclass LC_Comment \(where it will never be matched\) rather than the START #lexclass )SFmEendp%%Page: 6 6%%BeginPageSetupinitializepage(Moog; page: 6 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC687 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE687 0 :Mf0_10 sf( )S689 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S128.881 N (6)S7 FmP60 78 495 648 FmqFFmE690 0 :Mf1_10 sf( )S692 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (where the user meant it to be.  Since it is okay to specify a #lexclass in several pieces it might be a good idea when )S85.2 96.667 M (using #lexclass to place \"#lexclass START\" just before the first rule \321 then any inline definitions of tokens will be )S85.2 108.667 M (placed in the START #lexclass automatically:)SFmE692 0 :Mf2_10 sf( )S698 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 122.667 M 0 0 90(#lexclass START)FmTx132 132.667 M 0 0 18(...)FmTx132 142.667 M 0 0 102(#lexclass COMMENT)FmTx132 152.667 M 0 0 18(...)FmTx132 162.667 M 0 0 90(#lexclass START)FmTxFmE698 0 :Mf1_10 sf( )S700 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 178.667 M (#40.)S7.7 N (Use a stack of #lexclass modes in order to emulate lexical subroutines)S85.2 194.667 M (Consider a grammar in which lexical elements have internal structure.  An example of this is C strings and character )S85.2 206.667 M (literals which may contain elements like:)S132 222.666 M (escaped characters)SFmE701 0 :Mf2_10 sf( )S707 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP276 222.666 M 0 0 54(\\\" and \\\')FmTxFmE707 0 :Mf1_10 sf( )S709 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 234.666 M (symbolic codes)SFmE709 0 :Mf2_10 sf( )S715 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP276 234.666 M 0 0 12(\\t)FmTxFmE715 0 :Mf1_10 sf( )S717 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 246.666 M (numbers)SFmE718 0 :Mf2_10 sf( )S724 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP276 246.666 M 0 0 84(\\xff  \\200  \\0)FmTxFmE724 0 :Mf1_10 sf( )S726 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 262.666 M (Rather than implementing a separate #lexclass to handle these sequences for both character literals and string literals )S85.2 274.666 M (it would be possible to have a single #lexclass which would handle both.  To implement such a scheme one needs )S85.2 286.666 M (something like a subroutine stack to remember the previous #lexclass.  See Example )S(#9)S( for a set of such routines.)S60 302.666 M (#41.)S7.7 N (Sometimes a stack of #lexclass modes isn\325t enough)S85.2 318.666 M (Consider a log file consisting of clauses, each of which has its own #lexclass and in which a given word is reserved )S85.2 330.666 M (in some clauses and not others:)SFmE726 0 :Mf2_10 sf( )S732 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 344.666 M 0 0 396(#1;1-JAN-94 01:23:34;enable;forge bellows alarm;move to station B;)FmTx96 354.666 M 0 0 390(#2;1-JAN-94 08:01:56;operator;john bellows;shift change at 08:00;)FmTx96 364.666 M 0 0 402(#3;1-JAN-94 09:10:11;move;old pos=5.0 new pos=6.0;operator request;)FmTx96 374.666 M 0 0 318(#4;1-JAN-94 10:11:12;alarm;bellows;2-JAN-94 00:00:01;)FmTxFmE732 0 :Mf1_10 sf( )S734 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 390.666 M (If the item is terminated by a separator then there is a problem because the separator will be consumed in the )S85.2 402.666 M (recognition of the most nested item \321 with nothing left over to be consumed by other elements which end at the )S85.2 414.666 M (separator.  The problem appears when it is necessary to leave a #lexclass and return more than one level.  To be )S85.2 426.666 M (more specific, a #token action can only be executed when one or more characters are consumed \321 so to return )S85.2 438.666 M (through three levels of #lexclass calls would appear to require the consumption of at least three characters.  In the )S85.2 450.666 M (case of balanced constructs like )SFmE735 0 :Mf2_10 sf( )S741 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP214.299 450.666 M 0 0 30(\"...\")FmTxFmE741 0 :Mf1_10 sf( )S743 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP244.299 450.666 M ( and)SFmE743 0 :Mf2_10 sf( )S749 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP261.238 450.666 M 0 0 36( \'...\')FmTxFmE749 0 :Mf1_10 sf( )S751 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP297.238 450.666 M ( this is not a problem since the terminating character can be )S85.2 462.666 M (used to trigger the #token action.  However, if the scan is terminated by a )SFmE752 0 :Mf0_10 sf( )S754 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP380.918 462.666 M (separator)SFmE754 0 :Mf1_10 sf( )S756 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP419.802 462.666 M ( such as the semi-colon above )S85.2 474.666 M (\(\";\"\), one cannot use the same technique.  Once the semi-colon is consumed it is unavailable for the other #lexclass )S85.2 486.666 M (routines on the stack to see. )S85.2 502.666 M (One solution is to allow the user to specify \(during the call to pushMode\) a \"lookahead\" routine to be called when )S85.2 514.666 M (the corresponding element of the mode stack is popped.  At that point the \"lookahead\" routine can examine )SFmE757 0 :Mf2_10 sf( )S763 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP516.269 514.666 M 0 0 12(ch)FmTxFmE763 0 :Mf1_10 sf( )S765 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP528.269 514.666 M ( to )S85.2 526.666 M (determine whether it also wants to pop the stack, and so on up the mode stack.  The consumption of a single )S85.2 538.666 M (character can result in popping multiple modes from the mode stack based on a single character of lookahead. )S85.2 554.666 M (For anything more complicated than this and you might as well write a second parser just to handle the so-called )S85.2 566.666 M (lexical elements.)S85.2 582.666 M (Continuing with the example of the log file \(above\): each statement type has its fields in a specific order.  When the )S85.2 594.666 M (statement type is recognized, a pointer is set to a list of the #lexclasses which is in the same order as the remaining )S85.2 606.666 M (fields of that kind of statement.  An action is attached to every #token which recognizes a semi-colon \(\";\"\) advances )S85.2 618.666 M (a pointer in the list of #lexclasses and then changes the #lexclass by calling mode\(\) to set the #lexclass for the next )S85.2 630.666 M (field of the statement.)SFmE60 653 495 11 rC765 0 :MFrMacBegin60 653.999 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 654.999 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC765 0 :Mf1_10 sf( )S767 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 650.666 M (Lexical Lookahead)S60 674.666 M (#42.)S7.7 N (Vern Paxson\325s flex has more powerful features for lookahead than dlg)S85.2 690.666 M (Flex is a superset of lex.  For an example of how to use flex with )SFmE768 0 :Mf1_8 sf( )S770 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP347.058 690.666 M (ANTLR)SFmE770 0 :Mf1_10 sf( )S772 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP373.722 690.666 M ( in C++ mode see Example )S(#14)S(.  For  C )S85.2 702.666 M (mode download http://www.polhode.com/NOTES.flex.)S60 718.666 M (#43.)S7.7 N (Extra lookahead is available from class BufFileInput \(subclass of )SFmE772 0 :Mf1_8 sf( )S774 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP348.706 718.666 M (DLG)SFmE774 0 :Mf1_10 sf( )S776 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP365.147 718.666 M (InputStream\))SFmEendp%%Page: 7 7%%BeginPageSetupinitializepage(Moog; page: 7 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC777 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE777 0 :Mf0_10 sf( )S779 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S128.881 N (7)S7 FmP60 78 495 648 FmqFFmE780 0 :Mf1_10 sf( )S782 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (Alexey Demakov has supplied this class to provide more than one character of lookahead for the input stream. The )S85.2 96.667 M (class is located in pccts/h/BufFileInput.*.)S60 112.667 M (#44.)S7.7 N (One extra character of lookahead is available to the #token action routine in )SFmE782 0 :Mf2_10 sf( )S788 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP390.891 112.667 M 0 0 12(ch)FmTxFmE788 0 :Mf1_10 sf( )S790 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP402.891 112.667 M ( \(except in interactive mode\))S85.2 126.667 M (In interactive mode )SFmE791 0 :Mf1_8 sf( )S793 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP165.439 126.667 M (\(DLG)SFmE793 0 :Mf1_10 sf( )S795 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP184.545 126.667 M ( switch \320i is not supported in C++ mode\) )SFmE795 0 :Mf1_8 sf( )S797 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP351.078 126.667 M (DLG)SFmE797 0 :Mf1_10 sf( )S799 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP367.519 126.667 M ( fetches a character only when it needs it to )S85.2 138.667 M (determine if the end of a token has been reached.  In non-interactive mode the content of )SFmE800 0 :Mf2_10 sf( )S806 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP442.253 138.667 M 0 0 12(ch)FmTxFmE806 0 :Mf1_10 sf( )S808 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP454.253 138.667 M ( is always valid.  The )S85.2 150.667 M (debug code described in Item )S(#149)S( can help debug problems with interactive lookahead.)S85.2 166.667 M (For the remainder of this discussion assume that )SFmE808 0 :Mf1_8 sf( )S810 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP280.696 166.667 M (DLG)SFmE810 0 :Mf1_10 sf( )S812 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP297.137 166.667 M ( is in non-interactive mode.)S85.2 182.667 M (Consider the problem of distinguishing floating point numbers from range expressions such as those used in Pascal:)S85.2 198.667 M (        range:  1..23)S12.817 N ( float:  1.23 )S85.2 214.667 M (As a first effort one might try:)SFmE813 0 :Mf2_10 sf( )S819 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 228.667 M 0 0 144(#token  Int     \"[0-9]+\")FmTx132 238.666 M 0 0 120(#token  Range   \"..\")FmTx132 248.666 M 0 0 186(#token  Float   \"[0-9]+.[0-9]*\")FmTxFmE819 0 :Mf1_10 sf( )S821 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 264.666 M (The problem is that \"1..23\" looks like the floating point number \"1.\" with an illegal \".\" at the end.  )SFmE821 0 :Mf1_8 sf( )S823 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP479.868 264.666 M (DLG)SFmE823 0 :Mf1_10 sf( )S825 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP496.309 264.666 M ( always takes )S85.2 276.666 M (the longest matching string, so \"1.\" will always look more appetizing than \"1\".  What one needs to do is to look at )S85.2 288.666 M (the character following \"1.\" to see if it is another \".\", and if it is to assume that it is a range expression.  The flex )S85.2 300.666 M (lexer has trailing context, but )SFmE826 0 :Mf1_8 sf( )S828 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204.602 300.666 M (DLG)SFmE828 0 :Mf1_10 sf( )S830 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP221.043 300.666 M ( doesn\'t \321 except for the single character in )SFmE830 0 :Mf2_10 sf( )S836 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP399.703 300.666 M 0 0 12(ch)FmTxFmE836 0 :Mf1_10 sf( )S838 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP411.703 300.666 M (.)S85.2 316.666 M (A solution in )SFmE839 0 :Mf1_8 sf( )S841 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP139.922 316.666 M (DLG)SFmE841 0 :Mf1_10 sf( )S843 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP156.363 316.666 M ( is to write the #token Float action routine to look at what\'s been accepted, and at )SFmE843 0 :Mf2_10 sf( )S849 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP482.496 316.666 M 0 0 12(ch)FmTxFmE849 0 :Mf1_10 sf( )S851 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP494.496 316.666 M (, in order to )S85.2 328.666 M (decide what to do:)SFmE852 0 :Mf2_10 sf( )S858 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 342.666 M 0 0 186(#token Float    \"[0-9]*.[0-9]*\")FmTx96 352.666 M 0 0 444(        <<if \(*endexpr\(\) == \'.\' && /* might use more complex test       */)FmTx96 362.666 M 0 0 156(              ch == \'.\'\) {)FmTx96 372.666 M 0 0 444(                mode\(LC_Range\);   /* treat it like a range expression   */)FmTx96 382.666 M 0 0 444(                return Int;       /* looks like an int followed by \"..\" */)FmTx96 392.666 M 0 0 72(          };)FmTx96 402.666 M 0 0 60(        >>)FmTx96 422.666 M 0 0 108(#lexclass LC_Range)FmTx96 432.666 M 0 0 438(#token Range    \".\"      <<mode\(START\);>>  // consume second \".\" of range)FmTxFmE858 0 :Mf1_10 sf( )S860 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 448.666 M (#45.)S7.7 N (There is no easy way in )SFmE860 0 :Mf1_8 sf( )S862 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP182.383 448.666 M (DLG)SFmE862 0 :Mf1_10 sf( )S864 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP198.824 448.666 M ( to distinguish integer \"1\" from floating point \"1.\" when \"1.and.2\" is valid)S85.2 464.666 M (This differs from Item )S(#44)S( in that two characters of lookahead are required before a decision can be made on )S85.2 476.666 M (whether the \".\" is part of \".and.\" or  it is part of a floating point number.  This is a frequent problem which can only )S85.2 488.666 M (be handled by using a more powerful lexer such as flex.)S60 504.666 M (#46.)S7.7 N (For lex operators \"^\" and \"$\" \(anchor pattern to start/end of line\) use flex - don\325t bother with dlg)SFmE60 527 495 11 rC865 0 :MFrMacBegin60 527.999 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 529 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC865 0 :Mf1_10 sf( )S867 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 524.666 M (Line and Column Information)S60 548.666 M (Most names in this section refer to members of class )SFmE868 0 :Mf1_8 sf( )S870 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP272.698 548.666 M (DLG)SFmE870 0 :Mf1_10 sf( )S872 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP289.139 548.666 M (LexerBase or )SFmE872 0 :Mf1_8 sf( )S874 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP345.216 548.666 M (DLG)SFmE874 0 :Mf1_10 sf( )S876 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP361.657 548.666 M (Lexer)S60 564.666 M (Before C++ mode the proper handling of line and column information was a large part of these notes.)S60 580.666 M (#47.)S7.7 N (If you want column information for error messages \(or other reasons\) use C++ mode)S60 596.666 M (#48.)S7.7 N (If you want accurate line information even with many characters of lookahead use C++ mode)S60 612.666 M (#49.)S7.7 N (Call trackColumns\(\) to request that )SFmE877 0 :Mf1_8 sf( )S879 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP228.764 612.666 M (DLG)SFmE879 0 :Mf1_10 sf( )S881 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP245.206 612.666 M ( maintain column information)S60 628.666 M (#50.)S7.7 N (To report column information in syntax error messages override )SFmE881 0 :Mf1_8 sf( )S883 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP344.26 628.666 M (ANTLR)SFmE883 0 :Mf1_10 sf( )S885 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP370.924 628.666 M (Parser::syn\(\) \321 See Example )S(#5)S60 644.666 M (#51.)S7.7 N (Call newline\(\) and then set_endcol\(0\) in the #token action when a newline is encountered )S60 660.666 M (#52.)S7.7 N (Adjusting column position for tab characters)S85.2 676.666 M (Assume that tabs are set every eight characters starting with column 9.)S85.2 692.666 M (Computing the column position will be simple if you match tab characters in isolation:)SFmE886 0 :Mf2_10 sf( )S892 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 706.666 M 0 0 330(#token Tab  \"\\t\"    <<_endcol=\(\(_endcol-1\) & ~7\) + 8;>>)FmTxFmE892 0 :Mf1_10 sf( )S894 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 720.666 M (This would be off by 1, except that )SFmE894 0 :Mf1_8 sf( )S896 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP227.656 720.666 M (DLG)SFmE896 0 :Mf1_10 sf( )S898 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP244.097 720.666 M (, on return from the #token action, computes the next column using:)SFmEendp%%Page: 8 8%%BeginPageSetupinitializepage(Moog; page: 8 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC899 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE899 0 :Mf0_10 sf( )S901 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S128.881 N (8)S7 FmP60 78 495 648 FmqFFmE902 0 :Mf2_10 sf( )S908 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 84.667 M 0 0 114( _begcol=_endcol+1;)FmTxFmE908 0 :Mf1_10 sf( )S910 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 98.667 M (If you include multiple tabs and other forms of whitespace in a single regular expression, the computation of )S85.2 110.667 M (_endcol by )SFmE910 0 :Mf1_8 sf( )S912 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP131.855 110.667 M (DLG)SFmE912 0 :Mf1_10 sf( )S914 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP148.297 110.667 M ( must be backed out by subtracting the length of the string.  Then you can compute the column )S85.2 122.667 M (position by inspecting the string character by character.)S60 138.667 M (#53.)S7.7 N (Computing column numbers when using more\(\) with strings that include tab characters and newlines)SFmE915 0 :Mf2_10 sf( )S921 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 152.667 M 0 0 390(/* what is the column and line position when the comment includes)FmTx96 164.667 M 0 0 156(   or is followed by tabs )FmTxFmE921 0 :Mf0_10 sf( )S923 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP252 164.667 M (tab)SFmE923 0 :Mf2_10 sf( )S929 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP264.778 164.667 M 0 0 12(  )FmTxFmE929 0 :Mf0_10 sf( )S931 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP276.778 164.667 M (tab)SFmE932 0 :Mf2_10 sf( )S938 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP289.557 164.667 M 0 0 30( */  )FmTxFmE938 0 :Mf0_10 sf( )S940 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP319.557 164.667 M (tab)SFmE940 0 :Mf2_10 sf( )S946 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP332.335 164.667 M 0 0 12(  )FmTxFmE946 0 :Mf0_10 sf( )S948 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP344.335 164.667 M (tab)SFmE949 0 :Mf2_10 sf( )S955 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP357.113 164.667 M 0 0 36(  i++;)FmTxFmE955 0 :Mf1_10 sf( )S957 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 182.667 M (Note: This code excerpt requires a change to )SFmE957 0 :Mf1_8 sf( )S959 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP313.021 182.667 M (PCCTS)SFmE959 0 :Mf1_10 sf( )S961 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP337.478 182.667 M ( 1.33 file pccts/dlg/output.c in )S132 194.667 M (order to inject code into the )SFmE962 0 :Mf1_8 sf( )S964 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP244.734 194.667 M (DLG)SFmE964 0 :Mf1_10 sf( )S966 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP261.176 194.667 M (Lexer class header.  The modified source code is )S132 206.667 M (distributed as part of the notes in file notes/changes/dlg/output.c and output_diff.c.  An )S132 218.667 M (example of its use is given in Example )S(#7)S(.)S85.2 238.666 M (My feeling is that the line and column information should be updated at the same time more\(\) is called because it )S85.2 250.666 M (will lead to more accurate position information in messages.  At the same time one may want to identify the )SFmE966 0 :Mf0_10 sf( )S968 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP519.221 250.666 M (first)SFmE969 0 :Mf1_10 sf( )S971 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP535.334 250.666 M ( )S85.2 262.666 M (line on which a construct begins rather than the line on which the problem is detected:  it\325s more useful to know that )S85.2 274.666 M (an unterminated string started at line 123 than that is was still unterminated at the end-of-file.)SFmE971 0 :Mf2_10 sf( )S977 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 288.666 M 0 0 390(void DLGLexer::tabAdjust \(\) {      // requires change to output.c)FmTx96 298.666 M 0 0 408(   char * p;                       //   to add user code to DLGLexer)FmTx96 308.666 M 0 0 336(   if \(_lextext == _begexpr\) startingLineForToken=_line;)FmTx96 318.666 M 0 0 420(   _endcol=_endcol-\(_endexpr-_begexpr\)+1;  // back out DLG computation)FmTx96 328.666 M 0 0 204(   for \(p=_begexpr;*p != 0; p++\) {)FmTx96 338.666 M 0 0 390(      if \(*p == \'\\n\'\) {                    // newline\(\) by itself)FmTx132 348.666 M 0 0 372(   newline\(\);_endcol=0;              //   doesn\325t reset column)FmTx96 358.666 M 0 0 180(      } else if \(*p == \'\\t\'\) {)FmTx96 368.666 M 0 0 402(         _endcol=\(\(_endcol-1\) & ~7\) + 8;   // traditional tab stops)FmTx96 378.666 M 0 0 48(      };)FmTx96 388.666 M 0 0 90(     _endcol++;)FmTx96 398.666 M 0 0 30(   };)FmTx96 408.666 M 0 0 78(   _endcol--;)FmTx30 N 0 0 264(         // DLG will compute begcol=endcol+1)FmTx96 418.666 M 0 0 6(})FmTxFmE977 0 :Mf1_10 sf( )S979 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 434.666 M (See Example )S(#7)S( for a more complete description.)SFmE60 457 495 11 rC980 0 :MFrMacBegin60 458 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 459 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC980 0 :Mf1_10 sf( )S982 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 454.666 M (Ambiguity Aid \(options -aa, -aam, -aad)S60 478.666 M (#54.)S7.7 N (Example with nested if statement)S85.2 494.666 M (Consider the timeless and eternal beauty of the nested if statement:)SFmE983 0 :Mf2_10 sf( )S989 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 508.666 M 0 0 336(stmt        : if_stmt                           /* 1  */)FmTx132 518.666 M 0 0 336(            | assign_stmt                       /* 2  */)FmTx132 528.666 M 0 0 336(            ;                                   /* 3  */)FmTx132 538.666 M 0 0 336(if_stmt     : IF expr                           /* 4  */)FmTx132 548.666 M 0 0 336(              THEN stmt                         /* 5  */)FmTx132 558.666 M 0 0 336(              { ELSE stmt }                     /* 6  */)FmTx132 568.666 M 0 0 336(            ;                                   /* 7  */)FmTx132 578.666 M 0 0 336(assign_stmt : expr EQUAL expr SC ;              /* 8  */)FmTx132 588.666 M 0 0 336(expr        : E ;                               /* 9  */)FmTxFmE989 0 :Mf1_10 sf( )S991 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 604.666 M (This will be ambiguous regardless of the value of k and ck chosen.  When analyzed with -k 1 and -ck 1 )SFmE991 0 :Mf1_8 sf( )S993 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP499.768 604.666 M (ANTLR)SFmE993 0 :Mf1_10 sf( )S995 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP526.432 604.666 M ( will )S85.2 616.666 M (report:)SFmE996 0 :Mf2_10 sf( )S1002 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 630.666 M 0 0 414(ifstmt.g\(6\) : warning:  alts 1 and 2 of {...} ambiguous upon { ELSE })FmTxFmE1002 0 :Mf1_10 sf( )S1004 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 644.666 M (We can specify the ambiguity of interest using a line number or rule name:)SFmE1004 0 :Mf2_10 sf( )S1010 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 658.666 M 0 0 174(antlr ifstmt.g -aa if_stmt # )FmTxFmE1010 0 :Mf0_10 sf( )S1012 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP306 658.666 M (invoked using a rule name)SFmE1013 0 :Mf2_10 sf( )S1019 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 670.666 M 0 0 168(antlr ifstmt.g -aa 6       #)FmTxFmE1019 0 :Mf0_10 sf( )S1021 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP300 670.666 M (  invoked using a line number)SFmE1021 0 :Mf1_10 sf( )S1023 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 684.666 M (The output is:)SFmEendp%%Page: 9 9%%BeginPageSetupinitializepage(Moog; page: 9 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC1024 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE1024 0 :Mf0_10 sf( )S1026 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S128.881 N (9)S7 FmP60 78 495 648 FmqFFmE1027 0 :Mf2_10 sf( )S1033 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 84.667 M 0 0 306(  Ambiguity Aid      \(-ck 1  -aa if_stmt    -aad 1\))FmTxFmE1033 0 :Mf0_10 sf( )S1035 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 98.667 M (This identifies the command line options relevant to the ambiguity analysis.)SFmE1035 0 :Mf2_10 sf( )S1041 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 112.667 M 0 0 306(    Choice 1: if_stmt/3       line 6  file ifstmt.g)FmTx96 122.667 M 0 0 306(    Choice 2: if_stmt/3       line 6  file ifstmt.g)FmTxFmE1041 0 :Mf0_10 sf( )S1043 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 138.667 M (Choice 1 and Choice 2 are the two alternatives that have ambiguous prediction )S168 150.667 M (expressions.  In this case, both choices are on line 6 of the file and the third line of )S168 162.667 M (rule if_stmt \(i.e. if_stmt/3\).)SFmE1044 0 :Mf2_10 sf( )S1050 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 176.667 M 0 0 228(    Intersection of lookahead[1] sets:)FmTx96 196.667 M 0 0 138(       ELSE            )FmTxFmE1050 0 :Mf0_10 sf( )S1052 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 210.667 M (The intersection of the lookahead sets is simply a restatement of the ambiguity set, but )S168 222.666 M (in an easier to read format.  The number of sets should be equal to the -ck value. In )S168 234.666 M (this example, the ck value is 1 and there is only one such set.  If the intersection were )S168 246.666 M (empty then there would be no ambiguity and no need for an ambiguity report.)SFmE1052 0 :Mf2_10 sf( )S1058 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 260.666 M 0 0 234(     Choice:1  Depth:1  Group:1  \(ELSE\))FmTxFmE1058 0 :Mf0_10 sf( )S1060 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 274.666 M (Choice 1:  This is a traceback of one way one might run across the token ELSE. )SFmE1061 0 :Mf2_10 sf( )S1067 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 288.666 M 0 0 288(   1 #token ELSE     if_stmt/3   line 6 ifstmt.g)FmTxFmE1067 0 :Mf0_10 sf( )S1069 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 302.666 M (Starting from line 6 one can easily find an ELSE by flowing into the optional element )S168 314.666 M (of the if_stmt \(\"{ ELSE stmt }\"\).  )S(The expression \"if_stmt/3\" says that this is on the )S168 326.666 M (third line of the rule \"if_stmt\".)SFmE1069 0 :Mf2_10 sf( )S1075 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 340.666 M 0 0 234(     Choice:2  Depth:1  Group:2  \(ELSE\))FmTxFmE1075 0 :Mf0_10 sf( )S1077 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 354.666 M (Choice 2: This is a traceback of another way one might run across the token ELSE. )S168 366.666 M (The ambiguity exists because there are two such paths.  Sometimes I find it easier to )S168 378.666 M (work from the bottom to the top, other times from the top to the bottom.  In this case )S168 390.666 M (I\325ll work from item 1 to item 4.)SFmE1078 0 :Mf2_10 sf( )S1084 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 404.666 M 0 0 288(   1 end if_stmt     if_stmt/4   line 7 ifstmt.g)FmTxFmE1084 0 :Mf0_10 sf( )S1086 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 418.666 M (Item 1: Instead of flowing forward into the optional ELSE block \(as with choice 1\) we )S168 430.666 M (pass over it and flow off the end of the if_stmt \(hence \"end if_stmt\"\) at line 7.  Thus we )S168 442.666 M (have an if_stmt with no ELSE clause.)SFmE1086 0 :Mf2_10 sf( )S1092 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 456.666 M 0 0 78(IF e1 THEN s1)FmTx96 468.666 M 0 0 288(   2 end stmt        stmt/3      line 3 ifstmt.g)FmTxFmE1092 0 :Mf0_10 sf( )S1094 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 482.666 M (Item 2:  The if_stmt \(item 1\) was referenced from stmt at line 3.  The use of line 3 is )S168 494.666 M (confusing.  The line number is 3 because we have flowed out of the if_stmt at line 1 )S168 506.666 M (and out of the implicit and invisible block which encloses the top level alternatives of a )S168 518.666 M (rule.  It is as though the rule has been written:)S204 534.666 M (stmt:)S16.007 N (\( if_stmt)S240 546.666 M (| assign_stmt)S240 558.666 M (\) )S240 570.666 M (;)SFmE1095 0 :Mf2_10 sf( )S1101 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 584.666 M 0 0 288(   3 in {...} block  if_stmt/3   line 6 ifstmt.g)FmTxFmE1101 0 :Mf0_10 sf( )S1103 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 598.666 M (Item 3:  After flowing out of the stmt mentioned in item 2 we find ourselves entering )S168 610.666 M (the {...} block in if_stmt at line 6.  The only way to flow into the {...} block on line 6 is )S168 622.666 M (by flowing out of the THEN clause on line 5.  Recall that we have just flowed out of an )S168 634.666 M (if_stmt that had no ELSE clause \(item 1\). Thus we now have something like this:)SFmE1103 0 :Mf2_10 sf( )S1109 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 648.666 M 0 0 66(IF e2 THEN )FmTx0 0 78(IF e1 THEN s1)FmTx270 649.666 FmB78 0 FmL0 0.5 FmSo348 648.666 M 0 0 24( ...)FmTxFmE1109 0 :Mf0_10 sf( )S1111 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 662.666 M (where the underline identifies an inner if_stmt from item 1.)SFmE1112 0 :Mf2_10 sf( )S1118 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 676.666 M 0 0 288(   4 #token ELSE     if_stmt/3   line 6 ifstmt.g)FmTxFmE1118 0 :Mf0_10 sf( )S1120 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 690.666 M (Item 4:  In item 3 we flowed into the {...} clause on line 6.  We have now found the )S168 702.666 M (ELSE token at the start of the {...} clause.  Thus we now have something that like this:)SFmEendp%%Page: 10 10%%BeginPageSetupinitializepage(Moog; page: 10 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC1120 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE1120 0 :Mf0_10 sf( )S1122 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (10)S7 FmP60 78 495 648 FmqFFmE1123 0 :Mf2_10 sf( )S1129 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 84.667 M 0 0 66(IF e2 THEN )FmTx0 0 78(IF e1 THEN s1)FmTx270 85.667 FmB78 0 FmL0 0.5 FmSo348 84.667 M 0 0 54( ELSE ...)FmTxFmE1129 0 :Mf0_10 sf( )S1131 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 98.667 M (where the underline identifies an inner if_stmt from item 1.)SFmE1131 0 :Mf1_10 sf( )S1133 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 114.667 M (This is not terribly clear, so let\325s review the data and try to understand what the ambiguity aid is trying to say. When )S85.2 126.667 M (we are ready to recognize the ELSE there must be two plausible derivations for the ELSE token.  The first one is the )S85.2 138.667 M (obvious one: the ELSE is part of the if_stmt being parsed.  The second choice, the difficult one, arises when there is )SFmE1134 0 :Mf0_10 sf( )S1136 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 150.667 M (no )SFmE1136 0 :Mf1_10 sf( )S1138 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP97.7 150.667 M (ELSE clause for an if_stmt.  Looking at )SFmE1139 0 :Mf2_10 sf( )S1145 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 164.667 M 0 0 66(IF e2 THEN )FmTx0 0 78(IF e1 THEN s1)FmTx234 165.667 FmB78 0 FmL0 0.5 FmSo312 164.667 M 0 0 54( ELSE ...)FmTxFmE1145 0 :Mf1_10 sf( )S1147 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 178.667 M (with this hint and some thought we should be able to recognize that the ELSE can be interpreted as part of the )S85.2 190.667 M (underlined statement \(choice 1\) or as part of the non-underlined statement \(choice 2\).)S85.2 206.667 M (I admit that this is far from ideal.  However, I have found this an immense aid in trying to identify the source of an )S85.2 218.667 M (ambiguity in large grammars which may require dozens of rules to be examined in order to discover that rule g can )S85.2 230.666 M (follow rule f when rule f appears at the end of e, when e appears at the end of d, etc.)S60 246.666 M (#55.)S7.7 N (Example with cast expression)S85.2 262.666 M (This example illustrates the use of the -aad option which controls the number of lookahead tokens to match.  The )S85.2 274.666 M (ambiguity aid first reports on the choices which match just one token, then on the choices which match the second )S85.2 286.666 M (token, and so on until the number of tokens specified by the -aad option is reached. )S85.2 302.666 M (This ambiguity in this example is simple to diagnose without any aid, but I think it has educational value.)SFmE1147 0 :Mf2_10 sf( )S1153 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 316.666 M 0 0 270(expr1 : expr2 { EQ_EQ expr2 } ;      /* 1  */)FmTx132 326.666 M 0 0 270(expr2 : expr3 \( ADD_OP expr3 \)* ;    /* 2  */)FmTx132 336.666 M 0 0 270(expr3 : expr4 \( MUL_OP expr4 \)* ;    /* 3  */)FmTx132 346.666 M 0 0 270(expr4 : expr5                        /* 4  */)FmTx132 356.666 M 0 0 270(      | LP Id RP expr5               /* 5  */)FmTx132 366.666 M 0 0 270(      ;                              /* 6  */)FmTx132 376.666 M 0 0 270(expr5 : Id                           /* 7  */)FmTx132 386.666 M 0 0 270(      | Number                       /* 8  */)FmTx132 396.666 M 0 0 270(      | LP expr1 RP                  /* 9  */)FmTx132 406.666 M 0 0 270(      ;                              /* 10 */)FmTxFmE1153 0 :Mf1_10 sf( )S1155 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 422.666 M (When run with -ck 2 )SFmE1156 0 :Mf1_8 sf( )S1158 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP170.447 422.666 M (ANTLR)SFmE1158 0 :Mf1_10 sf( )S1160 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP197.111 422.666 M ( reports:)SFmE1160 0 :Mf2_10 sf( )S1166 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 436.666 M 0 0 324(paren.g\(4\) : warning: alts 1 and 2 of the rule itself )FmTx276 448.666 M 0 0 174(ambiguous upon { LP }, { Id })FmTxFmE1166 0 :Mf1_10 sf( )S1168 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 462.666 M (To diagnose this problem we use the command:)SFmE1169 0 :Mf2_10 sf( )S1175 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 476.666 M 0 0 210(antlr paren.g -ck 2 -aa 4 -aad 2 # )FmTxFmE1175 0 :Mf0_10 sf( )S1177 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP306 476.666 M (ambiguity on line 4, match two tokens)SFmE1177 0 :Mf1_10 sf( )S1179 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 490.666 M (The output is:)SFmE1180 0 :Mf2_10 sf( )S1186 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 504.666 M 0 0 288(  Ambiguity Aid         \(-ck 2  -aa 4    -aad 2\))FmTx96 524.666 M 0 0 264(    Choice 1: expr4/1   line 4  file paren.g)FmTx96 534.666 M 0 0 264(    Choice 2: expr4/2   line 5  file paren.g)FmTxFmE1186 0 :Mf0_10 sf( )S1188 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 548.666 M (The ambiguity is a choice between line 4 \(expr5\) and line 5 \(LP Id RP ...\))SFmE1188 0 :Mf2_10 sf( )S1194 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 560.666 M 0 0 228(    Intersection of lookahead[1] sets:)FmTx96 580.666 M 0 0 138(       LP              )FmTx96 600.666 M 0 0 228(    Intersection of lookahead[2] sets:)FmTx96 620.666 M 0 0 138(       Id              )FmTx96 640.666 M 0 0 222(     Choice:1  Depth:1  Group:1  \(LP\))FmTxFmE1194 0 :Mf0_10 sf( )S1196 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 654.666 M (The first choice at depth 1 starts at line 4 \(item 1\) and flows into expr5 \(items 1 and )S168 666.666 M (2\).  Once inside expr5 \(item 2\) we find the token LP \(item 3\).)SFmE1197 0 :Mf2_10 sf( )S1203 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 680.666 M 0 0 312(   1 to expr5           expr4/1   line 4     paren.g)FmTx96 690.666 M 0 0 312(   2 expr5              expr5/1   line 7     paren.g)FmTx96 700.666 M 0 0 312(   3 #token LP          expr5/3   line 9     paren.g)FmTxFmEendp%%Page: 11 11%%BeginPageSetupinitializepage(Moog; page: 11 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC1203 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE1203 0 :Mf0_10 sf( )S1205 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (11)S7 FmP60 78 495 648 FmqFFmE1206 0 :Mf2_10 sf( )S1212 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 84.667 M 0 0 222(     Choice:2  Depth:1  Group:2  \(LP\))FmTxFmE1212 0 :Mf0_10 sf( )S1214 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 98.667 M (The second choice at depth 1 starts at line 5 and immediately finds the LP \(item 1\).)SFmE1214 0 :Mf2_10 sf( )S1220 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 112.667 M 0 0 312(   1 #token LP          expr4/2   line 5     paren.g)FmTx96 134.667 M 0 0 240(     Choice:1  Depth:2  Group:3  \(LP Id\))FmTxFmE1220 0 :Mf0_10 sf( )S1222 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 148.667 M (We are back with choice 1, but the depth is now 2, so it tries to match the Id in )S168 160.667 M (lookahead set 2.  We start at line 4 \(item 1\) and flow into expr5 \(items 1 and 2\).  In )S168 172.667 M (expr5 at line 7 we match the LP \(item 3\).  Still within expr5 we flow into expr1 \(item )S168 184.667 M (4\).  From expr 1 we flow into expr 2 \(items 6 and 7\).  This continues until we reach )S168 196.667 M (item 14 which contains an ID from expr5.)SFmE1223 0 :Mf2_10 sf( )S1229 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 210.667 M 0 0 312(   1 to expr5           expr4/1   line 4     paren.g)FmTx96 220.666 M 0 0 312(   2 expr5              expr5/1   line 7     paren.g)FmTx96 230.666 M 0 0 312(   3 #token LP          expr5/3   line 9     paren.g)FmTx96 240.666 M 0 0 312(   4 to expr1           expr5/3   line 9     paren.g)FmTx96 250.666 M 0 0 312(   5 expr1              expr1/1   line 1     paren.g)FmTx96 260.666 M 0 0 312(   6 to expr2           expr1/1   line 1     paren.g)FmTx96 270.666 M 0 0 312(   7 expr2              expr2/1   line 2     paren.g)FmTx96 280.666 M 0 0 312(   8 to expr3           expr2/1   line 2     paren.g)FmTx96 290.666 M 0 0 312(   9 expr3              expr3/1   line 3     paren.g)FmTx96 300.666 M 0 0 312(  10 to expr4           expr3/1   line 3     paren.g)FmTx96 310.666 M 0 0 312(  11 expr4              expr4/1   line 4     paren.g)FmTx96 320.666 M 0 0 312(  12 to expr5           expr4/1   line 4     paren.g)FmTx96 330.666 M 0 0 312(  13 expr5              expr5/1   line 7     paren.g)FmTx96 340.666 M 0 0 312(  14 #token Id          expr5/1   line 7     paren.g)FmTx96 360.666 M 0 0 240(     Choice:2  Depth:2  Group:4  \(LP Id\))FmTxFmE1229 0 :Mf0_10 sf( )S1231 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 374.666 M (The second choice at depth 2.  This is a trivial match to LP followed by Id.)SFmE1231 0 :Mf2_10 sf( )S1237 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 388.666 M 0 0 312(   1 #token LP          expr4/2   line 5     paren.g)FmTx96 398.666 M 0 0 312(   2 #token Id          expr4/2   line 5     paren.g)FmTxFmE1237 0 :Mf1_10 sf( )S1239 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 418.666 M (This demonstrates how the ambiguity aid reports a chain of rule references.)S60 434.666 M (#56.)S7.7 N (Example with ambiguity due to limitations of linear approximation)S85.2 450.666 M (The example illustrates an ambiguity which is due solely to the limitations of linear lookahead:)SFmE1240 0 :Mf2_10 sf( )S1246 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 464.666 M 0 0 108(rab : a    /* 1 */)FmTx132 474.666 M 0 0 108(    | b    /* 2 */)FmTx132 484.666 M 0 0 108(    ;      /* 3 */)FmTx132 494.666 M 0 0 108(a   : J X  /* 4 */)FmTx132 504.666 M 0 0 108(    ;      /* 5 */)FmTx132 514.666 M 0 0 108(b   : J P  /* 6 */)FmTx132 524.666 M 0 0 108(    | K X  /* 7 */)FmTx132 534.666 M 0 0 108(    ;      /* 8 */)FmTxFmE1246 0 :Mf1_10 sf( )S1248 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 550.666 M (When analyzed with -k 2 there is no ambiguity, but with -k 1 and -ck 2 )SFmE1248 0 :Mf1_8 sf( )S1250 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP371.501 550.666 M (ANTLR)SFmE1250 0 :Mf1_10 sf( )S1252 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP398.165 550.666 M ( reports:)SFmE1253 0 :Mf2_10 sf( )S1259 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 564.666 M 0 0 312(look.g\(1\) : warning: alts 1 and 2 of the rule itself)FmTx276 576.666 M 0 0 162(ambiguous upon { J }, { X })FmTxFmE1259 0 :Mf1_10 sf( )S1261 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 590.666 M (To someone unfamiliar with linear lookahead, the problem is not obvious.  Given the lookahead J followed by X )S85.2 602.666 M (surely the choice is obvious ? How does ambiguity aid help ?)S85.2 618.666 M (We run )SFmE1261 0 :Mf1_8 sf( )S1263 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.405 618.666 M (the ANTLR)SFmE1263 0 :Mf1_10 sf( )S1265 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP155.842 618.666 M ( ambiguity aid with depth 2 because the ambiguity involves two tokens of lookahead:)SFmE1266 0 :Mf2_10 sf( )S1272 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 632.666 M 0 0 162(antlr look.g -aa rab -aad 2)FmTxFmE1272 0 :Mf1_10 sf( )S1274 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 646.666 M (The output is:)SFmEendp%%Page: 12 12%%BeginPageSetupinitializepage(Moog; page: 12 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC1274 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE1274 0 :Mf0_10 sf( )S1276 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (12)S7 FmP60 78 495 648 FmqFFmE1277 0 :Mf2_10 sf( )S1283 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 84.667 M 0 0 276(  Ambiguity Aid       \(-ck 2  -aa 1    -aad 2\))FmTx96 104.667 M 0 0 252(    Choice 1: rab/1    line 1  file look.g)FmTx96 114.667 M 0 0 252(    Choice 2: rab/2    line 2  file look.g)FmTx96 134.667 M 0 0 228(    Intersection of lookahead[1] sets:)FmTx96 154.667 M 0 0 78(       J     )FmTx96 174.667 M 0 0 228(    Intersection of lookahead[2] sets:)FmTx96 194.666 M 0 0 78(       X     )FmTx96 214.666 M 0 0 216(     Choice:1  Depth:1  Group:1  \(J\))FmTxFmE1283 0 :Mf0_10 sf( )S1285 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 228.666 M (This is at depth 1 \(match J, the first token,\).  The first choice starts at line 1 and flows )S168 240.666 M (into rule a at line 4 \(items 1 and 2\).  It matches J at line 4. )SFmE1285 0 :Mf2_10 sf( )S1291 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 252.666 M 0 0 240(   1 to a       rab/1  line 1     look.g)FmTx96 262.666 M 0 0 240(   2 a          a/1    line 4     look.g)FmTx96 272.666 M 0 0 240(   3 #token J   a/1    line 4     look.g)FmTx96 292.666 M 0 0 216(     Choice:2  Depth:1  Group:2  \(J\))FmTxFmE1291 0 :Mf0_10 sf( )S1293 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 306.666 M (This is at depth 1 \(match J, the first token\).  The second choice starts at line 2 and )S168 318.666 M (flows into rule b at line 6 \(items 1 and 2\).  It matches J at line 6.)SFmE1294 0 :Mf2_10 sf( )S1300 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 330.666 M 0 0 240(   1 to b       rab/2  line 2     look.g)FmTx96 340.666 M 0 0 240(   2 b          b/1    line 6     look.g)FmTx96 350.666 M 0 0 240(   3 #token J   b/1    line 6     look.g)FmTx96 372.666 M 0 0 228(     Choice:1  Depth:2  Group:3  \(J X\))FmTxFmE1300 0 :Mf0_10 sf( )S1302 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 386.666 M (Choice 1 at depth2 finds a match to the second token of lookahead \(X\) at line 4 of rule )S168 398.666 M (a.  Note that it follows the same path of references as choice 1 at depth 1.)SFmE1302 0 :Mf2_10 sf( )S1308 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 412.666 M 0 0 240(   1 to a       rab/1  line 1     look.g)FmTx96 422.666 M 0 0 240(   2 a          a/1    line 4     look.g)FmTx96 432.666 M 0 0 240(   3 #token J   a/1    line 4     look.g)FmTx96 442.666 M 0 0 240(   4 #token X   a/1    line 4     look.g)FmTx96 464.666 M 0 0 228(     Choice:2  Depth:2  Group:4  \(K X\))FmTxFmE1308 0 :Mf0_10 sf( )S1310 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 478.666 M (Choice 2 at depth 2 finds a match to the second token of lookahead \(X\) at line 7 of rule )S168 490.666 M (b.  Note that the first lookahead token is not J, but K.  Nonetheless, this explains why )S168 502.666 M (there is a collision for X which prevents linear lookahead from resolving the )S168 514.666 M (ambiguity.)SFmE1311 0 :Mf2_10 sf( )S1317 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 528.666 M 0 0 240(   1 to b       rab/2  line 2     look.g)FmTx96 538.666 M 0 0 240(   2 b          b/1    line 6     look.g)FmTx96 548.666 M 0 0 240(   3 #token K   b/2    line 7     look.g)FmTx96 558.666 M 0 0 240(   4 #token X   b/2    line 7     look.g)FmTxFmE1317 0 :Mf1_10 sf( )S1319 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 574.666 M (The search at depth 1 shows how both alternatives find the token J in the first token lookahead set.  The search at )S85.2 586.666 M (depth 2 shows how both alternatives find the token X in the second token lookahead set.)S85.2 602.666 M (When ambiguity aid is enabled and an ambiguity is found in a rule or line number that matches the command line )S85.2 614.666 M (argument the ambiguity aid routine traverses the rules using the same routines which compute first sets.  It searches )S85.2 626.666 M (for tokens which appear in the ambiguity set with appropriate depth.  When it finds a match it reports the chain of )S85.2 638.666 M (rules that were traversed to reach the point at which the match occurs.)SFmEendp%%Page: 13 13%%BeginPageSetupinitializepage(Moog; page: 13 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC1319 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE1319 0 :Mf0_10 sf( )S1321 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (13)S7 FmP60 78 495 648 FmqFFmE1322 0 :Mf1_10 sf( )S1324 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (#57.)S7.7 N (Summary of command line switches related to ambiguity aid)S85.2 100.667 M (The ambiguity aid is controlled by the following command line options:)S96 116.667 M (-aa )SFmE1324 0 :Mf0_10 sf( )S1326 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP110.705 116.667 M (ruleName)SFmE1327 0 :Mf1_10 sf( )S1329 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 116.667 M (Selects reporting by name of rule)S96 132.667 M (-aa)SFmE1329 0 :Mf0_10 sf( )S1331 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP108.205 132.667 M ( lineNumber)SFmE1332 0 :Mf1_10 sf( )S1334 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 132.667 M (Selects reporting by line number \(the file name is not used\).)S96 148.667 M (-aad )SFmE1334 0 :Mf0_10 sf( )S1336 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP115.705 148.667 M (depth)SFmE1337 0 :Mf1_10 sf( )S1339 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 148.667 M (Selects the depth of the search.  The default value is 1.)S132 164.667 M (The number of paths to be searched, and the size of the report can grow geometrically with the -ck value )S132 176.667 M (if a full search for all contributions to the source of the ambiguity is explored. The depth represents the )S132 188.667 M (number of tokens of lookahead which are matched against the sets of ambiguous tokens.  A depth of 1 )S132 200.667 M (means that the search stops when a lookahead sequence of just one token is matched.)S132 216.667 M (A k=1 ck=6 grammar might generate 5,000 items in a report if a full depth 6 search is made with the )S132 228.667 M (ambiguity aid.  The source of the problem may be in the first token and obscured by the volume of data - )S132 240.666 M (I hesitate to call it information.)S132 256.666 M (When the user selects a depth > 1, the search is first performed at depth=1 for both alternatives, then )S132 268.666 M (depth=2 for both alternatives, etc.)S96 284.666 M (-aam)S16.017 N (Enables \"multiple\" reporting for a token in the intersection set of the alternatives.  The default is \"off\".)S132 300.666 M (A given token may appear dozens of times in various paths as the program explores the rules which are )S132 312.666 M (reachable from the point of an ambiguity. With option -aam every possible path the search program )S132 324.666 M (encounters is reported.)S132 340.666 M (Without -aam only the first encounter is reported.  This may result in incomplete information, but the )S132 352.666 M (information may be sufficient and much shorter.)SFmE60 375 495 11 rC1339 0 :MFrMacBegin60 376 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 377 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC1339 0 :Mf1_10 sf( )S1341 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 372.666 M (C++ Mode)S60 396.666 M (#58.)S7.7 N (The destructors of base classes should be virtual in almost all cases)S85.2 412.666 M (If you don\325t know why you should read Scott Meyers\325 excellent book, \"Effective C++, Fifty Specific Ways ...\". )S60 428.666 M (#59.)S7.7 N (Why must the AST root be declared as ASTBase rather than AST ?)S85.2 444.666 M (The functions which implement the rules of the grammar are declared with the prototype:)SFmE1342 0 :Mf2_10 sf( )S1348 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 458.666 M 0 0 210(void aRule\(ASTBase ** _root\) {...};)FmTxFmE1348 0 :Mf1_10 sf( )S1350 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 472.666 M (The underlying support code of )SFmE1350 0 :Mf1_8 sf( )S1352 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP213.769 472.666 M (ANTLR)SFmE1352 0 :Mf1_10 sf( )S1354 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP240.433 472.666 M ( depends only on the behaviors of ASTBase.  There are two virtues to this )S85.2 484.666 M (design:)S96 500.666 M (No recompilation of the underlying routines is necessary when the definition of AST changes)S96 516.666 M (The same object code can be used with multiple parsers in the same program each with its own kind of AST)S85.2 532.666 M (This is in contrast to C++ templates which are designed to provide source code reuse, not object code reuse.)S85.2 548.666 M (An \"AST *\" can be passed to an \"ASTBase *\" why not an \"AST **\" for an \"ASTBase **\" ?)S85.2 564.666 M (This is a C++ )SFmE1355 0 :Mf1_8 sf( )S1357 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP142.031 564.666 M (FAQ)SFmE1357 0 :Mf1_10 sf( )S1359 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP158.035 564.666 M (.  Consider the following \(invalid\) code fragment:)SFmE1359 0 :Mf2_10 sf( )S1365 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 578.666 M 0 0 384(struct B {};                                            /* a1 */)FmTx132 588.666 M 0 0 384(struct D1 : B {int i;};                                 /* a2 */)FmTx132 598.666 M 0 0 384(struct D2 : B {double d;};                              /* a3 */)FmTx132 608.666 M 0 0 384(void func\(B ** ppB\) {*ppB=new D2;};     /* WRONG */     /* a4 */)FmTx132 618.666 M 0 0 384(D1 * pD1=new D1;                                        /* a5 */)FmTx132 628.666 M 0 0 384(func\(&pD1\);                                             /* a6 */)FmTxFmE1365 0 :Mf1_10 sf( )S1367 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 644.666 M (At line a5, pD1 is declared to be a pointer to a D1.  This pointer is passed to \"func\" at line a6.  The function body at )S85.2 656.666 M (line a4 replaces a pointer to a D1 with a pointer to a D2, which violates the declaration at line a5.)S85.2 672.666 M (The following )SFmE1368 0 :Mf0_10 sf( )S1370 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.629 672.666 M (is)SFmE1370 0 :Mf1_10 sf( )S1372 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP151.296 672.666 M ( legal, although it may not do what is expected:)SFmE1373 0 :Mf2_10 sf( )S1379 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 686.666 M 0 0 432(        void func2\(B * pB\) {D1 d1; *pB=d1;};                    /* b1 */)FmTx96 696.666 M 0 0 432(        func2\(pD1\);                                             /* b2 */)FmTxFmE1379 0 :Mf1_10 sf( )S1381 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 710.666 M (The assignment at line b1 )SFmE1381 0 :Mf0_10 sf( )S1383 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP190.449 710.666 M (slices)SFmE1384 0 :Mf1_10 sf( )S1386 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP212.661 710.666 M ( d1 and assigns only the B part of d1 to the object pointed to by pB because the )S85.2 722.666 M (assignment operator chosen is that of class B, not class D1.)SFmEendp%%Page: 14 14%%BeginPageSetupinitializepage(Moog; page: 14 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC1386 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE1386 0 :Mf0_10 sf( )S1388 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (14)S7 FmP60 78 495 648 FmqFFmE1389 0 :Mf1_10 sf( )S1391 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (#60.)S7.7 N (C++ mode makes multiple parsers easy)S85.2 100.667 M (    pccts/testcpp/5/test.g)S25.214 N (Uses multiple instances of a single parse class \(thus a single grammar\))S85.2 112.667 M (    pccts/testcpp/6/main.cpp)S9.664 N (Program uses parsers for two different grammars \(test.g and test2.g\))S85.2 128.667 M (If two parsers share the same )SFmE1391 0 :Mf1_8 sf( )S1393 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204.018 128.667 M (DLG)SFmE1393 0 :Mf1_10 sf( )S1395 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP220.46 128.667 M ( automaton it may be necessary to save )SFmE1396 0 :Mf1_8 sf( )S1398 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP379.288 128.667 M (DLG)SFmE1398 0 :Mf1_10 sf( )S1400 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP395.729 128.667 M ( state.  See Item )S(#61)S(.)S60 144.667 M (#61.)S7.7 N (Use )SFmE1400 0 :Mf1_8 sf( )S1402 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 144.667 M (DLG)SFmE1402 0 :Mf1_10 sf( )S1404 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP119.688 144.667 M (LexerBase routines to save/restore )SFmE1405 0 :Mf1_8 sf( )S1407 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP260.172 144.667 M (DLG)SFmE1407 0 :Mf1_10 sf( )S1409 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP276.613 144.667 M ( state when multiple parsers share a token buffer)S85.2 160.667 M (When the second parser \"takes control\" the )SFmE1409 0 :Mf1_8 sf( )S1411 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP260.224 160.667 M (DLG)SFmE1411 0 :Mf1_10 sf( )S1413 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP276.666 160.667 M (Lexer doesn\325t know about it and doesn\325t reset the state variables )S85.2 172.667 M (such as #lexclass, line number, column tracking, etc. )S85.2 188.667 M (Use )SFmE1414 0 :Mf1_8 sf( )S1416 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 188.667 M (DLG)SFmE1416 0 :Mf1_10 sf( )S1418 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP119.688 188.667 M (LexerBase::saveState \()SFmE1418 0 :Mf1_8 sf( )S1420 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP211.58 188.667 M (DLG)SFmE1420 0 :Mf1_10 sf( )S1422 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP228.022 188.667 M (State *\) and restoreState\()SFmE1423 0 :Mf1_8 sf( )S1425 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP328.801 188.667 M (DLG)SFmE1425 0 :Mf1_10 sf( )S1427 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP345.242 188.667 M (State *\) to save and restore )SFmE1427 0 :Mf1_8 sf( )S1429 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP455.745 188.667 M (DLG)SFmE1429 0 :Mf1_10 sf( )S1431 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP472.186 188.667 M ( state.)S60 204.667 M (#62.)S7.7 N (In C++ mode ASTs and )SFmE1432 0 :Mf1_8 sf( )S1434 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP183.408 204.667 M (ANTLR)SFmE1434 0 :Mf1_10 sf( )S1436 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP210.072 204.667 M (Tokens do not use stack discipline as they do in C mode)S85.2 220.667 M (In C mode ASTs and attributes are allocated on a stack.  This is an efficient way to allocates space for structs and is )S85.2 232.667 M (not a serious limitation because in C it is customary for a structure to be of fixed size.  In C++ mode it would be a )S85.2 244.666 M (serious limitation to assume that all objects of a given type were of the same size because derived classes may have )S85.2 256.666 M (additional fields.  For instance one may have a \"basic\" AST with derived classes for unary operators, binary )S85.2 268.666 M (operators, variables, and so on.  As a result the C++ mode implementation of symbolic tags for elements of the rule )S85.2 280.666 M (uses simple pointer variables.  The pointers are initialized to 0 at the start of the rule and remain well defined for the )S85.2 292.666 M (entire rule.  The things they point to will normally remain well defined, even objects defined in sub-rules:)SFmE1436 0 :Mf2_10 sf( )S1442 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 306.666 M 0 0 402(rule ! : a:rule2 {b:B} <<#0=#\(#a,#[$b]\);>> ; // OK only in C++ mode)FmTxFmE1442 0 :Mf1_10 sf( )S1444 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 320.666 M (This fragment is not be well defined in C mode because \"B\" would become undefined on exit from \")SFmE1445 0 :Mf2_10 sf( )S1451 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP487.866 320.666 M 0 0 30({...})FmTxFmE1451 0 :Mf1_10 sf( )S1453 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP517.866 320.666 M (\".)S60 336.666 M (#63.)S7.7 N (Summary of Token class inheritance in file AToken.h)SFmE1453 0 :Mf1_8 sf( )S1455 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 352.666 M (ANTLR)SFmE1455 0 :Mf1_10 sf( )S1457 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 352.666 M (AbstractToken \321 \(empty class\) virtual table)S85.2 364.666 M (              |)S85.2 376.666 M (             V)SFmE1458 0 :Mf2_10 sf( )S1464 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 388.666 M 0 0 12(  )FmTxFmE1464 0 :Mf1_8 sf( )S1466 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP108 388.666 M (   )SFmE1466 0 :Mf2_10 sf( )S1472 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP114 388.666 M 0 0 354( +-- ANTLRRefCountToken \321 \(reference counter\) virtual table)FmTx96 398.666 M 0 0 54(    |   |)FmTx96 408.666 M 0 0 54(    |   V)FmTx96 418.666 M 0 0 72(    |   +-- )FmTxFmE1472 0 :Mf1_8 sf( )S1474 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 418.666 M (ANTLR)SFmE1474 0 :Mf2_10 sf( )S1480 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP194.664 418.666 M 0 0 114(CommonRefCountToken)FmTx0 0 246( \321 \(token type, text, line\) virtual table)FmTx96 428.666 M 0 0 300(    |            using variable length text fields)FmTx96 438.666 M 0 0 30(    |)FmTx96 448.666 M 0 0 450(    +-- ANTLRCommonNoRefCountToken - \(token type, text, line\) virtual table)FmTx96 458.666 M 0 0 276(    |        using variable length text fields)FmTx96 468.666 M 0 0 30(    |)FmTx96 478.666 M 0 0 18(   )FmTx0 0 348( +-- MyToken \321 \(token type, text, line, ...\) virtual table)FmTx96 488.666 M 0 0 114(          Examples:)FmTx96 498.666 M 0 0 156(             NoLeakToken.h)FmTx96 508.666 M 0 0 156(             SimpleToken.h)FmTx96 518.666 M 0 0 318(             notes/calcAST/numToken.h - numeric field)FmTx96 528.666 M 0 0 270(             notes/col/myToken.h \321 variable l)FmTx0 0 162(ength text with column info)FmTxFmE1480 0 :Mf1_10 sf( )S1482 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 542.666 M (#64.)S7.7 N (Diagram showing relationship of major classes)SFmE1482 0 :Mf2_10 sf( )S1488 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 556.666 M 0 0 306(                                   ANTLRTokenStream)FmTx96 566.666 M 0 0 306(                                   \(ATokenStream.h\))FmTx96 576.666 M 0 0 258(                                          |)FmTx96 586.666 M 0 0 258(                                          V)FmTx96 596.666 M 0 0 414(ANTLRParser --> ANTLRTokenBuffer --> DLGLexerBase ---> DLGInputStream)FmTx96 606.666 M 0 0 414(\(AParser.h\)    \(ATokenBuffer.h\)     \(DLexerBase.h\)    |\(DLexerBase.h\))FmTx96 616.666 M 0 0 330(    |               |                    |            |)FmTx96 626.666 M 0 0 414(    |               V                    V            +- DLGFileInput)FmTx96 636.666 M 0 0 330(    |           MyTokenBuffer         DLGLexer        |)FmTx96 646.666 M 0 0 330(    |                              \(ANTLR generated\)  |)FmTx96 656.666 M 0 0 426(    V                                                 +- DLGStringInput)FmTx96 666.666 M -0.628 0 486( MyParser \(generated by ANTLR from myFile.g\)                                     )FmTx96 676.666 M 0 0 78(   MyParser.h)FmTx30 N 0 0 84(\(class header\))FmTx96 686.666 M 0 0 90(   MyParser.cpp)FmTx18 N 0 0 192(\(static variable initialization\))FmTx96 696.666 M 0 0 78(   myFile.cpp)FmTx30 N 0 0 186(\(implementation code for rules\))FmTxFmE1488 0 :Mf1_10 sf( )S1490 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 712.666 M (#65.)S7.7 N (Required AST constructors: AST\(\), AST\()SFmE1491 0 :Mf1_8 sf( )S1493 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP252.641 712.666 M (ANTLR)SFmE1493 0 :Mf1_10 sf( )S1495 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP279.305 712.666 M (TokenPtr\), and AST\(X )S(x,Y )S(y\) for #[X )S(x,Y )S(y])SFmEendp%%Page: 15 15%%BeginPageSetupinitializepage(Moog; page: 15 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC1495 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE1495 0 :Mf0_10 sf( )S1497 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (15)S7 FmP60 78 495 648 FmqFFmE1498 0 :Mf1_10 sf( )S1500 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (#66.)S7.7 N (Tokens are supplied as demanded by the parser. They are \"pulled\" rather than \"pushed\" )SFmE1500 0 :Mf1_8 sf( )S1502 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 98.667 M (ANTLR)SFmE1502 0 :Mf2_10 sf( )S1508 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP122.664 98.667 M 0 0 102(Parser::consume\(\))FmTx96 108.667 M 0 0 24(--> )FmTxFmE1508 0 :Mf1_8 sf( )S1510 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP120 108.667 M (ANTLR)SFmE1510 0 :Mf2_10 sf( )S1516 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP146.664 108.667 M 0 0 138(TokenBuffer::getToken\(\))FmTx96 118.667 M 0 0 24(--> )FmTxFmE1516 0 :Mf1_8 sf( )S1518 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP120 118.667 M (ANTLR)SFmE1518 0 :Mf2_10 sf( )S1524 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP146.664 118.667 M 0 0 96(TokenBuffer::get)FmTxFmE1524 0 :Mf1_8 sf( )S1526 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP242.664 118.667 M (ANTLR)SFmE1526 0 :Mf2_10 sf( )S1532 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP269.328 118.667 M 0 0 42(Token\(\))FmTx96 128.667 M 0 0 24(--> )FmTxFmE1532 0 :Mf1_8 sf( )S1534 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP120 128.667 M (DLG)SFmE1534 0 :Mf2_10 sf( )S1540 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP136.441 128.667 M 0 0 102(Lexer::getToken\(\))FmTx96 138.667 M 0 0 306(--> MyToken::makeToken\(ANTLRtokenType,lexText,line\))FmTxFmE1540 0 :Mf1_10 sf( )S1542 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 154.667 M (#67.)S7.7 N (The lexer can access parser information using member function )SFmE1543 0 :Mf2_10 sf( )S1549 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP342.019 154.667 M 0 0 66(getParser\(\))FmTxFmE1549 0 :Mf1_10 sf( )S1551 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 170.667 M (The member functions )SFmE1551 0 :Mf1_8 sf( )S1553 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP178.22 170.667 M (ANTLR)SFmE1553 0 :Mf1_10 sf( )S1555 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204.884 170.667 M (TokenBuffer::getParser\(\) and )SFmE1556 0 :Mf1_8 sf( )S1558 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP325.37 170.667 M (DLG)SFmE1558 0 :Mf1_10 sf( )S1560 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP341.811 170.667 M (LexerBase::getParser\(\) return a pointer to the )S85.2 182.667 M (current parser.)S60 198.667 M (#68.)S7.7 N (Additional notes for users converting from C to C++ mode)S85.2 214.667 M (     In general:)SFmE1560 0 :Mf2_10 sf( )S1566 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 214.667 M 0 0 12(zz)FmTxFmE1566 0 :Mf0_10 sf( )S1568 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP216 214.667 M (name)SFmE1569 0 :Mf2_10 sf( )S1575 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP312 214.667 M 0 0 18(=> )FmTxFmE1575 0 :Mf0_10 sf( )S1577 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP330 214.667 M (name)SFmE1577 0 :Mf1_10 sf( )S1579 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP351.658 214.667 M (,  )SFmE1580 0 :Mf0_10 sf( )S1582 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP359.158 214.667 M (_name)SFmE1582 0 :Mf1_10 sf( )S1584 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP385.815 214.667 M (,  or)SFmE1585 0 :Mf0_10 sf( )S1587 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP401.643 214.667 M ( name)SFmE1587 0 :Mf2_10 sf( )S1593 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP425.801 214.667 M 0 0 12(\(\))FmTxFmE1593 0 :Mf1_10 sf( )S1595 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 226.666 M (        example:)SFmE1596 0 :Mf2_10 sf( )S1602 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 226.666 M 0 0 54(zzlextext)FmTx54 N 0 0 66(=> _lextext)FmTxFmE1602 0 :Mf1_10 sf( )S1604 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP378 226.666 M (,)SFmE1604 0 :Mf2_10 sf( )S1610 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP380.5 226.666 M 0 0 60( lextext\(\))FmTxFmE1610 0 :Mf1_10 sf( )S1612 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 238.666 M (        except for:)SFmE1613 0 :Mf2_10 sf( )S1619 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 238.666 M 0 0 36(zzchar)FmTx72 N 0 0 30(=> ch)FmTxFmE1619 0 :Mf1_10 sf( )S1621 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 250.666 M (     In )SFmE1621 0 :Mf1_8 sf( )S1623 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP108.528 250.666 M (DLG)SFmE1623 0 :Mf1_10 sf( )S1625 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP124.969 250.666 M (LexerBase:)SFmE1626 0 :Mf2_10 sf( )S1632 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 250.666 M 0 0 78(NLA=tokenCode)FmTx30 N 0 0 114(=> return tokenCode)FmTxFmE1632 0 :Mf1_10 sf( )S1634 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 262.666 M (                        )SFmE1634 0 :Mf2_10 sf( )S1640 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 262.666 M 0 0 36(line++)FmTx72 N 0 0 72(=> newline\(\))FmTx204 274.666 M 0 0 60(line=value)FmTx48 N 0 0 84(=> _line=value)FmTxFmE1640 0 :Mf0_10 sf( )S1642 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP240 286.666 M (and)SFmE1643 0 :Mf2_10 sf( )S1649 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP312 286.666 M 0 0 12(=>)FmTx0 0 96( set_line\(value\))FmTxFmE1649 0 :Mf0_10 sf( )S1651 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP276 302.666 M (set_line\(\) is not available in vanilla 1.33)SFmE1651 0 :Mf2_10 sf( )S1657 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 318.666 M 0 0 54(zztokens[)FmTxFmE1657 0 :Mf0_10 sf( )S1659 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP258 318.666 M (i)SFmE1660 0 :Mf2_10 sf( )S1666 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP260.778 318.666 M 0 0 6(])FmTx45.222 N 0 0 18(=> )FmTxFmE1666 0 :Mf0_10 sf( )S1668 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP330 318.666 M (parserClassName)SFmE1668 0 :Mf2_10 sf( )S1674 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP401.66 318.666 M 0 0 72(::tokenName\()FmTxFmE1674 0 :Mf0_10 sf( )S1676 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP473.66 318.666 M (i)SFmE1677 0 :Mf2_10 sf( )S1683 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP476.438 318.666 M 0 0 6(\))FmTxFmE1683 0 :Mf0_10 sf( )S1685 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP240 330.666 M (and)SFmE1685 0 :Mf2_10 sf( )S1691 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP312 330.666 M 0 0 192(=> getParser\(\)->parserTokenName\()FmTxFmE1691 0 :Mf0_10 sf( )S1693 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP504 330.666 M (i)SFmE1694 0 :Mf2_10 sf( )S1700 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP506.778 330.666 M 0 0 12(\) )FmTxFmE1700 0 :Mf0_10 sf( )S1702 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP276 346.666 M (tokenName\(\) is not available in vanilla 1.33)S276 358.666 M (parserTokenName is not available in vanilla 1.33)SFmE1702 0 :Mf2_10 sf( )S1708 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 374.666 M 0 0 48(zzendcol)FmTx60 N 0 0 60(=> _endcol)FmTxFmE1708 0 :Mf1_10 sf( )S1710 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP372 374.666 M (, )SFmE1711 0 :Mf2_10 sf( )S1717 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP377 374.666 M 0 0 72(set_endcol\(\))FmTxFmE1717 0 :Mf1_10 sf( )S1719 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP449 374.666 M (, )SFmE1719 0 :Mf2_10 sf( )S1725 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP454 374.666 M 0 0 72(get_endcol\(\))FmTx204 386.666 M 0 0 48(zzbegcol)FmTx60 N 0 0 60(=> _begcol)FmTxFmE1725 0 :Mf1_10 sf( )S1727 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP372 386.666 M (, )SFmE1728 0 :Mf2_10 sf( )S1734 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP377 386.666 M 0 0 72(set_begcol\(\))FmTxFmE1734 0 :Mf1_10 sf( )S1736 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP449 386.666 M (, )SFmE1736 0 :Mf2_10 sf( )S1742 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP454 386.666 M 0 0 72(get_begcol\(\))FmTxFmE1742 0 :Mf1_10 sf( )S1744 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 402.666 M (#69.)S7.7 N (Use the macro )SFmE1745 0 :Mf2_10 sf( )S1751 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP145.447 402.666 M 0 0 48(mytoken\()FmTxFmE1751 0 :Mf0_10 sf( )S1753 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP193.447 402.666 M (expr)SFmE1753 0 :Mf2_10 sf( )S1759 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP211.213 402.666 M 0 0 6(\))FmTxFmE1759 0 :Mf1_10 sf( )S1761 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP217.213 402.666 M ( to convert an )SFmE1762 0 :Mf1_8 sf( )S1764 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP274.412 402.666 M (ANTLR)SFmE1764 0 :Mf1_10 sf( )S1766 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP301.076 402.666 M (TokenPtr to an )SFmE1766 0 :Mf1_8 sf( )S1768 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP363.005 402.666 M (ANTLR)SFmE1768 0 :Mf1_10 sf( )S1770 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP389.669 402.666 M (Token *)S60 418.666 M (#70.)S7.7 N (When using reference counted tokens be careful about saving a pointer generated by )SFmE1771 0 :Mf2_10 sf( )S1777 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP425.312 418.666 M 0 0 54(myToken\(\))FmTxFmE1777 0 :Mf1_10 sf( )S1779 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 434.666 M (Reference counted tokens are deallocated when the reference count maintained by )SFmE1779 0 :Mf1_8 sf( )S1781 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP416.406 434.666 M (ANTLR)SFmE1781 0 :Mf1_10 sf( )S1783 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP443.07 434.666 M (TokenPtr reaches zero. )S85.2 446.666 M (Saving a pointer generated by )SFmE1784 0 :Mf2_10 sf( )S1790 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP207.097 446.666 M 0 0 54(mytoken\(\))FmTxFmE1790 0 :Mf1_10 sf( )S1792 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP261.097 446.666 M (  subverts the reference counting scheme because the reference is not )S85.2 458.666 M (counted.  If such a pointer were stored in an AST it is likely that the token will soon be deallocated leaving you with )S85.2 470.666 M (a pointer to garbage.)S60 486.666 M (#71.)SFmE1792 0 :Mf2_10 sf( )S1798 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 486.666 M 0 0 18(LA\()FmTxFmE1798 0 :Mf0_10 sf( )S1800 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.2 486.666 M (i)SFmE1801 0 :Mf2_10 sf( )S1807 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP105.978 486.666 M 0 0 6(\))FmTxFmE1807 0 :Mf1_10 sf( )S1809 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.978 486.666 M ( is a cache of )SFmE1809 0 :Mf2_10 sf( )S1815 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP166.666 486.666 M 0 0 12(LT)FmTxFmE1815 0 :Mf1_10 sf( )S1817 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP178.666 486.666 M (\()SFmE1818 0 :Mf0_10 sf( )S1820 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP181.993 486.666 M (i)SFmE1820 0 :Mf2_10 sf( )S1826 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP184.772 486.666 M 0 0 6(\))FmTxFmE1826 0 :Mf1_10 sf( )S1828 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP190.772 486.666 M ( values used by the parser \321 it is valid only for)SFmE1829 0 :Mf0_10 sf( )S1831 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP380.435 486.666 M ( i )SFmE1831 0 :Mf4_10 sf( )S1833 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP388.213 486.666 M (\243)SFmE1834 0 :Mf0_10 sf( )S1836 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP393.701 486.666 M ( k)SFmE1836 0 :Mf1_10 sf( )S1838 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 502.666 M (Contributed by John Lilley \(jlilley@empathy.com\))S60 518.666 M (#72.)S7.7 N (To disable reference counting of )SFmE1839 0 :Mf1_8 sf( )S1841 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP217.629 518.666 M (ANTLR)SFmE1841 0 :Mf1_10 sf( )S1843 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP244.293 518.666 M (Tokens use )SFmE1843 0 :Mf0_10 sf( )S1845 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP292.057 518.666 M (parserName)SFmE1846 0 :Mf1_10 sf( )S1848 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP341.491 518.666 M (.noGarbageCollectTokens\(\))S60 534.666 M (#73.)S7.7 N (For string input use )SFmE1848 0 :Mf1_8 sf( )S1850 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP165.744 534.666 M (DLG)SFmE1850 0 :Mf1_10 sf( )S1852 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP182.186 534.666 M (Stri)SFmE1853 0 :Mf2_10 sf( )S1859 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP196.629 534.666 M 0 0 180(ngInput\(const DLGChar *string\))FmTxFmE1859 0 :Mf1_10 sf( )S1861 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP376.629 534.666 M ( for a )SFmE1861 0 :Mf1_8 sf( )S1863 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP400.223 534.666 M (DLG)SFmE1863 0 :Mf2_10 sf( )S1869 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP416.664 534.666 M 0 0 66(InputStream)FmTxFmE1869 0 :Mf1_10 sf( )S1871 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 550.666 M (#74.)S7.7 N (Use )SFmE1872 0 :Mf2_10 sf( )S1878 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 550.666 M 0 0 108(#lexmember <<...>>)FmTxFmE1878 0 :Mf1_10 sf( )S1880 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP211.247 550.666 M ( to insert code into the )SFmE1880 0 :Mf1_8 sf( )S1882 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP302.888 550.666 M (DLG)SFmE1882 0 :Mf1_10 sf( )S1884 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP319.329 550.666 M (Lexer class)S60 566.666 M (#75.)S7.7 N (Use )SFmE1885 0 :Mf2_10 sf( )S1891 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 566.666 M 0 0 108(#lexprefix <<...>>)FmTxFmE1891 0 :Mf1_10 sf( )S1893 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP211.247 566.666 M ( to insert )SFmE1893 0 :Mf2_10 sf( )S1899 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP248.737 566.666 M 0 0 48(#include)FmTxFmE1899 0 :Mf1_10 sf( )S1901 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP296.737 566.666 M ( statements into the )SFmE1902 0 :Mf1_8 sf( )S1904 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP376.718 566.666 M (DLG)SFmE1904 0 :Mf1_10 sf( )S1906 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP393.159 566.666 M (Lexer file)S60 582.666 M (#76.)S7.7 N (How to change the default error reporting actions of )SFmE1906 0 :Mf1_8 sf( )S1908 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP295.932 582.666 M (DLG)SFmE1908 0 :Mf1_10 sf( )S1910 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP312.374 582.666 M ( and )SFmE1911 0 :Mf1_8 sf( )S1913 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP331.812 582.666 M (ANTLR)SFmE1913 0 :Mf1_10 sf( )S1915 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 598.666 M (For )SFmE1915 0 :Mf1_8 sf( )S1917 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP101.587 598.666 M (DLG:)SFmE1917 0 :Mf2_10 sf( )S1923 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 612.666 M 0 0 78(#lexmember <<)FmTx132 622.666 M 0 0 216(virtual ANTLRTokenType erraction\(\) {)FmTxFmE1923 0 :Mf0_10 sf( )S1925 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 634.666 M (Your error action goes here.)S168 644.666 M (Normally you\325ll want to end by calling the standard action:)SFmE1926 0 :Mf2_10 sf( )S1932 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 656.666 M 0 0 198(return DLGLexerBase::erraction\(\);)FmTx132 666.666 M 0 0 12(};)FmTx96 676.666 M 0 0 12(>>)FmTxFmE1932 0 :Mf1_10 sf( )S1934 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 692.666 M (For )SFmE1934 0 :Mf1_8 sf( )S1936 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP101.587 692.666 M (ANTLR)SFmE1936 0 :Mf1_10 sf( )S1938 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP128.251 692.666 M (, start by adding a virtual member function \"syn\" to your parser:)SFmEendp%%Page: 16 16%%BeginPageSetupinitializepage(Moog; page: 16 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC1939 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE1939 0 :Mf0_10 sf( )S1941 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (16)S7 FmP60 78 495 648 FmqFFmE1942 0 :Mf2_10 sf( )S1948 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 84.667 M 0 0 96(class MyParser {)FmTx96 94.667 M 0 0 12(<<)FmTx24 N 0 0 42(public:)FmTx96 104.667 M 0 0 36(      )FmTx36 N 0 0 102(virtual void syn\()FmTx204 114.667 M 0 0 180(ANTLRAbstractToken *      tok,)FmTx204 124.667 M 0 0 198(ANTLRChar *               egroup,)FmTx204 134.667 M 0 0 186(SetWordType *             eset,)FmTx204 144.667 M 0 0 186(ANTLRTokenType            etok,)FmTx204 154.667 M 0 0 174(int                       k\);)FmTx96 164.667 M 0 0 12(>>)FmTx96 174.667 M 0 0 18(...)FmTx96 184.667 M 0 0 6(})FmTxFmE1948 0 :Mf1_10 sf( )S1950 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 200.666 M (The actual error recovery code for )SFmE1950 0 :Mf1_8 sf( )S1952 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP224.543 200.666 M (ANTLR)SFmE1952 0 :Mf1_10 sf( )S1954 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP251.207 200.666 M ( is rather long.  For an example of adding column information to the )S85.2 212.666 M (syntax error message see Example )S(#5)S(.)SFmE60 235 495 11 rC1955 0 :MFrMacBegin60 236 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 237 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC1955 0 :Mf1_10 sf( )S1957 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 232.666 M (ASTs )S60 256.667 M (#77.)S7.7 N (To enable AST construction \(automatic or explicit\) use the )SFmE1958 0 :Mf1_8 sf( )S1960 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP323.164 256.667 M (ANTLR)SFmE1960 0 :Mf1_10 sf( )S1962 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP349.828 256.667 M ( \320gt switch)S60 272.667 M (#78.)S7.7 N (Use )SFmE1962 0 :Mf1_8 sf( )S1964 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 272.667 M (ANTLR)SFmE1964 0 :Mf1_10 sf( )S1966 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP129.911 272.667 M ( option -newAST to make AST creation a member function of the parser)S85.2 288.666 M (This allows a user to define a parser member function to create an AST object.  This is useful for factory methods )S85.2 300.666 M (and cases where the AST are \"owned\" by a particular instance of a parser.)S60 378.666 M (#79.)S7.7 N (Use symbolic tags \(rather than numbers\) to refer to tokens and ASTs in rules)S85.2 394.666 M (prior to version 1.30:)SFmE1967 0 :Mf2_10 sf( )S1973 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 394.666 M 0 0 66(rule! : x y)FmTx78 N 0 0 120(<<#0=#\(#1,#2\);>>   ;)FmTxFmE1973 0 :Mf1_10 sf( )S1975 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 406.666 M (with version 1.30:)SFmE1975 0 :Mf2_10 sf( )S1981 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 406.666 M 0 0 102(rule! : xx:x yy:y)FmTx42 N 0 0 120(<<#0=#\(#xx,#yy\);>> ;)FmTxFmE1981 0 :Mf1_10 sf( )S1983 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 422.666 M (The symbolic tags are implemented as pointers to ASTs.  The pointers are initialized to 0 at the start of the rule and )S85.2 434.666 M (remain defined for the entire rule.  See Item )S(#62)S(.  Rules no longer return pointers to tokens \(Item )S(#97)S60 450.666 M (#80.)S7.7 N (Constructor AST\()SFmE1984 0 :Mf1_8 sf( )S1986 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP157.124 450.666 M (ANTLR)SFmE1986 0 :Mf1_10 sf( )S1988 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP183.788 450.666 M (TokenPtr\) is automatically called for terminals when )SFmE1988 0 :Mf1_8 sf( )S1990 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP397.311 450.666 M (ANTLR)SFmE1990 0 :Mf1_10 sf( )S1992 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP423.975 450.666 M ( \320gt switch is used)S85.2 466.666 M (This can be suppressed using the \"!\" operator.)S60 482.666 M (#81.)S7.7 N (If you use ASTs you have to pass a root AST to the parser)SFmE1993 0 :Mf2_10 sf( )S1999 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 496.666 M 0 0 138(ASTBase     *root=NULL;)FmTx132 508.666 M 0 0 24(... )FmTx132 518.666 M 0 0 234(Parser.startRule\(&root,otherArguments\);)FmTx132 528.666 M 0 0 102(root->preorder\(\);)FmTx132 538.666 M 0 0 96(root->destroy\(\);)FmTxFmE1999 0 :Mf1_10 sf( )S2001 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 554.666 M (#82.)S7.7 N (Use ast\320>destroy\(\) to recursively descend the AST tree and free all sub-trees)S60 570.666 M (#83.)S7.7 N (Don\'t confuse )SFmE2001 0 :Mf2_10 sf( )S2007 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP143.091 570.666 M 0 0 36(#[...])FmTxFmE2007 0 :Mf1_10 sf( )S2009 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP179.091 570.666 M ( with )SFmE2010 0 :Mf2_10 sf( )S2016 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP201.867 570.666 M 0 0 36(#\(...\))FmTxFmE2016 0 :Mf1_10 sf( )S2018 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 586.666 M (The first creates a single AST node using an AST constructor \(which is usually based on an )SFmE2018 0 :Mf1_8 sf( )S2020 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP454.236 586.666 M (ANTLR)SFmE2020 0 :Mf1_10 sf( )S2022 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP480.9 586.666 M (Token or an )SFmE2023 0 :Mf1_8 sf( )S2025 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 598.666 M (ANTLR)SFmE2025 0 :Mf1_10 sf( )S2027 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 598.666 M (TokenType\).  It converts lexical information to an AST.)S85.2 614.666 M (The second creates an AST tree or list \(usually more than a single node\) from other ASTs by filling in the \"down\" )S85.2 626.666 M (field of the first node in the list to create a root node, and the \"sibling\" fields of each of the remaining ASTs in the )S85.2 638.666 M (lists.  It combines existing ASTs to create a more complex structure.)SFmE2027 0 :Mf2_10 sf( )S2033 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 652.666 M 0 0 150(#token ID        \"[a-z]*\")FmTx96 662.666 M 0 0 120(#token COLON     \":\")FmTx96 672.666 M 0 0 132(#token Stmt_With_Label)FmTx96 692.666 M 0 0 426(id! : name:ID    <<#0=#[Stmt_With_Label,$name->getText\(\)];>> ; /* a1 */)FmTxFmE2033 0 :Mf1_10 sf( )S2035 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP212.5 320.666 M (Standard AST constructors)SFmE2036 0 :Mf1_8 sf( )S2038 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP392.5 320.666 M (ANTLR)SFmE2038 0 :Mf1_10 sf( )S2040 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP419.164 320.666 M ( -newAST option AST)S68.5 338.666 M (Automatic conversion of token)SFmE2040 0 :Mf2_10 sf( )S2046 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP212.5 338.666 M 0 0 132(new AST\(ANTLRTokenPtr\))FmTx48 N 0 0 126(newAST\(ANTLRTokenPtr\))FmTxFmE2046 0 :Mf1_10 sf( )S2048 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP68.5 356.666 M (Manual construction:)SFmE2049 0 :Mf2_10 sf( )S2055 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP212.5 356.666 M 0 0 156(#\(X,Y,Z\) => new AST\(X,Y,Z\))FmTx24 N 0 0 150(#\(X,Y,Z\) => newAST\(X,Y,Z\))FmTx208.5 309.875 FmB0 54.25 FmL0 0.25 FmSo388.5 309.875 FmB0 54.25 FmL0 0.25 FmSo64.5 310 FmB486 0 FmL0 0.25 FmSo64.5 328 FmB486 0 FmL0 0.25 FmSo64.5 346 FmB486 0 FmL0 0.25 FmSo64.5 364 FmB486 0 FmL0 0.25 FmSoFmEendp%%Page: 17 17%%BeginPageSetupinitializepage(Moog; page: 17 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC2055 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE2055 0 :Mf0_10 sf( )S2057 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (17)S7 FmP60 78 495 648 FmqFFmE2058 0 :Mf1_10 sf( )S2060 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (The new AST \(a single node\) contains Stmt_With_Label in the token field \321 given a traditional version of )S85.2 96.667 M (AST::AST\()SFmE2060 0 :Mf1_8 sf( )S2062 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP131.858 96.667 M (ANTLR)SFmE2062 0 :Mf1_10 sf( )S2064 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP158.522 96.667 M (TokenType,char *\).)SFmE2065 0 :Mf2_10 sf( )S2071 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 110.667 M 0 0 390(rule! : name:id COLON e:expr   <<#0=#\(#name,#e\);>> ;     /* a2 */)FmTxFmE2071 0 :Mf1_10 sf( )S2073 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 124.667 M (Creates an AST list with \"name\" at its root and \"e\" as its first \(and only\) child.)S85.2 140.667 M (The following example \(a3\) is equivalent to a1, but more confusing, because the two steps above have been )S85.2 152.667 M (combined into a single action:)SFmE2073 0 :Mf2_10 sf( )S2079 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 166.667 M 0 0 168(rule! : name:ID COLON e:expr)FmTx156 N 0 0 102(         /* a3 */)FmTx168 176.667 M 0 0 300(<<#0=#\(#[Stmt_With_Label,$name->getText\(\)],#e\);>>;)FmTxFmE2079 0 :Mf1_10 sf( )S2081 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 192.667 M (#84.)S7.7 N (The make-a-root operator for ASTs \(\"^\"\) can be applied only to terminals \(#token, #tokclass, #tokdef\))S85.2 208.667 M (A child rule might return a tree rather than a single AST.  Were this to happen it could not be made into a root as it )S85.2 220.667 M (is )SFmE2082 0 :Mf0_10 sf( )S2084 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP94.367 220.667 M (already)SFmE2084 0 :Mf1_10 sf( )S2086 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP124.912 220.667 M ( a root and the corresponding fields of the structure are in use.  To make an AST returned by a called rule )S85.2 232.666 M (a root use the expression: #\(root-rule, sibling1, sibling2, sibling3\).)SFmE2087 0 :Mf2_10 sf( )S2093 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168 246.666 M 0 0 186(addOp            : \"\\+\" | \"\\-\";)FmTx168 258.666 M 0 0 186(#tokclass AddOp  { \"\\+\"   \"\\-\"})FmTx96 270.666 M 0 0 66(/* OK    */)FmTx6 N 0 0 228(add !            : expr \(\"\\+\"^ expr\) ;)FmTx96 280.666 M 0 0 66(/* Wrong */)FmTx6 N 0 0 234(addExpr !        : expr \(addOp^ expr\) ;)FmTx96 290.666 M 0 0 66(/* OK    */)FmTx6 N 0 0 228(addExpr !        : expr \(AddOp^ expr\);)FmTxFmE2093 0 :Mf1_10 sf( )S2095 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 306.666 M (#85.)S7.7 N (An already constructed AST tree cannot be the root of a new tree)S85.2 322.666 M (An AST tree \(unless it\'s a trivial tree with no children\) already has made use of the \"down\" field in its structure.  )S85.2 334.666 M (Thus one should be suspicious of any constructs like the following:)SFmE2095 0 :Mf2_10 sf( )S2101 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 348.666 M 0 0 252(rule! : anotherRule:rule2........ <<#0=#\(#)FmTxFmE2101 0 :Mf0_10 sf( )S2103 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP348 348.666 M (anotherRule)SFmE2104 0 :Mf2_10 sf( )S2110 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP397.431 348.666 M 0 0 60(,...\);>> ;)FmTxFmE2110 0 :Mf1_10 sf( )S2112 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 362.666 M (#86.)S7.7 N (Don\325t assign to #0 unless automatic construction of ASTs is disabled using the \"!\" operator on a rule)SFmE2112 0 :Mf2_10 sf( )S2118 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 376.666 M 0 0 300(a! : xx:x yy:y zz:z <<#0=#\(#xx,#yy,#zz\);>> ; // ok)FmTx96 386.666 M 0 0 324(a  : xx:x yy:y zz:z <<#0=#\(#xx,#yy,#zz\);>> ; // NOT ok)FmTxFmE2118 0 :Mf1_10 sf( )S2120 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 402.666 M (The reason for the restriction is that assignment to #0 will cause any ASTs pointed to by #0 to be lost when the )S85.2 414.666 M (pointer is overwritten.)S60 430.666 M (#87.)S7.7 N (The statement in Item )S(#86)S( is stronger than necessary)S85.2 446.666 M (You can assign to #0 even when using automated AST construction if the old tree pointed to by #0 is part of the new )S85.2 458.666 M (tree constructed by )SFmE2121 0 :Mf2_10 sf( )S2127 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP163.772 458.666 M 0 0 36(#\(...\))FmTxFmE2127 0 :Mf1_10 sf( )S2129 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP199.772 458.666 M (. For example:)SFmE2129 0 :Mf2_10 sf( )S2135 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 472.666 M 0 0 126(#token Comma      \",\")FmTx132 482.666 M 0 0 96(#token Stmt_List)FmTx132 498.666 M 0 0 354(stmt_list: stmt \(Comma stmt\)*  <<#0=#\(#[Stmt_List],#0\);>> ;)FmTxFmE2135 0 :Mf1_10 sf( )S2137 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 512.666 M (The automatically constructed tree pointed to by #0 is just put at the end of the new list, so nothing is lost. If you )S85.2 524.666 M (reassign to #0 in the middle of the rule, automatic tree construction will result in the addition of remaining elements )S85.2 536.666 M (at the end of the new tree.  This is not recommended by TJP.)S85.2 552.666 M (Special care must be used when combining the make-a-root operator \(e.g. rule: expr Op^ expr\) with this )S85.2 564.666 M (transgression \(assignment to #0 when automatic tree construction is selected\).)S60 580.666 M (#88.)S7.7 N (A rule that constructs an AST returns an AST even when its caller uses the \"!\" operator)S60 596.666 M (#89.)S7.7 N (\(C++ mode\) Without )SFmE2138 0 :Mf1_8 sf( )S2140 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP172.295 596.666 M (ANTLR)SFmE2140 0 :Mf1_10 sf( )S2142 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP198.959 596.666 M (RefCountToken, a token which isn\325t used in an AST will result in lost memory)S85.2 612.666 M (For a rule like the following:)SFmE2142 0 :Mf2_10 sf( )S2148 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 626.666 M 0 0 282(rule : FOR^ lValue EQ! expr TO! expr BY! expr ;)FmTxFmE2148 0 :Mf1_10 sf( )S2150 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 640.666 M (the tokens \"EQ\", \"TO\", and \"BY\" are not incorporated into any AST.  In C mode the memory they occupied \(they )S85.2 652.666 M (are called )SFmE2151 0 :Mf0_10 sf( )S2153 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP126.277 652.666 M (attributes)SFmE2153 0 :Mf1_10 sf( )S2155 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP164.607 652.666 M ( in C mode\) would be recovered on rule exit.  In C++ mode their memory will be lost unless the )SFmE2156 0 :Mf1_8 sf( )S2158 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 664.666 M (ANTLR)SFmE2158 0 :Mf1_10 sf( )S2160 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 664.666 M (Token class is derived from )SFmE2160 0 :Mf1_8 sf( )S2162 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP225.429 664.666 M (ANTLR)SFmE2162 0 :Mf1_10 sf( )S2164 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP252.093 664.666 M (RefCountToken.  Another approach is to use the NoLeakToken class from )S85.2 676.666 M (Example )S(#4)S(.)S60 692.666 M (#90.)S7.7 N (When passing )SFmE2165 0 :Mf2_10 sf( )S2171 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.072 692.666 M 0 0 36(#\(...\))FmTxFmE2171 0 :Mf1_10 sf( )S2173 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP180.072 692.666 M ( or )SFmE2173 0 :Mf2_10 sf( )S2179 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP193.4 692.666 M 0 0 36(#[...])FmTxFmE2179 0 :Mf1_10 sf( )S2181 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP229.4 692.666 M ( to a subroutine it must be cast from \"ASTBase *\" to \"AST *\")S85.2 708.666 M (Most of the )SFmE2182 0 :Mf1_8 sf( )S2184 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP133.801 708.666 M (PCCTS)SFmE2184 0 :Mf1_10 sf( )S2186 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP158.258 708.666 M ( internal routines are declared using ASTBase rather than AST because they don\325t depend on )S85.2 720.666 M (behavior added by the user to class AST.  Usually )SFmE2186 0 :Mf1_8 sf( )S2188 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP287.634 720.666 M (PCCTS)SFmE2188 0 :Mf1_10 sf( )S2190 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP312.091 720.666 M ( hides this by generating explicit casts, but in the case of )SFmEendp%%Page: 18 18%%BeginPageSetupinitializepage(Moog; page: 18 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC2191 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE2191 0 :Mf0_10 sf( )S2193 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (18)S7 FmP60 78 495 648 FmqFFmE2194 0 :Mf1_10 sf( )S2196 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (subroutine arguments the hiding fails and the user needs to code the cast manually.  See also Item )S(#163)S(.)S60 100.667 M (#91.)S7.7 N (Some examples of )SFmE2196 0 :Mf2_10 sf( )S2202 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP161.565 100.667 M 0 0 36(#\(...\))FmTxFmE2202 0 :Mf1_10 sf( )S2204 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP197.565 100.667 M ( notation using the )SFmE2205 0 :Mf1_8 sf( )S2207 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP274.222 100.667 M (PCCTS)SFmE2207 0 :Mf1_10 sf( )S2209 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP298.679 100.667 M ( list notation)S85.2 116.667 M (See page 45 of the 1.00 manual for a description of the )SFmE2209 0 :Mf1_8 sf( )S2211 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP307.058 116.667 M (PCCTS)SFmE2211 0 :Mf1_10 sf( )S2213 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP331.515 116.667 M ( list notation.)SFmE2214 0 :Mf2_10 sf( )S2220 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 130.667 M 0 0 36(a: A ;)FmTx96 140.667 M 0 0 36(b: B ;)FmTx96 150.667 M 0 0 36(c: C ;)FmTx96 170.667 M 0 0 72(#token T_abc)FmTx96 190.667 M 0 0 438(r : a b c    <<;>>                 ;/* AST list \(0 A B C\) without root */)FmTx96 200.667 M 0 0 438(r!: a b c    <<#0=#\(0,#1,#2,#3\);>> ;/* AST list \(0 A B C\) without root */)FmTx96 210.666 M 0 0 438(r : a! b! c! <<#0=#\(0,#1,#2,#3\);>> ;/* AST list \(0 A B C\) without root */)FmTx96 220.666 M 0 0 438(r : a^ b c                         ;/* AST tree \(A B C\) with root A    */)FmTx96 230.666 M 0 0 438(r!: a b c    <<#0=#\(#1,#2,#3\);>>   ;/* AST tree \(A B C\) with root A    */)FmTx96 240.666 M 0 0 246(r!: a b c    <<#0=#\(#[T_abc],#1,#2,#3\);>>)FmTx96 250.666 M 0 0 438(                                   ;/* AST tree \(T_abc_node A B C\)     */)FmTx96 260.666 M 0 0 438(                                    /*   with root T_abc_node          */)FmTx96 270.666 M 0 0 438(r : a b c    <<#0=#\(#[T_abc],#0\);>>       ;  /* the same as above      */)FmTx96 280.666 M 0 0 438(r : a! b! c! <<#0=#\(#[T_abc],#1,#2,#3\);>> ;  /* the same as above      */)FmTxFmE2220 0 :Mf1_10 sf( )S2222 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 294.666 M (#92.)S7.7 N (A rule which derives epsilon can short circuit its caller\325s explicitly constructed AST)S85.2 310.666 M (When a rule derives epsilon it will return an AST value of 0.  As the routine which constructs the AST tree )S85.2 322.666 M (\(ASTBase::tmake\) has a variable length argument list which is terminated by 0, this can cause problem with )SFmE2222 0 :Mf2_10 sf( )S2228 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 334.666 M 0 0 36(#\(...\))FmTxFmE2228 0 :Mf1_10 sf( )S2230 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP121.2 334.666 M ( lists that have more than two elements:)SFmE2231 0 :Mf2_10 sf( )S2237 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 348.666 M 0 0 426(rule !    : DO body:loop_body END_DO  <<#0=#\(#[DO],#body,#[END_DO];>> ;)FmTx96 358.666 M 0 0 420(loop_body : { statement_list } ;      /* can return 0 on DO END_DO  */)FmTxFmE2237 0 :Mf1_10 sf( )S2239 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 374.666 M (Although this particular example could be handled by automatic tree construction, the problem is a real one when )S85.2 386.666 M (constructing a tree by adding more than one sibling at a time. This problem does not exist for automatically )S85.2 398.666 M (constructed AST trees because those trees are constructed one element at a time.  Contributed by T. Doan )S85.2 410.666 M (\(tdoan@bnr.ca\).)S60 426.666 M (#93.)S7.7 N (How to use automatic AST tree construction when a token code depends on the alternative chosen)S85.2 442.666 M (Suppose one wants to make the following transformation:)SFmE2239 0 :Mf2_10 sf( )S2245 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 456.666 M 0 0 282(rule :  lv:lhs ;          => #\(#[T_simple],#lv\))FmTx96 466.666 M 0 0 312(rule :  lv:lhs  rv:rhs ;  => #\(#[T_complex],#lv,#rv\))FmTxFmE2245 0 :Mf1_10 sf( )S2247 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 482.666 M (Both lhs and rhs considered separately may be suitable for automatic construction of ASTs, but the change in token )S85.2 494.666 M (type from \"T_simple\" to \"T_complex\" appears to require manual tree construction.  Use the following idiom:)SFmE2248 0 :Mf2_10 sf( )S2254 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 508.666 M 0 0 72(rule : lhs \()FmTx132 518.666 M 0 0 282(             | rhs   <<#0=#\(#[T_complex],#0\);>>)FmTx132 528.666 M 0 0 276(             \(\)      <<#0=#\(#[T_simple],#0\);>>)FmTx132 538.666 M 0 0 84(           \) ;)FmTxFmE2254 0 :Mf1_10 sf( )S2256 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 554.666 M (Another solution:)SFmE2256 0 :Mf2_10 sf( )S2262 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 568.666 M 0 0 222(rule : <<ANTLRTokenType t=T_simple;>>)FmTx132 578.666 M 0 0 390(            l:lhs { r:rhs <<t=T_complex;>> } <<#0=#\(#[t],#0\);>> ;)FmTxFmE2262 0 :Mf1_10 sf( )S2264 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 594.666 M (#94.)S7.7 N (For doubly linked ASTs derive from class ASTDoublyLinkedBase and call tree\320>double_link\(0,0\))S85.2 610.666 M (The ASTDoublyLinkedBase class adds \"up\" and \"left\" fields to the AST definition, but it does not cause them to be )S85.2 622.666 M (filled in during AST construction.  After the tree is built call tree-)S(>double_link\(0,0\) to traverses the tree and fill in )S85.2 634.666 M (the up and left fields.)S60 650.666 M (#95.)S7.7 N (When ASTs are constructed manually the programmer is responsible for deleting them on rule failure)S85.2 666.666 M (It is worth a little bit of extra trouble to let )SFmE2265 0 :Mf1_8 sf( )S2267 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP256.531 666.666 M (PCCTS)SFmE2267 0 :Mf1_10 sf( )S2269 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP280.988 666.666 M ( construct the AST for a rule automatically in order to obviate the )S85.2 678.666 M (need for writing a fail action for a rule.  A safer implementation might be to maintain a doubly linked list of all)S85.2 690.666 M (ASTs from which an AST is removed when it is destroyed.  See class NoLeakAST from Example )S(#5)S(.)SFmEendp%%Page: 19 19%%BeginPageSetupinitializepage(Moog; page: 19 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC2269 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE2269 0 :Mf0_10 sf( )S2271 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (19)S7 FmP60 78 495 648 FmqFFmE60 87 495 12 rC2272 0 :MFrMacBegin60 88 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 89 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC2272 0 :Mf1_10 sf( )S2274 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (Rules)S60 108.667 M (#96.)S7.7 N (To refer to a field of an )SFmE2275 0 :Mf1_8 sf( )S2277 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP180.974 108.667 M (ANTLR)SFmE2277 0 :Mf1_10 sf( )S2279 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP207.638 108.667 M (Token within a rule\325s action use  )SFmE2279 0 :Mf2_10 sf( )S2285 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP341.2 108.667 M 0 0 174(<<... mytoken\($x\)->field...>>)FmTxFmE2285 0 :Mf1_8 sf( )S2287 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 124.667 M (ANTLR)SFmE2287 0 :Mf1_10 sf( )S2289 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 124.667 M ( puts all \")SFmE2290 0 :Mf1_8 sf( )S2292 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP150.106 124.667 M (ANTLR)SFmE2292 0 :Mf1_10 sf( )S2294 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP176.77 124.667 M (Token *\" variables in an )SFmE2294 0 :Mf1_8 sf( )S2296 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP277.202 124.667 M (ANTLR)SFmE2296 0 :Mf1_10 sf( )S2298 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP303.867 124.667 M (TokenPtr object in order to maintain reference counts for )S85.2 136.667 M (tokens.  When the reference counter goes to zero the token is deleted \(assuming that the )SFmE2299 0 :Mf1_8 sf( )S2301 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP438.655 136.667 M (ANTLR)SFmE2301 0 :Mf1_10 sf( )S2303 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP465.319 136.667 M (Token definition is )S85.2 148.667 M (derived from )SFmE2303 0 :Mf1_8 sf( )S2305 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP139.617 148.667 M (ANTLR)SFmE2305 0 :Mf1_10 sf( )S2307 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP166.281 148.667 M (RefCountToken\).  One result of this is that rule actions which need to refer to a real )SFmE2308 0 :Mf1_8 sf( )S2310 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 160.667 M (ANTLR)SFmE2310 0 :Mf1_10 sf( )S2312 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 160.667 M (Token field must first convert an )SFmE2312 0 :Mf1_8 sf( )S2314 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP245.702 160.667 M (ANTLR)SFmE2314 0 :Mf1_10 sf( )S2316 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP272.366 160.667 M (TokenPtr to an \")SFmE2317 0 :Mf1_8 sf( )S2319 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP338.374 160.667 M (ANTLR)SFmE2319 0 :Mf1_10 sf( )S2321 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP365.038 160.667 M (Token *\" using the macro \"mytoken\":)SFmE2321 0 :Mf2_10 sf( )S2327 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 174.667 M 0 0 330(number: n:Number <<if \(mytoken\($n\)->value < 0\) {...};>>)FmTxFmE2327 0 :Mf1_10 sf( )S2329 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 188.667 M (#97.)S7.7 N (Rules don\325t return tokens values, thus this won\325t work: )S( )SFmE2330 0 :Mf2_10 sf( )S2336 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP309.868 188.667 M 0 0 174(rule: r1:rule1  <<...$r1...>>)FmTxFmE2336 0 :Mf1_10 sf( )S2338 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 204.667 M (In earlier versions of )SFmE2338 0 :Mf1_8 sf( )S2340 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP170.705 204.667 M (PCCTS)SFmE2340 0 :Mf1_10 sf( )S2342 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP195.162 204.667 M ( \(C mode\) it was accepted practice to assign an attribute to a rule:)SFmE2343 0 :Mf2_10 sf( )S2349 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 218.667 M 0 0 144(rule : rule1  <<$0=$1;>>)FmTxFmE2349 0 :Mf1_10 sf( )S2351 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 232.667 M (However, with the introduction of symbolic tags for labels \(Item )S(#79)S(\) this feature became deprecated for C mode )S85.2 244.667 M (\(Item )S(#189)S(\) and is not even supported for C++ mode.  To return a pointer to a token \()SFmE2351 0 :Mf1_8 sf( )S2353 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP427.197 244.667 M (ANTLR)SFmE2353 0 :Mf1_10 sf( )S2355 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP453.861 244.667 M (TokenPtr\) from a rule )S85.2 256.667 M (use inheritance \(See Item )S(#113)S(\):)SFmE2356 0 :Mf2_10 sf( )S2362 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 270.667 M 0 0 54(statement)FmTx168 280.667 M 0 0 216(: <<ANTLRTokenPtr t;>>  rule > [t] ;)FmTx132 290.667 M 0 0 144(rule > [ANTLRTokenPtr t])FmTx168 300.666 M 0 0 180(: x:X   <<$t=someAction\($x\);>>)FmTxFmE2362 0 :Mf1_10 sf( )S2364 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 316.666 M (It\325s still standard practice to pass back AST information using assignment to #0 and to refer to such return values )S85.2 328.666 M (using labels on rules.  It\325s also standard practice to refer to tokens associated with )SFmE2364 0 :Mf0_10 sf( )S2366 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP413.95 328.666 M (terminals)SFmE2367 0 :Mf1_10 sf( )S2369 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP451.721 328.666 M (:)SFmE2369 0 :Mf2_10 sf( )S2375 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 342.666 M 0 0 396(rule : xx:X    <<...$xx...>>    // okay: \"X\" is a terminal \(token\))FmTx132 354.666 M 0 0 402(rule : xx:x    <<...$xx...>>    // won\325t work: \"x\" is a rule rather)FmTx132 364.666 M 0 0 366(x    : xx:X    <<$x=$xx;>>      //    than a terminal \(token\))FmTxFmE2375 0 :Mf1_10 sf( )S2377 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 380.666 M (#98.)S7.7 N (A simple example of rewriting a grammar to remove left recursion)SFmE2378 0 :Mf1_8 sf( )S2380 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 396.666 M (ANTLR)SFmE2380 0 :Mf1_10 sf( )S2382 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 396.666 M ( can\'t handle left-handed recursion.  A rule such as:)SFmE2382 0 :Mf2_10 sf( )S2388 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 410.666 M 0 0 114(expr : expr Op expr)FmTx96 420.666 M 0 0 78(     | Number)FmTx96 430.666 M 0 0 78(     | String)FmTx96 440.666 M 0 0 36(     ;)FmTxFmE2388 0 :Mf1_10 sf( )S2390 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 454.666 M (will have to be rewritten to something like this:)SFmE2391 0 :Mf2_10 sf( )S2397 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 468.666 M 0 0 144(expr : Number \(Op expr\)*)FmTx96 478.666 M 0 0 144(     | String \(Op expr\)*)FmTx96 488.666 M 0 0 36(     ;)FmTxFmE2397 0 :Mf1_10 sf( )S2399 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 504.666 M (#99.)S7.7 N (A simple example of left-factoring to reduce the amount of )SFmE2399 0 :Mf1_8 sf( )S2401 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP323.982 504.666 M (ANTLR)SFmE2401 0 :Mf1_10 sf( )S2403 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP350.646 504.666 M ( lookahead)S85.2 520.666 M (Another sort of transformation required by )SFmE2404 0 :Mf1_8 sf( )S2406 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP258.459 520.666 M (ANTLR)SFmE2406 0 :Mf1_10 sf( )S2408 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP285.123 520.666 M ( is left-factoring:)SFmE2408 0 :Mf2_10 sf( )S2414 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 534.666 M 0 0 126(rule : STOP WHEN expr)FmTx96 544.666 M 0 0 114(     | STOP ON expr)FmTx96 554.666 M 0 0 114(     | STOP IN expr)FmTx96 564.666 M 0 0 36(     ;)FmTxFmE2414 0 :Mf1_10 sf( )S2416 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 578.666 M (These are easily distinguishable when )SFmE2417 0 :Mf0_10 sf( )S2419 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP239.306 578.666 M (k)SFmE2419 0 :Mf1_10 sf( )S2421 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP243.745 578.666 M (=2, but with a small amount of work it can be cast into a )SFmE2422 0 :Mf0_10 sf( )S2424 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP471.821 578.666 M (k)SFmE2424 0 :Mf1_10 sf( )S2426 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP476.26 578.666 M (=1 grammar:)SFmE2427 0 :Mf2_10 sf( )S2433 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 592.666 M 0 0 138(rule : STOP \( WHEN expr)FmTx96 602.666 M 0 0 126(            | ON expr)FmTx96 612.666 M 0 0 126(            | IN expr)FmTx96 622.666 M 0 0 90(            \) ;)FmTxFmE2433 0 :Mf1_10 sf( )S2435 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 636.666 M ( or:)SFmE2435 0 :Mf2_10 sf( )S2441 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 650.666 M 0 0 180(rule        : STOP rule_suffix)FmTx96 660.666 M 0 0 78(            ;)FmTx96 670.666 M 0 0 138(rule_suffix : WHEN expr)FmTx96 680.666 M 0 0 126(            | ON expr)FmTx96 690.666 M 0 0 126(            | IN expr)FmTx96 700.666 M 0 0 78(            ;)FmTxFmE2441 0 :Mf1_10 sf( )S2443 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 716.666 M (An extreme case of a grammar requiring a rewrite is in Example )S(#11)S(.)SFmEendp%%Page: 20 20%%BeginPageSetupinitializepage(Moog; page: 20 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC2444 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE2444 0 :Mf0_10 sf( )S2446 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (20)S7 FmP60 78 495 648 FmqFFmE2447 0 :Mf1_10 sf( )S2449 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (#100.)SFmE2449 0 :Mf1_8 sf( )S2451 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (ANTLR)SFmE2451 0 :Mf1_10 sf( )S2453 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 84.667 M ( will guess where to match \")SFmE2454 0 :Mf2_10 sf( )S2460 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP225.35 84.667 M 0 0 6(@)FmTxFmE2460 0 :Mf1_10 sf( )S2462 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP231.35 84.667 M (\" if the user omits it from the start rule)SFmE2462 0 :Mf1_8 sf( )S2464 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 100.667 M (ANTLR)SFmE2464 0 :Mf1_10 sf( )S2466 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 100.667 M ( attempts to deduce \"start\" rules by looking for rules which are not referenced by any other rules.  When it )S85.2 112.667 M (finds such a rule it assumes that an end-of-file token \(\"@\"\) should be there and adds one if the user did not code )S85.2 124.667 M (one.  This is the only case, according to TJP, when )SFmE2467 0 :Mf1_8 sf( )S2469 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP290.696 124.667 M (ANTLR)SFmE2469 0 :Mf1_10 sf( )S2471 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP317.36 124.667 M ( adds something to the user\'s grammar.)S60 140.667 M (#101.)S2.7 N (To match any token use the token wild-card expression \".\" \(dot\))S85.2 156.667 M (This can be useful for providing a context dependent error message rather than the all purpose message \"syntax )S85.2 168.667 M (error\".)SFmE2471 0 :Mf2_10 sf( )S2477 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 182.667 M 0 0 192(if-stmt : IF \"\\\(\" expr \"\\\)\" stmt)FmTx96 192.667 M 0 0 366(        | IF .   <<printf\(\"If statement requires expression \")FmTx96 202.667 M 0 0 354(                                \"enclosed in parenthesis\"\);)FmTx96 212.667 M 0 0 318(                   PARSE_FAIL;        // user defined)FmTx96 222.666 M 0 0 114(                 >>)FmTx96 232.666 M 0 0 54(        ;)FmTxFmE2477 0 :Mf1_10 sf( )S2479 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 248.666 M (This particular case is better handled by the parser exception facility.)S85.2 264.666 M (A simpler example:)SFmE2480 0 :Mf2_10 sf( )S2486 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 278.666 M 0 0 300(quoted : \"quote\" . ;            // quoted terminal)FmTxFmE2486 0 :Mf1_10 sf( )S2488 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 292.666 M (#102.)S2.7 N (The \"~\" \(tilde\) operator applied to a #token or #tokclass is satisfied when the input token does )SFmE2488 0 :Mf0_10 sf( )S2490 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP463.921 292.666 M (not)SFmE2491 0 :Mf1_10 sf( )S2493 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP476.699 292.666 M ( match)SFmE2493 0 :Mf2_10 sf( )S2499 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 306.666 M 0 0 210(anything : \(~ t:Newline\)* Newline ;)FmTxFmE2499 0 :Mf1_10 sf( )S2501 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 320.666 M (The \"~\" operator cannot be applied to rules.  Use syntactic predicates to express the idea \"if this rule doesn\'t match )S85.2 332.666 M (try to match this other rule\".)S85.2 348.666 M (The element label \"t\" in the example allows one to examine the token actually matched.  Contributed by Tom )S85.2 360.666 M (Nurkkala \(tom.nurkkala@powercerv.com\).)S60 376.666 M (#103.)S2.7 N (To list the rules of the grammar grep )SFmE2502 0 :Mf0_10 sf( )S2504 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP234.582 376.666 M (parserClassName.)SFmE2504 0 :Mf1_10 sf( )S2506 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP308.742 376.666 M (h for \"_root\" or edit the output from )SFmE2507 0 :Mf1_8 sf( )S2509 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP455.193 376.666 M (ANTLR)SFmE2509 0 :Mf1_10 sf( )S2511 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP481.857 376.666 M ( \320cr)S60 392.666 M (#104.)S2.7 N (The )SFmE2511 0 :Mf1_8 sf( )S2513 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 392.666 M (ANTLR)SFmE2513 0 :Mf1_10 sf( )S2515 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP129.911 392.666 M ( \320gd trace option can be useful in sometimes unexpected ways)S85.2 408.666 M (For example, by suitably defining the functions )SFmE2516 0 :Mf1_8 sf( )S2518 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP277.373 408.666 M (ANTLR)SFmE2518 0 :Mf1_10 sf( )S2520 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP304.037 408.666 M (Parser::tracein and )SFmE2520 0 :Mf1_8 sf( )S2522 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP381.212 408.666 M (ANTLR)SFmE2522 0 :Mf1_10 sf( )S2524 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP407.876 408.666 M (Parser::traceout one can accumulate )S85.2 420.666 M (information on how often each rule is invoked.  They could be used to provide a traceback of active rules following )S85.2 432.666 M (an error provided that the havoc caused by syntactic predicates\325 use of setjmp/longjmp is properly dealt with.)S60 448.666 M (#105.)S2.7 N (Associativity and precedence of operations is determined by nesting of rules)S85.2 464.666 M (In the example below \"=\" associates to the right and has the lowest precedence.  Operators \"+\" and \"*\" associate to )S85.2 476.666 M (the left with \"*\" having the highest precedence.)SFmE2525 0 :Mf2_10 sf( )S2531 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 490.666 M 0 0 414(expr0   : expr1 {\"=\"^ expr0} ;                               /* a1 */)FmTx96 500.666 M 0 0 414(expr1   : expr2 \(\"\\+\"^ expr2\)* ;                             /* a2 */)FmTx96 510.666 M 0 0 414(expr2   : expr3 \(\"\\*\"^ expr3\)* ;                             /* a3 */)FmTx96 520.666 M 0 0 414(expr3   : ID ;                                               /* a4 */)FmTxFmE2531 0 :Mf1_10 sf( )S2533 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 536.666 M (The more deeply nested the rule the higher the precedence.  Thus precedence is \"*\" > \"+\" > \"=\".  Consider the )S85.2 548.666 M (expression \"x=y=z\".  Will it be parsed as \"x=\(y=z\)\" or as \"\(x=y\)=z\" ?   The first part of expr0 is expr1.  Because )S85.2 560.666 M (expr1 and its descendants cannot match an \"=\" it follows that all derivations involving a )SFmE2533 0 :Mf0_10 sf( )S2535 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP439.729 560.666 M (second)SFmE2536 0 :Mf1_10 sf( )S2538 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP467.495 560.666 M ( \"=\" in an expression )S85.2 572.666 M (must arise from the \")SFmE2538 0 :Mf2_10 sf( )S2544 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP169.248 572.666 M 0 0 30({...})FmTxFmE2544 0 :Mf1_10 sf( )S2546 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP199.248 572.666 M (\" term of expr0.  This implies right association.)S85.2 588.666 M (In the following samples the ASTs are shown in the root-and-sibling format used in )SFmE2547 0 :Mf1_8 sf( )S2549 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP422.319 588.666 M (PCCTS)SFmE2549 0 :Mf1_10 sf( )S2551 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP446.776 588.666 M ( documentation. The )S85.2 600.666 M (numbers in brackets are the serial number of the ASTs.  This was created by code from Example )S(#5)S(.)SFmE2551 0 :Mf2_10 sf( )S2557 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 614.666 M 0 0 42(a=b=c=d)FmTx96 624.666 M 0 0 450(\( = <#2>  a <#1>  \( = <#4>  b <#3>  \( = <#6>  c <#5>  d <#7>  \) \) \) NL <#8>)FmTx96 636.666 M 0 0 30(a+b*c)FmTx96 646.666 M 0 0 336(\( + <#2>  a <#1>  \( * <#4>  b <#3>  c <#5>  \) \) NL <#6> )FmTx96 658.666 M 0 0 30(a*b+c)FmTx96 668.666 M 0 0 336(\( + <#4>  \( * <#2>  a <#1>  b <#3>  \) c <#5>  \) NL <#6> )FmTxFmEendp%%Page: 21 21%%BeginPageSetupinitializepage(Moog; page: 21 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC2557 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE2557 0 :Mf0_10 sf( )S2559 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (21)S7 FmP60 78 495 648 FmqFFmE2560 0 :Mf1_10 sf( )S2562 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (#106.)S2.7 N (#tokclass can replace a rule consisting only of alternatives with terminals \(no actions\))S85.2 100.667 M (One can replace:)SFmE2562 0 :Mf2_10 sf( )S2568 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 114.667 M 0 0 180(addOp          : \"\\+\" | \"\\-\" ;)FmTxFmE2568 0 :Mf1_10 sf( )S2570 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 128.667 M (with:)SFmE2571 0 :Mf2_10 sf( )S2577 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 142.667 M 0 0 180(#tokclass AddOp { \"\\+\"  \"\\-\" })FmTxFmE2577 0 :Mf1_10 sf( )S2579 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 156.667 M (This replaces a modest subroutine with a simple bit test.  A #tokclass identifier may be used in a rule wherever a )S85.2 168.667 M (simple #token identifier may be used.)S85.2 184.667 M (The other work-around is much more complicated:)SFmE2579 0 :Mf2_10 sf( )S2585 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 198.667 M 0 0 180(expr1! : left:expr2 <<#0=#l;>>)FmTx96 208.667 M 0 0 408(             \(op:addOp right:expr2  <<#0=#\(#op,#left,#right\);>> \)* ;)FmTx96 218.667 M 0 0 132(addOp  : \"\\+\" | \"\\-\" ;)FmTxFmE2585 0 :Mf1_10 sf( )S2587 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 234.666 M (The \"!\" for rule \"expr1\" disables automatic constructions of ASTs in the rule.  This allows one to manipulate #0 )S85.2 246.666 M (manually.  If the expression had no addition operator then the sub-rule \"\(addOp expr\)*\" would not be executed and )S85.2 258.666 M (#0 will be assigned the AST constructed by #left.  However if there )SFmE2588 0 :Mf0_10 sf( )S2590 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP357.873 258.666 M (is)SFmE2590 0 :Mf1_10 sf( )S2592 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP364.541 258.666 M ( an addOp present then each time the sub-rule )S85.2 270.666 M (is rescanned due to the \")SFmE2593 0 :Mf2_10 sf( )S2599 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP182.851 270.666 M 0 0 36(\(...\)*)FmTxFmE2599 0 :Mf1_10 sf( )S2601 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP218.851 270.666 M (\" the current tree in #0 is placed as the first of two siblings underneath a new tree.  )S85.2 282.666 M (This new tree has the AST returned by addOp as the root.  It is a left-leaning tree.)S60 298.666 M (#107.)S2.7 N (Rather than comment out a rule during testing, add a nonsense token which never matches \321 See Item )S(#110)S(.)SFmE60 321 495 11 rC2601 0 :MFrMacBegin60 322 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 323 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC2601 0 :Mf1_10 sf( )S2603 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 318.666 M (Init-Actions)S60 342.666 M (#108.)S2.7 N (Don\'t confuse init-actions with leading-actions \(actions which precede a rule\))S85.2 358.666 M (If the first element following the start of a rule or sub-rule is an action it is always interpreted as an init-action. An )S85.2 370.666 M (init-action occurs in a scope which includes the entire rule or sub-rule. An action which is )SFmE2604 0 :Mf0_10 sf( )S2606 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP446.999 370.666 M (not)SFmE2606 0 :Mf1_10 sf( )S2608 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP459.778 370.666 M ( an init-action is )S85.2 382.666 M (enclosed in \"{\" and \"}\" during generation of code for the rule and has essentially zero scope \321 the action itself. )S85.2 398.666 M (The difference between an init-action and an action which precedes a rule can be especially confusing when an )S85.2 410.666 M (action appears at the start of an alternative.  These )SFmE2609 0 :Mf0_10 sf( )S2611 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP288.147 410.666 M (appear)SFmE2611 0 :Mf1_10 sf( )S2613 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP316.474 410.666 M ( to be almost identical, but they aren\'t:)SFmE2614 0 :Mf2_10 sf( )S2620 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 424.666 M 0 0 432(b  : <<int i=0;>>  b1 > [i]    /* b1  <<...>> is an init-action       */)FmTx96 434.666 M 0 0 432(   | <<int j=0;>>  b2 > [j]    /* b2  <<...>> is part of the rule     */)FmTx96 444.666 M 0 0 432(   ;                           /*  and will cause a compilation error */)FmTxFmE2620 0 :Mf1_10 sf( )S2622 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 460.666 M (On line \"b1\" the )SFmE2622 0 :Mf2_10 sf( )S2628 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP152.79 460.666 M 0 0 42(<<...>>)FmTxFmE2628 0 :Mf1_10 sf( )S2630 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP194.79 460.666 M ( appears immediately after the beginning of the rule making it an init-action.  On line )S85.2 472.666 M (\"b2\" the )SFmE2631 0 :Mf2_10 sf( )S2637 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP120.576 472.666 M 0 0 42(<<...>>)FmTxFmE2637 0 :Mf1_10 sf( )S2639 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP162.576 472.666 M ( does )SFmE2639 0 :Mf0_10 sf( )S2641 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP185.904 472.666 M (not)SFmE2642 0 :Mf1_10 sf( )S2644 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP198.682 472.666 M ( appear at the start of a rule or sub-rule, thus it is interpreted as a leading action which )S85.2 484.666 M (happens to precede the rule.)S85.2 500.666 M (This can be especially dangerous if you are in the habit of rearranging the order of alternatives in a rule.)S85.2 516.666 M (For instance, changing this:)SFmE2644 0 :Mf2_10 sf( )S2650 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 530.666 M 0 0 366(      b  : <<int i=0,j=0;>> <<i++;>>  b1 > [i]       /* c1 */)FmTx96 540.666 M 0 0 366(         | <<j++;>>  b1 > [i]                        /* c2 */)FmTx96 550.666 M 0 0 60(         ;)FmTxFmE2650 0 :Mf1_10 sf( )S2652 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 566.666 M (to this:)SFmE2653 0 :Mf2_10 sf( )S2659 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 580.666 M 0 0 366(      b  : /* empty production */                    /* d1 */)FmTx96 590.666 M 0 0 366(         | <<int i=0,j=0;>> <<i++;>>  b1 > [i]       /* d2 */)FmTx96 600.666 M 0 0 174(         | <<j++;>>  b1 > [i])FmTx96 610.666 M 0 0 60(         ;)FmTxFmE2659 0 :Mf1_10 sf( )S2661 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 626.666 M (or to this:)SFmE2661 0 :Mf2_10 sf( )S2667 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 638.666 M 0 0 42(      b)FmTx96 648.666 M 0 0 366(         : <<j++;>>  b1 > [i]                        /* e1 */)FmTx96 658.666 M 0 0 366(         | <<int i=0,j=0;>> <<i++;>>  b1 > [i]       /* e2 */)FmTx96 668.666 M 0 0 60(         ;)FmTxFmE2667 0 :Mf1_10 sf( )S2669 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 684.666 M (changes an init-action into a non-init action, and vice-versa.)SFmEendp%%Page: 22 22%%BeginPageSetupinitializepage(Moog; page: 22 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC2670 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE2670 0 :Mf0_10 sf( )S2672 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (22)S7 FmP60 78 495 648 FmqFFmE2673 0 :Mf1_10 sf( )S2675 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (#109.)S2.7 N (An empty sub-rule can change a regular action into an init-action)S85.2 100.667 M (A particularly nasty form of the init-action problem is when an empty sub-rule has an associated action:)SFmE2675 0 :Mf2_10 sf( )S2681 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 114.667 M 0 0 210(        rule!: name:ID \(/* empty */)FmTx96 124.667 M 0 0 282(                            <<#0=#[ID,$name];>>)FmTx96 134.667 M 0 0 240(                       | ab:array_bounds)FmTx96 144.667 M 0 0 414(                            <<#0=#[T_array_declaration,$name],#ab\);>>)FmTx96 154.667 M 0 0 252(                       \);                 )FmTxFmE2681 0 :Mf1_10 sf( )S2683 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 170.667 M (Since there is no reserved word in )SFmE2684 0 :Mf1_8 sf( )S2686 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP223.75 170.667 M (PCCTS)SFmE2686 0 :Mf1_10 sf( )S2688 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP248.207 170.667 M ( for epsilon, the action for the empty arm of the sub-rule becomes the init-)S85.2 182.667 M (action.  For this reason it\'s wise to follow one of the following conventions)S132 198.667 M (\320 Represent epsilon with an empty subrule \"\(\)\")S132 214.667 M (\320 Put the null rule as the last rule in a list of alternatives:)SFmE2688 0 :Mf2_10 sf( )S2694 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 228.666 M 0 0 96(rule!: name:ID \()FmTx96 238.666 M 0 0 240(                 \(\)  <<#0=#[ID,$name];>>)FmTx96 248.666 M 0 0 204(                 | ab:array_bounds)FmTx96 258.666 M 0 0 384(                       <<#0=#[T_array_declaration,$name],#ab\);>>)FmTx96 268.666 M 0 0 102(               \);)FmTxFmE2694 0 :Mf1_10 sf( )S2696 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 284.666 M (The cost of using \"\(\)\" to represent epsilon is small.)S60 300.666 M (#110.)S2.7 N (Commenting out a sub-rule can change a leading-action into an init-action)S85.2 316.666 M (Suppose one comments out a rule in the grammar in order to test an idea:)SFmE2697 0 :Mf2_10 sf( )S2703 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 330.666 M 0 0 276(        rule                          /* a1 */)FmTx96 340.666 M 0 0 276(                : <<init-action;>>    /* a2 */)FmTx96 350.666 M 0 0 276(        ////      rule_a              /* a3 */)FmTx96 360.666 M 0 0 276(                | rule_b              /* a4 */)FmTx96 370.666 M 0 0 276(                | rule_c              /* a5 */)FmTx96 380.666 M 0 0 102(                ;)FmTxFmE2703 0 :Mf1_10 sf( )S2705 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 396.666 M (In this case one only wanted to comment out the \"rule_a\" reference in line a3.  The reference is indeed gone, but the )S85.2 408.666 M (change has introduced an epsilon production \321 which probably creates a large number of ambiguities.  Without the )S85.2 420.666 M (init-action the \":\" would have probably have been commented out also, and )SFmE2705 0 :Mf1_8 sf( )S2707 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP389.096 420.666 M (ANTLR)SFmE2707 0 :Mf1_10 sf( )S2709 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP415.761 420.666 M ( would report a syntax error \321 )S85.2 432.666 M (thus preventing one from shooting oneself in the foot.  See Item )S(#107)S(.)S85.2 448.666 M (Commenting out a rule can create orphan rules which can lead to misleading reports of ambiguity in the grammar. )S85.2 460.666 M (To detect orphan rules use the )SFmE2710 0 :Mf1_8 sf( )S2712 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP207.925 460.666 M (ANTLR)SFmE2712 0 :Mf1_10 sf( )S2714 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP234.589 460.666 M ( \320info o switch.)S60 476.666 M (#111.)S2.7 N (Init-actions are executed just once for sub-rules: )SFmE2714 0 :Mf2_10 sf( )S2720 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP280.378 476.666 M 0 0 36(\(...\)+)FmTxFmE2720 0 :Mf1_10 sf( )S2722 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP316.378 476.666 M (, )SFmE2723 0 :Mf2_10 sf( )S2729 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP321.378 476.666 M 0 0 36(\(...\)*)FmTxFmE2729 0 :Mf1_10 sf( )S2731 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP357.378 476.666 M (, and )SFmE2731 0 :Mf2_10 sf( )S2737 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP379.317 476.666 M 0 0 30({...})FmTxFmE2737 0 :Mf1_10 sf( )S2739 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP409.317 476.666 M ( )S85.2 492.666 M (Consider the following example from section 3.6.1 \(page 29\) of the 1.00 manual:)SFmE2740 0 :Mf2_10 sf( )S2746 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 506.666 M 0 0 396(        a : <<List *p=NULL;>>                   // initialize list)FmTx96 516.666 M 0 0 96(            Type)FmTx96 526.666 M 0 0 402(            \(  <<int i=0;>>                     // initialize index)FmTx96 536.666 M 0 0 252(               v:Var <<append\(p,i++,$v\);>>)FmTx96 546.666 M 0 0 84(            \)*)FmTx96 556.666 M 0 0 174(            <<OperateOn\(p\);>>)FmTx96 566.666 M 0 0 66(          ;)FmTxFmE60 587 495 11 rC2746 0 :MFrMacBegin60 587.999 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 588.999 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC2746 0 :Mf1_10 sf( )S2748 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 584.666 M (Inheritance)S60 608.666 M (#112.)S2.7 N (Downward inherited variables are just normal C arguments to the function which recognizes the rule)S85.2 624.666 M (If one is using downward inheritance syntax to pass results back to the caller \(really upward inheritance !\) then it is )S85.2 636.666 M (necessary to pass the )SFmE2749 0 :Mf0_10 sf( )S2751 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP171.272 636.666 M (address)SFmE2751 0 :Mf1_10 sf( )S2753 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP202.378 636.666 M ( of the variable which will receive the result.)SFmEendp%%Page: 23 23%%BeginPageSetupinitializepage(Moog; page: 23 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC2754 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE2754 0 :Mf0_10 sf( )S2756 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (23)S7 FmP60 78 495 648 FmqFFmE2757 0 :Mf1_10 sf( )S2759 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (#113.)S2.7 N (Upward inheritance returns arguments by passing back values)S85.2 100.667 M (If the rule has more than one item passed via upward inheritance then )SFmE2759 0 :Mf1_8 sf( )S2761 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP365.908 100.667 M (ANTLR)SFmE2761 0 :Mf1_10 sf( )S2763 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP392.572 100.667 M ( creates a )SFmE2764 0 :Mf2_10 sf( )S2770 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP432.26 100.667 M 0 0 36(struct)FmTxFmE2770 0 :Mf1_10 sf( )S2772 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP468.26 100.667 M ( to hold the result )S85.2 112.667 M (and then copies each component of the structure to the upward inheritance variables. )SFmE2772 0 :Mf2_10 sf( )S2778 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 126.667 M 0 0 78(#token  T_int)FmTx96 136.667 M 0 0 84(#token  T_real)FmTx96 146.667 M 0 0 102(#token  T_complex)FmTx96 166.667 M 0 0 54(class P {)FmTx96 176.667 M 0 0 18(...)FmTx96 186.667 M 0 0 438(number : <<int useRadix=10;int iValue;double rValue;double rPart,iPart;>>)FmTx96 196.667 M 0 0 186(         { radix > [useRadix] })FmTx96 206.666 M 0 0 282(                intNumber [useRadix] > [iValue])FmTx96 216.666 M 0 0 186(        | realNumber > [rValue])FmTx96 226.666 M 0 0 234(        | complexNumber > [rPart,iPart])FmTx96 236.666 M 0 0 6(;)FmTx96 246.666 M 0 0 270(complexNumber > [double rPart,double iPart] :)FmTx96 256.666 M 0 0 390(        \"\\[\" realNumber > [$rPart] \",\" realNumber > [$iPart] \"\\]\")FmTx96 266.666 M 0 0 6(;)FmTx96 276.666 M 0 0 180(realNumber > [double result] :)FmTx96 286.666 M 0 0 378(        v:\"[0-9]+.[0-9]*\"             <<$result=toDouble\($v\);>>)FmTx96 296.666 M 0 0 6(;)FmTx96 306.666 M 0 0 330(radix > [int i] : v:\"%[0-9]+\"         <<$i=toInt\($v\);>>)FmTx96 316.666 M 0 0 6(;)FmTx96 326.666 M 0 0 228(intNumber [int radix] > [int result] :)FmTx96 336.666 M 0 0 360(        v:\"[0-9]+\"                    <<$result=toInt\($v\);>>)FmTx96 346.666 M 0 0 6(;)FmTx96 356.666 M 0 0 6(})FmTxFmE2778 0 :Mf1_10 sf( )S2780 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 372.666 M (This example depends on the use of several constructors for ASTs and user defined routines toInt\(\) and toDouble\(\).)S60 388.666 M (#114.)S2.7 N (Be careful about passing via upward inheritance LT\(i\)->getText\(\) if using )SFmE2781 0 :Mf1_8 sf( )S2783 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP383.476 388.666 M (ANTLR)SFmE2783 0 :Mf1_10 sf( )S2785 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP410.14 388.666 M (CommonToken)S85.2 404.666 M (If the token is destroyed due to the reference count going to 0 will the text still be valid ?)S60 420.666 M (#115.)SFmE2785 0 :Mf1_8 sf( )S2787 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 420.666 M (ANTLR)SFmE2787 0 :Mf1_10 sf( )S2789 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 420.666 M ( \320gt code will include the AST with downward inheritance values in the rule\325s argument list)S60 436.666 M (#116.)S2.7 N (Predefine the )SFmE2790 0 :Mf1_8 sf( )S2792 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP140.725 436.666 M (PURIFY)SFmE2792 0 :Mf1_10 sf( )S2794 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP169.178 436.666 M ( macro if you are passing objects using upward inheritance)S85.2 452.666 M (The default PURIFY macro zeroes the memory occupied by objects passed via upward inheritance.  If your object )S85.2 464.666 M (has a non-trivial default constructor this could cause problems.)SFmE60 487 495 11 rC2794 0 :MFrMacBegin60 487.999 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 489 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC2794 0 :Mf1_10 sf( )S2796 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 484.666 M (Syntactic Predicates)S60 508.666 M (The terms \"infinite lookahead\", \"guess mode\", and \"syntactic predicate\" all imply use of the same facility in )SFmE2797 0 :Mf1_8 sf( )S2799 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP494.602 508.666 M (PCCTS)SFmE2799 0 :Mf1_10 sf( )S2801 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP519.059 508.666 M ( to )S60 520.666 M (provide a limited amount of backtracking by the parser.  In this case we are )SFmE2801 0 :Mf0_10 sf( )S2803 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP363.752 520.666 M (not)SFmE2804 0 :Mf1_10 sf( )S2806 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP376.531 520.666 M ( referring to backtracking in )SFmE2806 0 :Mf1_8 sf( )S2808 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP491.191 520.666 M (DLG)SFmE2808 0 :Mf1_10 sf( )S2810 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP507.633 520.666 M ( or other )S60 532.666 M (lexers.  The term \"syntactic predicate\" emphasizes that it is handled by the parser.  The term \"guess mode\" emphasizes that )S60 544.666 M (the parser may have to backtrack.  The term \"guess mode\" may also be used to distinguish two mutually exclusive modes )S60 556.666 M (of operation in the )SFmE2811 0 :Mf1_8 sf( )S2813 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP136.084 556.666 M (ANTLR)SFmE2813 0 :Mf1_10 sf( )S2815 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP162.748 556.666 M ( parser:)S96 572.666 M (\321 Normal mode:  A failure of the input to match the rules is a syntax error.  The parser executes actions, )S96 584.666 M (constructs ASTs, reports syntax errors it finds \(or invokes parser exception handling\) and attempts automatic )S96 596.666 M (recovery from the syntax errors.  There is no provision for backtracking in this mode.)S96 612.666 M (\321 Guess mode: The parser attempts to match a \")SFmE2815 0 :Mf2_10 sf( )S2821 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP292.509 612.666 M 0 0 36(\(...\)?)FmTxFmE2821 0 :Mf1_10 sf( )S2823 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP328.509 612.666 M (\" block and knows that it must be able to backtrack if )S96 624.666 M (the match fails.  In this case the parser does )SFmE2824 0 :Mf0_10 sf( )S2826 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP272.306 624.666 M (not)SFmE2826 0 :Mf1_10 sf( )S2828 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP285.084 624.666 M ( execute user-actions \(except init-actions\), nor does it construct )S96 636.666 M (ASTs.   Failed semantic predicates cause backtracking, except when they are validation predicates.  )S60 652.666 M (In C++ mode, lookahead uses a sliding window of tokens whose initial size is specified when the )SFmE2829 0 :Mf1_8 sf( )S2831 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP451.169 652.666 M (ANTLR)SFmE2831 0 :Mf1_10 sf( )S2833 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP477.833 652.666 M (TokenBuffer is )S60 664.666 M (constructed.  In C mode the entire input is read, processed, and tokenized by )SFmE2833 0 :Mf1_8 sf( )S2835 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP367.942 664.666 M (DLG)SFmE2835 0 :Mf1_10 sf( )S2837 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP384.383 664.666 M ( before )SFmE2838 0 :Mf1_8 sf( )S2840 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP414.916 664.666 M (ANTLR)SFmE2840 0 :Mf1_10 sf( )S2842 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP441.58 664.666 M ( begins parsing.  The term )S60 676.666 M (\"infinite lookahead\" derives from the initial implementation in )SFmE2842 0 :Mf1_8 sf( )S2844 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP312.527 676.666 M (ANTLR)SFmE2844 0 :Mf1_10 sf( )S2846 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP339.191 676.666 M ( C mode.)S60 692.666 M (#117.)S2.7 N (Normal actions are suppressed while in guess mode because they have side effects)S60 708.666 M (#118.)S2.7 N (Automatic construction of ASTs is suppressed during guess mode because it is a side effect)SFmEendp%%Page: 24 24%%BeginPageSetupinitializepage(Moog; page: 24 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC2847 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE2847 0 :Mf0_10 sf( )S2849 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (24)S7 FmP60 78 495 648 FmqFFmE2850 0 :Mf1_10 sf( )S2852 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (#119.)S2.7 N (Syntactic predicates should not have side-effects)S85.2 100.667 M (If there is no match then the rule which uses the syntactic predicate won\'t be executed.)S60 116.667 M (#120.)S2.7 N (How to use init-actions to create side-effects in guess mode \(despite Item )S(#119)S(\))S85.2 132.667 M (If you absolutely have to have side-effects from syntactic predicates one can exploit the fact that )SFmE2852 0 :Mf1_8 sf( )S2854 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP473.345 132.667 M (ANTLR)SFmE2854 0 :Mf1_10 sf( )S2856 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP500.009 132.667 M ( always )S85.2 144.667 M (executes init-actions, even in guess mode:)SFmE2857 0 :Mf2_10 sf( )S2863 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 158.667 M 0 0 120(rule   : \(prefix\)? A)FmTx96 168.667 M 0 0 60(       | B)FmTx96 178.667 M 0 0 48(       ;)FmTx96 188.667 M 0 0 66(prefix : <<)FmTxFmE2863 0 :Mf0_10 sf( )S2865 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP162 188.667 M (regular-init-action-that\'s-always-executed)SFmE2865 0 :Mf2_10 sf( )S2871 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP331.294 188.667 M 0 0 12(>>)FmTx96 198.667 M 0 0 90(         A \( <<)FmTxFmE2871 0 :Mf0_10 sf( )S2873 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP186 198.667 M (init-action-for-empty-subrule)SFmE2874 0 :Mf2_10 sf( )S2880 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP303.178 198.667 M 0 0 36(>> \) B)FmTx96 208.667 M 0 0 48(       ;)FmTxFmE2880 0 :Mf1_10 sf( )S2882 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 224.666 M (The init-actions in \"prefix\" will always be executed \(perhaps several times\) in guess-mode.  Contributed by TJP.)S60 240.666 M (#121.)S2.7 N (With values of )SFmE2882 0 :Mf0_10 sf( )S2884 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP146.567 240.666 M (k)SFmE2885 0 :Mf1_10 sf( )S2887 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP151.006 240.666 M (>1 or infinite lookahead mode one cannot use feedback from parser to lexer)S85.2 256.666 M (As infinite lookahead mode can cause large amounts of the input to be scanned by )SFmE2887 0 :Mf1_8 sf( )S2889 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP416.47 256.666 M (DLG)SFmE2889 0 :Mf1_10 sf( )S2891 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP432.911 256.666 M ( before )SFmE2892 0 :Mf1_8 sf( )S2894 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP463.443 256.666 M (ANTLR)SFmE2894 0 :Mf1_10 sf( )S2896 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP490.107 256.666 M ( begins parsing )S85.2 268.666 M (one cannot depend on feedback from the parser to the lexer to handle things like providing special token codes for )S85.2 280.666 M (items which are in a symbol table \(the \"lex hack\" for )SFmE2896 0 :Mf2_10 sf( )S2902 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP298.552 280.666 M 0 0 48(typedefs)FmTxFmE2902 0 :Mf1_10 sf( )S2904 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP346.552 280.666 M ( in the C language\).  Instead one )SFmE2905 0 :Mf0_10 sf( )S2907 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP478.449 280.666 M (must)SFmE2907 0 :Mf1_10 sf( )S2909 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP497.336 280.666 M ( use semantic )S85.2 292.666 M (predicates which allow for such decisions to be made by the parser or place such checks in the )SFmE2910 0 :Mf1_8 sf( )S2912 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP465.032 292.666 M (ANTLR)SFmE2912 0 :Mf1_10 sf( )S2914 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP491.696 292.666 M (TokenBuffer )S85.2 304.666 M (routine getToken\(\) which is called every time the parser needs another token.  See Example )S(#10)S(.)S60 320.666 M (#122.)S2.7 N (Can\325t use interactive scanner \()SFmE2914 0 :Mf1_8 sf( )S2916 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP206.797 320.666 M (ANTLR)SFmE2916 0 :Mf1_10 sf( )S2918 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP233.461 320.666 M ( \320gk option\) with )SFmE2919 0 :Mf1_8 sf( )S2921 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP305.121 320.666 M (ANTLR)SFmE2921 0 :Mf1_10 sf( )S2923 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP331.785 320.666 M ( infinite lookahead)S60 336.666 M (#123.)S2.7 N (Syntactic predicates are implemented using setjmp/longjmp \321 beware C++ objects requiring destructors)SFmE60 359 495 11 rC2923 0 :MFrMacBegin60 360 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 361 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC2923 0 :Mf1_10 sf( )S2925 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 356.666 M (Semantic Predicates)S60 380.666 M (#124.)S2.7 N (Semantic predicates have higher precedence than alternation: )SFmE2926 0 :Mf2_10 sf( )S2932 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP332.568 380.666 M 0 0 54(<<>>? A|B)FmTxFmE2932 0 :Mf1_10 sf( )S2934 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP386.568 380.666 M ( means )SFmE2934 0 :Mf2_10 sf( )S2940 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP417.113 380.666 M 0 0 66(\(<<>>? A\)|B)FmTxFmE2940 0 :Mf1_10 sf( )S2942 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 396.666 M (#125.)S2.7 N (Get rid of warnings about missing LT\(i\) by using a comment: )SFmE2943 0 :Mf2_10 sf( )S2949 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP334.299 396.666 M 0 0 66(/* LT\(i\) */)FmTxFmE2949 0 :Mf1_10 sf( )S2951 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 412.666 M (#126.)S2.7 N (It is sometime desirable to use leading actions to inhibit hoisting of semantic predicates)S60 428.666 M (#127.)S2.7 N (Any actions \(except init-actions\) inhibit the hoisting of semantic predicates)S85.2 444.666 M (Here is an example of an empty leading action whose sole purpose is to inhibit hoisting of semantic predicates )S85.2 456.666 M (appearing in rule2 into the prediction for rule1.  Note the presence of the empty init-action \(See Item )S(#108)S(\).)SFmE2951 0 :Mf2_10 sf( )S2957 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 470.666 M 0 0 162(rule1    : <<;>> <<>> rule2)FmTx96 480.666 M 0 0 96(         | rule3)FmTx96 490.666 M 0 0 60(         ;)FmTx96 500.666 M 0 0 306(rule2    : <<semanticPred\(LT\(1\)->getText\(\)\)>>? ID ;)FmTxFmE2957 0 :Mf1_10 sf( )S2959 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 516.666 M (#128.)S2.7 N (Semantic predicates that use local variables or require init-actions must inhibit hoisting)S60 532.666 M (#129.)S2.7 N (Semantic predicates that use inheritance variables must not be hoisted)S85.2 548.666 M (You cannot use downward inheritance to pass parameters to semantic predicates which are )SFmE2960 0 :Mf0_10 sf( )S2962 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP450.859 548.666 M (not)SFmE2962 0 :Mf1_10 sf( )S2964 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP463.638 548.666 M ( validation )S85.2 560.666 M (predicates.  The problem appears when the semantic predicate is hoisted into a parent rule to predict which rule to )S85.2 572.666 M (call:)S85.2 588.666 M (For instance:)SFmE2965 0 :Mf2_10 sf( )S2971 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 602.666 M 0 0 138(        a  :  b1 [flag])FmTx96 612.666 M 0 0 96(           |  b2)FmTx96 622.666 M 0 0 72(           ;)FmTx96 634.666 M 0 0 126(        b1 [int flag])FmTx96 644.666 M 0 0 378(           : <<flag && hasPropertyABC\(LT\(1\)->getText\(\)\)>>? ID ;)FmTx96 656.666 M 0 0 102(        b2 : ID ;)FmTxFmE2971 0 :Mf1_10 sf( )S2973 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 670.666 M (When the semantic predicate is evaluated within rule \"a\" to determine whether to call b1, b2, or b3 the compiler will )S85.2 682.666 M (discover that there is no variable named \"flag\" for procedure \"a\(\)\".  If you are unlucky enough to have a variable )S85.2 694.666 M (named \"flag\" in a\(\) then you will have a )SFmE2973 0 :Mf0_10 sf( )S2975 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP248.017 694.666 M (very)SFmE2976 0 :Mf1_10 sf( )S2978 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP265.222 694.666 M ( difficult-to-find bug.)S60 710.666 M (#130.)S2.7 N (A semantic predicate which is not at the left edge of a rule becomes a validation predicate)SFmEendp%%Page: 25 25%%BeginPageSetupinitializepage(Moog; page: 25 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC2978 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE2978 0 :Mf0_10 sf( )S2980 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (25)S7 FmP60 78 495 648 FmqFFmE2981 0 :Mf1_10 sf( )S2983 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (Decisions about which rule of a grammar to apply are made before entering the code which recognizes the rule.  If )S85.2 96.667 M (the semantic predicate is not at the left edge of the production then the decision has already been made and it is too )S85.2 108.667 M (late to change rules based on the semantic predicate. In this case the semantic predicate is evaluated only to verify )S85.2 120.667 M (that it is true and is termed a \"validation predicate\".)S60 136.667 M (#131.)S2.7 N (Semantic predicates are not always hoisted into the prediction expression)S85.2 152.667 M (Even if a semantic predicate is on the left edge there is no guarantee that it will be part of the prediction expression. )S85.2 164.667 M (Consider the following two examples:)SFmE2983 0 :Mf2_10 sf( )S2989 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 178.667 M 0 0 96(        a  :  <<)FmTxFmE2989 0 :Mf0_10 sf( )S2991 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP192 178.667 M (semantic-predicate)SFmE2992 0 :Mf2_10 sf( )S2998 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP268.631 178.667 M 0 0 72(>>?  ID glob)FmTx43.369 N 0 0 48(/* a1 */)FmTx96 188.667 M 0 0 126(           |  ID glob)FmTx162 N 0 0 48(/* a2 */)FmTx96 198.667 M 0 0 66(          ;)FmTx96 210.667 M 0 0 96(        b  :  <<)FmTxFmE2998 0 :Mf0_10 sf( )S3000 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP192 210.667 M (semantic-predicate)SFmE3000 0 :Mf2_10 sf( )S3006 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP268.631 210.667 M 0 0 72(>>?  ID glob)FmTx43.369 N 0 0 48(/* b1 */)FmTx96 220.666 M 0 0 150(           |  Number glob)FmTx138 N 0 0 48(/* b2 */)FmTx96 230.666 M 0 0 66(          ;)FmTxFmE3006 0 :Mf1_10 sf( )S3008 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 244.666 M (With )SFmE3009 0 :Mf0_10 sf( )S3011 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP107.695 244.666 M (k)SFmE3011 0 :Mf1_10 sf( )S3013 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP112.134 244.666 M (=1 rule \"a\" requires the semantic predicate to disambiguate alternatives a1 and a2 because the rules are )S85.2 256.666 M (otherwise identical.  Rule \"b\" has a token type of Number in alternative b2 so it can be distinguished from b1 )S85.2 268.666 M (without evaluation of the semantic predicate during prediction.  In both cases the semantic predicate will be )S85.2 280.666 M (validated by evaluation inside the rule.)S60 296.666 M (#132.)S2.7 N (Semantic predicates can\325t be hoisted into a sub-rule: \")SFmE3014 0 :Mf2_10 sf( )S3020 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP300.857 296.666 M 0 0 30({x} y)FmTxFmE3020 0 :Mf1_10 sf( )S3022 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP330.857 296.666 M (\" is not exactly equivalent to \")SFmE3022 0 :Mf2_10 sf( )S3028 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP451.763 296.666 M 0 0 42(x y | y)FmTxFmE3028 0 :Mf1_10 sf( )S3030 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP493.763 296.666 M (\")S85.2 312.666 M (Consider the following grammar extract:)SFmE3031 0 :Mf2_10 sf( )S3037 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 326.666 M 0 0 72(class Expr {)FmTx96 336.666 M 0 0 120(    e1 : \(e2\)+ END ;)FmTx96 346.666 M 0 0 258(    xid: <<is_xid\(LT\(1\)->getText\(\)\)>>? ID ;)FmTx96 356.666 M 0 0 258(    yid: <<is_yid\(LT\(1\)->getText\(\)\)>>? ID ;)FmTx96 376.666 M 0 0 360(  /* Works        */  e2:  xid \".\" yid | yid ;      /* a1 */)FmTx96 386.666 M 0 0 360(  /* Doesn\325t work */  e2:  {xid \".\"} yid ;          /* a2 */)FmTx96 396.666 M 0 0 6(})FmTxFmE3037 0 :Mf1_10 sf( )S3039 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 412.666 M (Alternatives a1 and a2 appear to be equivalent, but a1 works on input \"abc\" and a2 doesn\325t because only the )S85.2 424.666 M (semantic predicate of xid is hoisted into production e1 \(but not the semantic predicate of yid\).)S85.2 440.666 M (Explanation by TJP:  These alternatives are not really the same.  The )SFmE3039 0 :Mf0_10 sf( )S3041 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP362.866 440.666 M (language)SFmE3042 0 :Mf1_10 sf( )S3044 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP400.083 440.666 M ( described however is the same.  The )S85.2 452.666 M (rule:)SFmE3044 0 :Mf2_10 sf( )S3050 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 466.666 M 0 0 114(e2: {xid \".\"} yid ;)FmTxFmE3050 0 :Mf1_10 sf( )S3052 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 480.666 M (is shorthand for:)SFmE3053 0 :Mf2_10 sf( )S3059 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 494.666 M 0 0 216(e2: \(xid \".\" | /* epsilon */ \) yid ;)FmTxFmE3059 0 :Mf1_10 sf( )S3061 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 508.666 M (Rule e2 has no decision to make here \321 hence, yid does not get its predicate hoisted. The decision to be made for )S85.2 520.666 M (the empty alternative does not get the predicate from yid hoisted because one can\'t hoist a predicate )SFmE3061 0 :Mf0_10 sf( )S3063 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP485.439 520.666 M (into)SFmE3064 0 :Mf1_10 sf( )S3066 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP500.996 520.666 M ( a subrule )S85.2 532.666 M (from beyond the subrule.  The program might alter things in the subrule so that the predicate is no longer valid or )S85.2 544.666 M (becomes valid. Contributed by Kari Grano \(kari.grano@varian.com\).)S60 560.666 M (#133.)S2.7 N (How to change the reporting of failed semantic predicates)S85.2 576.666 M (To make a global change #define the macro zzfailed_predicate\(string\) prior to the #include of pccts/h/AParser.h)S85.2 592.666 M (One can change the handling on a case-by-case basis by using the \"failed predicate\" action which is enclosed in \"[\" )S85.2 604.666 M (and \"]\" and follows immediately after the predicate:)SFmE3066 0 :Mf2_10 sf( )S3072 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 618.666 M 0 0 264(        a : <<isTypedef\(LT\(1\)->getText\(\)\)>>?)FmTx204 628.666 M 0 0 228( [{printf\(\"Not a typedef\\n\"\);};]  ID ;)FmTxFmE3072 0 :Mf1_10 sf( )S3074 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 644.666 M (For an example of conversion of a failed semantic predicate into a parser exception see Example )S(#13)S(.)S60 660.666 M (#134.)S2.7 N (A semantic predicate should be free of side-effects because it may be evaluated multiple times)S85.2 676.666 M (Even in simple grammars semantic predicate are evaluated at least twice: once in the prediction expression for a rule )S85.2 688.666 M (and once inside the rule as a validation predicate to make sure the semantic predicate is valid.)S85.2 704.666 M (A semantic predicate may be hoisted into more than one prediction expressions.)S85.2 720.666 M (A prediction expression may be evaluated more than once as part of syntactic predicates \(guess mode\).)SFmEendp%%Page: 26 26%%BeginPageSetupinitializepage(Moog; page: 26 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC3075 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE3075 0 :Mf0_10 sf( )S3077 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (26)S7 FmP60 78 495 648 FmqFFmE3078 0 :Mf1_10 sf( )S3080 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (#135.)S2.7 N (There\325s no simple way to avoid evaluation of a semantic predicate for validation after use in prediction)S60 100.667 M (#136.)S2.7 N (What is the \"context\" of a semantic predicate ?)S85.2 116.667 M (Answer due to TJP:   The context of a predicate is the set of )SFmE3080 0 :Mf0_10 sf( )S3082 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP327.048 116.667 M (k)SFmE3083 0 :Mf1_10 sf( )S3085 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP331.487 116.667 M (-strings \(comprised of lookahead symbols\) that can be )S85.2 128.667 M (matched following the execution of a predicate.  For example,)SFmE3085 0 :Mf2_10 sf( )S3091 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 142.667 M 0 0 108(a : <<p>>? alpha ;)FmTxFmE3091 0 :Mf1_10 sf( )S3093 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 156.667 M (The context of \"p\" is Look\(alpha\) where Look\(alpha\) is the set of lookahead )SFmE3094 0 :Mf0_10 sf( )S3096 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP393.508 156.667 M (k)SFmE3096 0 :Mf1_10 sf( )S3098 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP397.947 156.667 M (-strings for alpha.)SFmE3099 0 :Mf2_10 sf( )S3105 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 170.667 M 0 0 282(class_name: <<isClass\(LT\(1\)->getText\(\)\)>>? ID ;)FmTxFmE3105 0 :Mf1_10 sf( )S3107 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 184.667 M (The context of )SFmE3107 0 :Mf2_10 sf( )S3113 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP146.008 184.667 M 0 0 96(<<isClass ...>>?)FmTxFmE3113 0 :Mf1_10 sf( )S3115 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP242.008 184.667 M ( is ID for )SFmE3116 0 :Mf0_10 sf( )S3118 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP280.878 184.667 M (k)SFmE3118 0 :Mf1_10 sf( )S3120 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP285.316 184.667 M (=1.  Only )SFmE3121 0 :Mf0_10 sf( )S3123 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP325.953 184.667 M (k)SFmE3123 0 :Mf1_10 sf( )S3125 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP330.392 184.667 M (=1 is used since only LT\(1\) is referenced in the )S85.2 196.667 M (semantic predicate.  It is important to use \"\320prc on\" for proper operation.  The old notation:)SFmE3126 0 :Mf2_10 sf( )S3132 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 210.667 M 0 0 378(class_name: <<LT\(1\)==ID ? isClass\(LT\(1\)->getText\(\)\) : 1>>? ID ;)FmTx96 220.667 M 0 0 426(                     /* Obsolete notation incompatiable with -prc on */)FmTxFmE3132 0 :Mf1_10 sf( )S3134 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 236.666 M (shouldn\325t be used for new grammars \321 it is not compatible with \"\320prc on\".  The only reason \"\320prc on\" is not the )S85.2 248.666 M (default is backward compatibility.)S85.2 264.666 M (Here is an example that won\'t work because it doesn\'t have context check in the predicates:)SFmE3134 0 :Mf2_10 sf( )S3140 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 278.666 M 0 0 198(a          : \( class_name | Num \))FmTx96 288.666 M 0 0 132(           | type_name)FmTx96 298.666 M 0 0 72(           ;)FmTx96 308.666 M 0 0 288(class_name : <<isClass\(LT\(1\)->getText\(\)\)>>? ID ;)FmTx96 318.666 M 0 0 282(type_name  : <<isType\(LT\(1\)->getText\(\)\)>>? ID ;)FmTxFmE3140 0 :Mf1_10 sf( )S3142 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 334.666 M (The prediction for production one of rule \"a\" will be:)SFmE3143 0 :Mf2_10 sf( )S3149 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 348.666 M 0 0 372(if \( LT\(1\) in { ID, Num } && isClass\(LT\(1\)->getText\(\)\)\)  {...})FmTxFmE3149 0 :Mf1_10 sf( )S3151 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 362.666 M (Clearly, Num will never satisfy isClass\(\), so the production will never match.)S85.2 378.666 M (When you ask )SFmE3151 0 :Mf1_8 sf( )S3153 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.905 378.666 M (ANTLR)SFmE3153 0 :Mf1_10 sf( )S3155 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP171.569 378.666 M ( to compute context, it can check for missing predicates. With \320prc on, for this grammar:)SFmE3156 0 :Mf2_10 sf( )S3162 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 392.666 M 0 0 90(        a   : b)FmTx96 402.666 M 0 0 300(            | <<isVar\(LT\(1\)->getText\(\)\)>>?      ID)FmTx96 412.666 M 0 0 306(            | <<isPositive\(LT\(1\)->getText\(\)>>?  Num)FmTx96 422.666 M 0 0 78(            ;)FmTx96 432.666 M 0 0 300(        b   : <<isType\(LT\(1\)->getText\(\)\)>>?     ID)FmTx96 442.666 M 0 0 102(            | Num)FmTx96 452.666 M 0 0 78(            ;)FmTxFmE3162 0 :Mf1_8 sf( )S3164 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 468.666 M (ANTLR)SFmE3164 0 :Mf1_10 sf( )S3166 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 468.666 M ( reports:)SFmE3166 0 :Mf2_10 sf( )S3172 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 482.666 M 0 0 336(warning alt 1 of rule itself has no predicate to resolve)FmTx132 492.666 M 0 0 318(                               ambiguity upon { Num })FmTxFmE3172 0 :Mf1_10 sf( )S3174 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 508.666 M (#137.)S2.7 N (Use )SFmE3175 0 :Mf1_8 sf( )S3177 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 508.666 M (ANTLR)SFmE3177 0 :Mf1_10 sf( )S3179 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP129.911 508.666 M ( option \"-info p\" for information on how semantic predicates are being handled and hoisted)S85.2 524.666 M (When the user selects option \"-info p\" the program will generate detailed information about predicates.  If the user )S85.2 536.666 M (selects \"-mrhoist on\" additional detail will be provided explaining the promotion and suppression of predicates.  The )S85.2 548.666 M (output is part of the generated file and sandwiched between #if 0/#endif statements.)S85.2 564.666 M (Consider the following k=1 grammar:)SFmE3179 0 :Mf2_10 sf( )S3185 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 578.666 M 0 0 234(start : \( all \) * ;            /* 3  */)FmTx132 588.666 M 0 0 234(all   : a                      /* 4  */)FmTx132 598.666 M 0 0 234(      | b                      /* 5  */)FmTx132 608.666 M 0 0 234(      ;                        /* 6  */)FmTx132 618.666 M 0 0 234(a     : c B ;                  /* 7  */)FmTx132 628.666 M 0 0 234(c     : <<pc\(LT\(1\)\)>>?         /* 8  */)FmTx132 638.666 M 0 0 234(      | B                      /* 9  */)FmTx132 648.666 M 0 0 234(      ;                        /* 10 */)FmTx132 658.666 M 0 0 234(b     : <<pb\(LT\(1\)\)>>? X ;     /* 11 */)FmTxFmE3185 0 :Mf1_10 sf( )S3187 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 674.666 M (Below is an excerpt of the output for rule \"start\" when used with -mrhoist on and -info p.)SFmEendp%%Page: 27 27%%BeginPageSetupinitializepage(Moog; page: 27 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC3188 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE3188 0 :Mf0_10 sf( )S3190 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (27)S7 FmP60 78 495 648 FmqFFmE3191 0 :Mf2_10 sf( )S3197 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 84.667 M 0 0 30(#if 0)FmTx96 104.667 M 0 0 396(Hoisting of predicate suppressed by alternative without predicate.)FmTx96 114.667 M 0 0 432(The alt without the predicate includes all cases where the predicate is )FmTx96 124.667 M 0 0 36(false.)FmTx96 144.667 M 0 0 204(   WITH predicate: line 8  infop.g)FmTx96 154.667 M 0 0 222(   WITHOUT predicate: line 9  infop.g)FmTx96 174.667 M 0 0 204(The context set for the predicate:)FmTx96 194.666 M 0 0 126(     B               )FmTx96 214.666 M 0 0 366(The lookahead set for the alt WITHOUT the semantic predicate:)FmTx96 234.666 M 0 0 126(     B               )FmTx96 254.666 M 0 0 84(The predicate:)FmTx96 274.666 M 0 0 144(  pred  <<  pc\(LT\(1\)\)>>?)FmTx96 284.666 M 0 0 324(                    depth=k=1  rule c  line 8  infop.g)FmTx96 294.666 M 0 0 102(    set context: )FmTx96 304.666 M 0 0 138(       B               )FmTx96 324.666 M 0 0 156(Chain of referenced rules:)FmTx96 344.666 M 0 0 300(    #0  in rule start \(line 3 infop.g\) to rule all)FmTx96 354.666 M 0 0 276(    #1  in rule all \(line 4 infop.g\) to rule a)FmTx96 364.666 M 0 0 264(    #2  in rule a \(line 7 infop.g\) to rule c)FmTx96 374.666 M 0 0 204(    #3  in rule c \(line 8 infop.g\))FmTx96 394.666 M 0 0 36(#endif)FmTx96 404.666 M 0 0 12(&&)FmTx96 414.666 M 0 0 30(#if 0)FmTx96 434.666 M 0 0 132(pred  <<  pb\(LT\(1\)\)>>?)FmTx96 444.666 M 0 0 318(                  depth=k=1  rule b  line 11  infop.g)FmTx96 454.666 M 0 0 90(  set context: )FmTx96 464.666 M 0 0 126(     X               )FmTx96 484.666 M 0 0 36(#endif)FmTxFmE3197 0 :Mf1_10 sf( )S3199 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 500.666 M (#138.)S2.7 N (Semantic predicates, predicate context, and hoisting)S85.2 516.666 M (The interaction of semantic predicates with hoisting is sometimes subtle.  Hoisting involves the evaluation of )S85.2 528.666 M (semantic predicates in a rule\325s parent in order to determine whether the rule associated with the semantic predicate )S85.2 540.666 M (is \"viable\".  There are two ways to generate code for semantic predicates which are \"hoisted\" into a parent rule.  )S85.2 552.666 M (With \"\320prc )S(off\", the default, the behavior of semantic predicates resembles gates which enable or disable various )S85.2 564.666 M (productions.  With \"\320prc on\" the behavior of semantic predicates resemble a token for which its token type is )S85.2 576.666 M (determined by run-tine information rather than by purely lexical information.  It is important to understand what )S85.2 588.666 M (\"-)S(prc )S(on\" does, when to use semantic predicates, and when to choose an alternative method of using semantic )S85.2 600.666 M (information to guide the parse. We start with a grammar excerpt which does not require hoisting, then add a rule )S85.2 612.666 M (which requires hoisting and show the difference in code with predicate context computation off \(the default\) and on.)S85.2 628.666 M (Consider:)SFmE3199 0 :Mf2_10 sf( )S3205 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 642.666 M 0 0 54(statement)FmTx132 652.666 M 0 0 90(        : upper)FmTx132 662.666 M 0 0 90(        | lower)FmTx132 672.666 M 0 0 96(        | number)FmTx132 682.666 M 0 0 54(        ;)FmTx132 692.666 M 0 0 246(upper   : <<isU\(LT\(1\)->getText\(\)\)>>? ID ;)FmTx132 702.666 M 0 0 246(lower   : <<isL\(LT\(1\)->getText\(\)\)>>? ID ;)FmTx132 712.666 M 0 0 108(number  : Number ;)FmTxFmEendp%%Page: 28 28%%BeginPageSetupinitializepage(Moog; page: 28 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC3205 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE3205 0 :Mf0_10 sf( )S3207 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (28)S7 FmP60 78 495 648 FmqFFmE3208 0 :Mf1_10 sf( )S3210 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (The code generated \(with one ambiguity warning\) resembles:)SFmE3210 0 :Mf2_10 sf( )S3216 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 98.667 M 0 0 138(if \(LA\(1\)==ID && isU\) {)FmTx132 108.667 M 0 0 72(    upper\(\);)FmTx132 118.667 M 0 0 180(} else if \(LA\(1\)==ID && isL\) {)FmTx132 128.667 M 0 0 72(    lower\(\);)FmTx132 138.667 M 0 0 162(} else if \(LA\(1\)==Number\) {)FmTx132 148.667 M 0 0 78(    number\(\);)FmTx132 158.667 M 0 0 18(...)FmTxFmE3216 0 :Mf1_10 sf( )S3218 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 174.667 M (Now the need for a non-trivial prediction expression is introduced:)SFmE3219 0 :Mf2_10 sf( )S3225 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 188.667 M 0 0 114(parent  : statement)FmTx132 198.667 M 0 0 72(        | ID)FmTx132 208.666 M 0 0 54(        ;)FmTx132 218.666 M 0 0 54(statement)FmTx132 228.666 M 0 0 90(        : upper)FmTx132 238.666 M 0 0 96(        | number)FmTx132 248.666 M 0 0 54(        ;)FmTxFmE3225 0 :Mf1_10 sf( )S3227 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 264.666 M (Running )SFmE3227 0 :Mf1_8 sf( )S3229 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP122.148 264.666 M (ANTLR)SFmE3229 0 :Mf1_10 sf( )S3231 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP148.812 264.666 M ( causes one ambiguity warning.  The code for \"statement\" resembles:)SFmE3232 0 :Mf2_10 sf( )S3238 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 278.666 M 0 0 258(if \( \(LA\(1\)==ID || LA\(1\)==Number\) && isU\) {)FmTx132 288.666 M 0 0 108(      statement\(\);)FmTx132 298.666 M 0 0 138(} else if \(LA\(1\)==ID\) {)FmTx132 308.666 M 0 0 18(...)FmTxFmE3238 0 :Mf1_10 sf( )S3240 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 324.666 M (Even if LA\(1\) is a Number the semantic predicate isU\(\) will be evaluated.  Depending on the way that isU is written )S85.2 336.666 M (it may or may not be meaningful.  This is exactly the problem addressed by predicate computation.  With \"\320prc on\" )S85.2 348.666 M (one receives two ambiguity warnings and the code for \"statement\" resembles:)S85.2 490.666 M (The important thing to notice is the call to isU\(\) is guarded by a test that insures that the token is indeed an ID.)S85.2 506.666 M (The following does not change anything because )SFmE3240 0 :Mf1_8 sf( )S3242 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP283.188 506.666 M (ANTLR)SFmE3242 0 :Mf1_10 sf( )S3244 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP309.852 506.666 M ( already knows that the lookahead context for the semantic )S85.2 518.666 M (predicates can only be \"ID\":)SFmE3245 0 :Mf2_10 sf( )S3251 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 532.666 M 0 0 300(upper   : \(ID\)? => <<isU\(LT\(1\)->getText\(\)\)>>? ID ;)FmTxFmE3251 0 :Mf1_10 sf( )S3253 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 546.666 M (#139.)S2.7 N (Another example of predicate hoisting)S85.2 562.666 M (Consider the following grammar fragment which uses semantic predicates to disambiguate an ID in rules ca and cb:)SFmE3253 0 :Mf2_10 sf( )S3259 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 576.666 M 0 0 306(a : \( { b | X } Eol\)* \"@\" ;                /* a1 */)FmTx132 586.666 M 0 0 306(b : c ID ;                                 /* a2 */)FmTx132 596.666 M 0 0 306(c : {ca} {cb} ;                            /* a3 */)FmTx132 612.666 M 0 0 306(ca: <<pa\(LT\(1\)->getText\(\)\)>>? ID;          /* a4 */)FmTx132 622.666 M 0 0 306(cb: <<pb\(LT\(1\)->getText\(\)\)>>? ID;          /* a5 */)FmTxFmE3259 0 :Mf1_10 sf( )S3261 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 638.666 M (The code generated for rule c resembles:)SFmE3262 0 :Mf2_10 sf( )S3268 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 652.666 M 0 0 306(if \(LA\(1\)==ID\) && pa\(...\)\) {               /* b1 */)FmTx132 662.666 M 0 0 306(   ca\(\);                                   /* b2 */)FmTx132 672.666 M 0 0 306(} else {                                   /* b3 */)FmTx132 682.666 M 0 0 306(   goto exit;                              /* b4 */)FmTx132 692.666 M 0 0 306(};                                         /* b5 */)FmTxFmE3268 0 :Mf1_10 sf( )S3270 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 708.666 M (The test of \"pb\" does not even appear.  The problem is that the element \"{cb}\" is not at the left edge of rule c \320 even )S85.2 720.666 M (though \"{ca}\" is an optional element.  Although \"ca\" may match epsilon, its presence in rule c still blocks the )S113.952 380.666 M (Code  \320prc on)S141.622 N ( Outline format  \320prc on)SFmE3270 0 :Mf2_10 sf( )S3276 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP88.752 398.666 M 0 0 108(if \( \(LA\(1\)==ID ||)FmTx88.752 408.666 M 0 0 138(      LA\(1\)==Number\) &&)FmTx88.752 418.666 M 0 0 132(     \( !\(LA\(1\)==ID\) ||)FmTx88.752 428.666 M 0 0 174(        \(LA\(1\)==ID && isU\)\) {)FmTx88.752 438.666 M 0 0 138(           statement\(\);)FmTx88.752 448.666 M 0 0 138(} else if \(LA\(1\)==ID\) {)FmTx88.752 458.666 M 0 0 36(   ...)FmTx286.748 398.666 M 0 0 12(&&)FmTx286.748 408.666 M 0 0 24(  ||)FmTx286.748 418.666 M 0 0 78(    LA\(1\)==ID)FmTx286.748 428.666 M 0 0 102(    LA\(1\)==Number)FmTx286.748 438.666 M 0 0 24(  ||)FmTx286.748 448.666 M 0 0 192(    !             <===== not ...)FmTx286.748 458.666 M 0 0 180(      LA\(1\)==ID   <===== an ID)FmTx286.748 468.666 M 0 0 150(    isU\(LT\(1\)->getText\(\)\))FmTx282.748 369.875 FmB0 106.25 FmL0 0.25 FmSo84.752 370 FmB445.497 0 FmL0 0.25 FmSo84.752 388 FmB445.497 0 FmL0 0.25 FmSo84.752 475.999 FmB445.497 0 FmL0 0.25 FmSoFmEendp%%Page: 29 29%%BeginPageSetupinitializepage(Moog; page: 29 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC3276 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE3276 0 :Mf0_10 sf( )S3278 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (29)S7 FmP60 78 495 648 FmqFFmE3279 0 :Mf1_10 sf( )S3281 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (hoisting of the predicate in rule cb.)S85.2 100.667 M (A first effort to solve this problem is to rewrite rule c so as to place \"cb\" on the left edge of the production:)SFmE3281 0 :Mf2_10 sf( )S3287 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 114.667 M 0 0 300(c : \(\)                                    /* c1 */)FmTx132 124.667 M 0 0 300(  | ca {cb}                               /* c2 */)FmTx132 134.667 M 0 0 300(  | cb                                    /* c3 */)FmTx132 144.667 M 0 0 300(  ;                                       /* c4 */)FmTxFmE3287 0 :Mf1_10 sf( )S3289 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 160.667 M (The code generated for rule c now resembles:)SFmE3290 0 :Mf2_10 sf( )S3296 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 174.667 M 0 0 306(if \(LA\(1\)==ID\) {                           /* d1 */)FmTx132 184.667 M 0 0 306(  ;                                        /* d2 */)FmTx132 194.667 M 0 0 306(} else if \(LA\(1\)==ID && pa\(...\)\) {         /* d3 */)FmTx132 204.667 M 0 0 306(   ...                                     /* d4 */)FmTxFmE3296 0 :Mf1_10 sf( )S3298 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 220.666 M (It is clear that rules ca and cb are now unreachable because any ID will always match the test at line d1.  In fact, this )S85.2 232.666 M (will cause an error message because )SFmE3298 0 :Mf1_8 sf( )S3300 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP232.334 232.666 M (PCCTS)SFmE3300 0 :Mf1_10 sf( )S3302 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP256.791 232.666 M ( is able to recognize the problem.  The order of alternatives should be )S85.2 244.666 M (changed to:)SFmE3303 0 :Mf2_10 sf( )S3309 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 258.666 M 0 0 306(c : ca {cb}                                /* e1 */)FmTx132 268.666 M 0 0 306(  | cb                                     /* e2 */)FmTx132 278.666 M 0 0 306(  | \(\)                                     /* e3 */)FmTx132 288.666 M 0 0 306(  ;                                        /* e4 */)FmTxFmE3309 0 :Mf1_10 sf( )S3311 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 304.666 M (However our problems aren\325t over yet.  The code generate for the \"\(...\)*\" test in rule \"a\" resembles:)SFmE3311 0 :Mf2_10 sf( )S3317 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 318.666 M 0 0 354(while \( \(LA\(1\)==X || LA\(1\)==Eol || LA\(1\)==ID\) &&   /* f1 */)FmTx132 328.666 M 0 0 354(        \(pa\(...\) || pb\(...\)\)\) {                    /* f2 */)FmTx132 338.666 M 0 0 354(   ...                                             /* f3 */)FmTxFmE3317 0 :Mf1_10 sf( )S3319 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 352.666 M (If both pa and pb are false then the body of the rule is never entered even though it should match an X or and ID )S85.2 364.666 M (using the rule on line a2 when rule c derives epsilon. )S85.2 380.666 M (This can be fixed by using the )SFmE3320 0 :Mf1_8 sf( )S3322 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP208.22 380.666 M (ANTLR)SFmE3322 0 :Mf1_10 sf( )S3324 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP234.884 380.666 M ( \"-mrhoist on\" option which suppresses the test for pa and pb in rule \"a\" )S85.2 392.666 M (because ID is a viable alternative.  See Item )S(#140)S(.)S85.2 408.666 M (Contributed by Sigurdur Asgeirsson \(sigurasg@menandmice.com\).)S60 424.666 M (#140.)S2.7 N (Example of predicate hoisting and suppression with the )SFmE3324 0 :Mf1_8 sf( )S3326 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP309.575 424.666 M (ANTLR)SFmE3326 0 :Mf1_10 sf( )S3328 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP336.239 424.666 M ( option -mrhoist on)S85.2 440.666 M (Consider the following grammar fragment:)SFmE3329 0 :Mf2_10 sf( )S3335 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 454.666 M 0 0 222(a  : bc                      /* 2  */)FmTx132 464.666 M 0 0 222(   | d                       /* 3  */)FmTx132 474.666 M 0 0 222(   ;                         /* 4  */)FmTx132 484.666 M 0 0 222(bc : b                       /* 5  */)FmTx132 494.666 M 0 0 222(   | c                       /* 6  */)FmTx132 504.666 M 0 0 222(   ;                         /* 7  */)FmTx132 514.666 M 0 0 222(b  : <<pb\(LT\(1\)\)>>? ID ;     /* 8  */)FmTx132 524.666 M 0 0 222(c  : ID ;                    /* 9  */)FmTx132 534.666 M 0 0 222(d  : <<pd\(LT\(1\)\)>>? ID ;     /* 10 */)FmTxFmE3335 0 :Mf1_10 sf( )S3337 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 550.666 M (With no predicate context computation \(-prc off\) the generated code for rule \"a\" resembles:)SFmE3337 0 :Mf2_10 sf( )S3343 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 564.666 M 0 0 132(if \(LA\(1\)==ID && pb\) {)FmTx132 576.666 M 0 0 48(   bc\(\);)FmTx132 588.666 M 0 0 174(} else if \(LA\(1\)==ID && pd\) {)FmTx132 600.666 M 0 0 42(   d\(\);)FmTx132 612.666 M 0 0 30(} ...)FmTxFmE3343 0 :Mf1_10 sf( )S3345 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 626.666 M (The code for the first alternative is incorrect because c \(and therefore bc\) is still a viable choice when pb is false.)S85.2 638.666 M (With the default predicate context computation \(-prc on\) the generated code for rule \"a\" resembles:)SFmE3346 0 :Mf2_10 sf( )S3352 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 652.666 M 0 0 246(if \(LA\(1\)==ID && \(\(! LA\(1\)==ID\) || pb\)\) {)FmTx132 664.666 M 0 0 54(    bc\(\);)FmTx132 676.666 M 0 0 288(} else if \(LA\(1\)==ID && \(\(! LA\(1\)==ID\) || pd\)\) {)FmTx132 688.666 M 0 0 48(    d\(\);)FmTx132 698.666 M 0 0 30(} ...)FmTxFmE3352 0 :Mf1_10 sf( )S3354 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 714.666 M (This is more complex, but a close look at the code shows that this is no better than the code generated by -prc off.  )SFmEendp%%Page: 30 30%%BeginPageSetupinitializepage(Moog; page: 30 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC3354 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE3354 0 :Mf0_10 sf( )S3356 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (30)S7 FmP60 78 495 648 FmqFFmE3357 0 :Mf1_10 sf( )S3359 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (The extra code checks that the predicate pb is evaluated only when the lookahead is ID.  Since we always expect the )S85.2 96.667 M (predicate to be ID this provides no extra power. )S85.2 112.667 M (With option -mrhoist on the code generated for rule \"a\" resembles:)SFmE3359 0 :Mf2_10 sf( )S3365 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 126.667 M 0 0 96(if \(LA\(1\)==ID\) {)FmTx132 138.667 M 0 0 42(  bc\(\);)FmTx132 150.667 M 0 0 288(} else if \(LA\(1\)==ID && \(\(! LA\(1\)==ID\) || pd\)\) {)FmTx132 162.667 M 0 0 36(  d\(\);)FmTx132 174.667 M 0 0 30(} ...)FmTxFmE3365 0 :Mf1_10 sf( )S3367 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 188.667 M (This is the correct code sequence.  However, we have a warning:)SFmE3368 0 :Mf2_10 sf( )S3374 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 202.667 M 0 0 420(c.g\(2\) : warning: alt 1 line 2 and alt 2 line 3 of of the rule itself )FmTx96 212.667 M 0 0 444(     These alts have ambig lookahead sequences resolved by a predicate for)FmTx96 222.666 M 0 0 378(     the second choice. The second choice may not be reachable.)FmTx96 232.666 M 0 0 432(     You may want to use a complementary predicate or rearrange the alts)FmTxFmE3374 0 :Mf1_10 sf( )S3376 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 246.666 M (The problem is that the prediction expression for bc in rule a will always match an ID.  This is the correct prediction )S85.2 258.666 M (expression because rule c is always viable when the lookahead is ID, but the alternative for rule d in rule a is no )S85.2 270.666 M (longer reachable when the lookahead is ID.  Hence the warning.)S85.2 286.666 M (We now return to the topic of predicate hoisting.  Using the )SFmE3376 0 :Mf1_8 sf( )S3378 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP325.952 286.666 M (ANTLR)SFmE3378 0 :Mf1_10 sf( )S3380 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP352.616 286.666 M ( -info p option we would find the following note )S85.2 298.666 M (in the generated code:)SFmEendp%%Page: 31 31%%BeginPageSetupinitializepage(Moog; page: 31 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC3381 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE3381 0 :Mf0_10 sf( )S3383 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (31)S7 FmP60 78 495 648 FmqFFmE3384 0 :Mf2_10 sf( )S3390 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 84.667 M 0 0 30(#if 0)FmTx96 104.667 M 0 0 396(Hoisting of predicate suppressed by alternative without predicate.)FmTx96 114.667 M 0 0 432(The alt without the predicate includes all cases where the predicate is )FmTx96 124.667 M 0 0 36(false.)FmTx96 144.667 M 0 0 180(   WITH predicate: line 5  c.g)FmTx96 154.667 M 0 0 198(   WITHOUT predicate: line 6  c.g)FmTx96 174.667 M 0 0 204(The context set for the predicate:)FmTx96 194.666 M 0 0 126(     ID              )FmTx96 214.666 M 0 0 366(The lookahead set for the alt WITHOUT the semantic predicate:)FmTx96 234.666 M 0 0 126(     ID              )FmTx96 254.666 M 0 0 84(The predicate:)FmTx96 274.666 M 0 0 144(  pred  <<  pb\(LT\(1\)\)>>?)FmTx96 284.666 M 0 0 300(                    depth=k=1  rule b  line 8  c.g)FmTx96 294.666 M 0 0 102(    set context: )FmTx96 304.666 M 0 0 138(       ID              )FmTx96 324.666 M 0 0 156(Chain of referenced rules:)FmTx96 344.666 M 0 0 246(    #0  in rule a \(line 2 c.g\) to rule bc)FmTx96 354.666 M 0 0 186(    #1  in rule bc \(line 5 c.g\))FmTx96 374.666 M 0 0 36(#endif)FmTx96 384.666 M 0 0 132(  if \( \(LA\(1\)==ID\) \) {)FmTx96 394.666 M 0 0 54(    bc\(\);)FmTx96 404.666 M 0 0 18(  })FmTx96 414.666 M 0 0 48(  else {)FmTx96 424.666 M 0 0 132(    if \( \(LA\(1\)==ID\)&&)FmTx96 434.666 M 0 0 30(#if 0)FmTx96 454.666 M 0 0 132(pred  <<  pd\(LT\(1\)\)>>?)FmTx96 464.666 M 0 0 294(                  depth=k=1  rule d  line 10  c.g)FmTx96 474.666 M 0 0 90(  set context: )FmTx96 484.666 M 0 0 126(     ID              )FmTx96 504.666 M 0 0 36(#endif)FmTx96 514.666 M 0 0 210(\(!\(\(\(LA\(1\)==ID\)\)\)||\(pd\(LT\(1\)\)\)\) \) {)FmTx96 524.666 M 0 0 60(      d\(\);)FmTx96 534.666 M 0 0 42(    ...)FmTxFmE3390 0 :Mf1_10 sf( )S3392 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 550.666 M (There are additional examples in the )SFmE3392 0 :Mf1_8 sf( )S3394 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP233.464 550.666 M (CHANGES_FROM_133*.TXT)SFmE3394 0 :Mf1_10 sf( )S3396 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP335.472 550.666 M ( files.)S60 566.666 M (#141.)S2.7 N (The context guard)SFmE3397 0 :Mf2_10 sf( )S3403 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP157.947 566.666 M 0 0 150( \(...\)? && <<predicate>>?)FmTxFmE3403 0 :Mf1_10 sf( )S3405 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP307.947 566.666 M (  vs. )SFmE3405 0 :Mf2_10 sf( )S3411 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP326.836 566.666 M 0 0 138(\(...\) => <<predicate>>?)FmTxFmE3411 0 :Mf1_10 sf( )S3413 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 582.666 M (The idea for the new \(...\)? && <<predicate>>? is due to Reinier van der Born \(reinier@vnet.ibm.com\))S85.2 598.666 M (The )SFmE3414 0 :Mf2_10 sf( )S3420 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 598.666 M 0 0 60(\(...\)? => )FmTxFmE3420 0 :Mf1_10 sf( )S3422 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP163.247 598.666 M (predicate guard does not apply the predicate if the context guard doesn\'t match, whereas the )SFmE3422 0 :Mf2_10 sf( )S3428 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 610.666 M 0 0 54(\(...\)? &&)FmTxFmE3428 0 :Mf1_10 sf( )S3430 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP139.2 610.666 M ( form requires both the predicate guard and the predicate to be true to make the alternative viable.  )S85.2 622.666 M (What is the significance ?)S85.2 638.666 M (If you have a predicate which is )SFmE3431 0 :Mf0_10 sf( )S3433 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP215.412 638.666 M (not)SFmE3433 0 :Mf1_10 sf( )S3435 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP228.191 638.666 M ( on the \"leading edge\" it cannot be hoisted.  Suppose you need a predicate that )S85.2 650.666 M (looks at LA\(2\).  You must introduce it manually.  The classic example is:)SFmE3436 0 :Mf2_10 sf( )S3442 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 664.666 M 0 0 150(castExpr : LP typeName RP)FmTx132 674.666 M 0 0 90(         | ....)FmTx132 684.666 M 0 0 60(         ;)FmTx132 704.666 M 0 0 222(typeName : <<isTypeName\(LT\(1\)\)>>?  ID)FmTx132 714.666 M 0 0 120(         | STRUCT ID)FmTxFmEendp%%Page: 32 32%%BeginPageSetupinitializepage(Moog; page: 32 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC3442 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE3442 0 :Mf0_10 sf( )S3444 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (32)S7 FmP60 78 495 648 FmqFFmE3445 0 :Mf2_10 sf( )S3451 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 84.667 M 0 0 60(         ;)FmTxFmE3451 0 :Mf1_10 sf( )S3453 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 100.667 M (The problem is that isTypeName\(\) isn\'t on the leading edge of castExpr because of the LP which precedes it.  Thus )S85.2 112.667 M (it will not be hoisted into the prediction expression for castExpr. The )SFmE3453 0 :Mf0_10 sf( )S3455 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP363.169 112.667 M (first)SFmE3456 0 :Mf1_10 sf( )S3458 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP379.282 112.667 M ( attempt to fix it is:)SFmE3458 0 :Mf2_10 sf( )S3464 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 126.667 M 0 0 288(castExpr : <<isTypeName\(LT\(2\)\)>>? LP typeName RP)FmTx132 136.667 M 0 0 90(         | ....)FmTx132 146.667 M 0 0 60(         ;)FmTxFmE3464 0 :Mf1_10 sf( )S3466 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 162.667 M (Unfortunately, this won\'t work because it ignores the problem of STRUCT.  The solution is to apply isTypeName\(\) )S85.2 174.667 M (in castExpr if LA\(2\) is an ID and don\'t apply it when LA\(2\) is STRUCT:)SFmE3467 0 :Mf2_10 sf( )S3473 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 188.667 M 0 0 360(castExpr : \(LP ID\)? => <<isTypeName\(LT\(2\)\)>>? LP typeName RP)FmTx132 198.667 M 0 0 90(         | ....)FmTx132 208.667 M 0 0 60(         ;)FmTxFmE3473 0 :Mf1_10 sf( )S3475 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 224.666 M (In conclusion, the \"=>\" style guarded predicate is useful when:)S96 240.666 M (a. The tokens required for the predicate are not on the leading edge.)S96 256.666 M (b. there are alternatives in the expression selected by the predicate for which the predicate is inappropriate.)S85.2 272.666 M (If \(b\) were false, then one could use a simple predicate \(assuming \"-prc on\"\):)SFmE3475 0 :Mf2_10 sf( )S3481 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 286.666 M 0 0 288(castExpr : <<isTypeName\(LT\(2\)\)>>? LP typeName RP)FmTx132 296.666 M 0 0 90(         | ....)FmTx132 306.666 M 0 0 60(         ;)FmTx132 326.666 M 0 0 222(typeName : <<isTypeName\(LT\(1\)\)>>?  ID)FmTx132 336.666 M 0 0 60(         ;)FmTxFmE3481 0 :Mf1_10 sf( )S3483 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 352.666 M (So, when do you use the \"&&\" style guarded predicate ? The new-style \"&&\" predicate should always be used with )S85.2 364.666 M (predicate context.  The context guard is in )SFmE3484 0 :Mf0_10 sf( )S3486 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP255.964 364.666 M (addition)SFmE3486 0 :Mf1_10 sf( )S3488 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP289.299 364.666 M ( to the automatically computed context.  Thus it useful for )S85.2 376.666 M (predicates which depend on the token type for reasons other than context.)S85.2 392.666 M (The following example is contributed by Reinier van den Born.)S85.2 408.666 M (This grammar has two ways to call functions: )S96 424.666 M (A \"standard\" call syntax with parens and comma separated arguments.)S96 436.666 M (A shell command like syntax \(no parens and spaces separate arguments\).)S85.2 452.666 M (The former allows a variable to hold the name of the function, the latter can be used to call external commands.  The )S85.2 464.666 M (grammar \(simplified\) looks like this: )SFmE3489 0 :Mf2_10 sf( )S3495 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 476.666 M 0 0 444(                                                                          )FmTx96 486.666 M 0 0 288(fun_call   :     ID \"\(\" { expr \(\",\" expr\)* } \"\)\")FmTx96 496.666 M 0 0 336(                               /* ID is function name */)FmTx96 506.666 M 0 0 288(           | \"@\" ID \"\(\" { expr \(\",\" expr\)* } \"\)\")FmTx96 516.666 M 0 0 396(                               /* ID is var containing fun name */)FmTx96 526.666 M 0 0 72(           ;)FmTx96 546.666 M 0 0 336(command    : ID expr*          /* ID is function name */)FmTx96 556.666 M 0 0 396(           | path expr*        /* path is external command name */)FmTx96 566.666 M 0 0 72(           ;)FmTx96 586.666 M 0 0 372(path       : ID                /* left out slashes and such */)FmTx96 596.666 M 0 0 348(           | \"@\" ID            /* ID is environment var */)FmTx96 606.666 M 0 0 72(           ;)FmTx96 626.666 M 0 0 102(expr       : ....)FmTx96 636.666 M 0 0 162(           | \"\(\" expr \"\)\"; )FmTx96 656.666 M 0 0 126(call       : fun_call)FmTx96 666.666 M 0 0 120(           | command)FmTx96 676.666 M 0 0 78(           ; )FmTxFmE3495 0 :Mf1_10 sf( )S3497 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 692.666 M (Obviously the call is wildly ambiguous. This is more or less how this is to be resolved: )S85.2 708.666 M (A call begins with an ID or an \"@\" followed by an ID. )SFmEendp%%Page: 33 33%%BeginPageSetupinitializepage(Moog; page: 33 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC3497 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE3497 0 :Mf0_10 sf( )S3499 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (33)S7 FmP60 78 495 648 FmqFFmE3500 0 :Mf1_10 sf( )S3502 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 84.667 M (If it is an ID and)S(:)S132 100.667 M (a. it is an external command name  => command)S132 112.667 M (b. it is followed by a paren => fun_call )S132 124.667 M (c. otherwise => command)S96 140.667 M (If it is an @  and:)S132 156.667 M (a. the ID is a var name => fun_call)S132 168.667 M (b. otherwise => command)S85.2 184.667 M (One can implement these rules quite neatly using && predicates:)SFmE3502 0 :Mf2_10 sf( )S3508 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 198.667 M 0 0 336(call       : \(\"@\" ID\)? && <<isVarName\(LT\(2\)\)>>? fun_call)FmTx96 208.667 M 0 0 336(           | \(ID\)?     && <<isExtCmdName>>?     command )FmTx96 218.667 M 0 0 336(           | \(ID \"\(\"\)?                          fun_call)FmTx96 228.666 M 0 0 330(           |                                    command)FmTx96 238.666 M 0 0 78(           ; )FmTxFmE3508 0 :Mf1_10 sf( )S3510 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 254.666 M (#142.)S2.7 N (Experimental )SFmE3511 0 :Mf1_8 sf( )S3513 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP141.565 254.666 M (ANTLR)SFmE3513 0 :Mf1_10 sf( )S3515 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168.229 254.666 M ( option -mrhoistk on for suppression of predicates with lookahead depth )SFmE3515 0 :Mf0_10 sf( )S3517 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP458.973 254.666 M (k)SFmE3518 0 :Mf1_10 sf( )S3520 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP463.412 254.666 M ( > 1)S85.2 270.666 M (The )SFmE3520 0 :Mf1_8 sf( )S3522 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 270.666 M (ANTLR)SFmE3522 0 :Mf1_10 sf( )S3524 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP129.911 270.666 M ( option -mrhoist provides fairly complete handling of predicates with lookahead depth of 1.  The )S85.2 282.666 M (handling of predicates with lookahead depth greater than one is more complicated and the solution provided by )SFmE3525 0 :Mf1_8 sf( )S3527 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 294.666 M (PCCTS)SFmE3527 0 :Mf1_10 sf( )S3529 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP109.657 294.666 M ( is good, but not complete.)S85.2 310.666 M (Consider the following grammar with -ck 2 and the predicate in rule \"a\" with depth 2:)SFmE3529 0 :Mf2_10 sf( )S3535 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 324.666 M 0 0 282(r1  : \(ab\)* \"@\" ;                       /* 2 */)FmTx132 334.666 M 0 0 282(ab  : a                                 /* 3 */)FmTx132 344.666 M 0 0 282(    | b                                 /* 4 */)FmTx132 354.666 M 0 0 282(    ;                                   /* 5 */)FmTx132 364.666 M 0 0 282(a   : \(A B\)? => <<p\(LT\(2\)>>? A B C ;    /* 6 */)FmTx132 374.666 M 0 0 282(b   : A B C ;                           /* 7 */)FmTxFmE3535 0 :Mf1_10 sf( )S3537 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 390.666 M (Without \"-mrhoistk on\" the predicate would be hoisted into rule r1 in order to determine whether to call rule \"ab\".  )S85.2 402.666 M (However it should )SFmE3538 0 :Mf0_10 sf( )S3540 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP161.567 402.666 M (not)SFmE3540 0 :Mf1_10 sf( )S3542 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP174.346 402.666 M ( be hoisted because, even if p is false, there is a valid alternative in rule b.  With \"-mrhoistk )S85.2 414.666 M (on\" the predicate will be suppressed.)S85.2 430.666 M (With the \"-mrhoistk on\" and \"-info p\" the following information will appear in the generated code:)SFmE3543 0 :Mf2_10 sf( )S3549 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 442.666 M 0 0 108(while \( \(LA\(1\)==A\))FmTx96 452.666 M 0 0 30(#if 0)FmTx96 472.666 M 0 0 456(Part \(or all\) of predicate with depth > 1 suppressed by alternative without )FmTx96 482.666 M 0 0 54(predicate)FmTx96 502.666 M 0 0 120(pred  <<  p\(LT\(2\)>>?)FmTx96 512.666 M 0 0 378(                  depth=k=2  \(\"=>\" guard\)  rule a  line 6  t1.g)FmTx96 522.666 M 0 0 90(  tree context:)FmTx96 532.666 M 0 0 168(    \(root = A               )FmTx96 542.666 M 0 0 138(       B               )FmTx96 552.666 M 0 0 30(    \))FmTx96 572.666 M 0 0 282(The token sequence which is suppressed: \( A B \))FmTx96 582.666 M 0 0 396(The sequence of references which generate that sequence of tokens:)FmTx96 602.666 M 0 0 228(   1 to ab       r1/1    line 2   t1.g)FmTx96 612.666 M 0 0 228(   2 ab          ab/1    line 3   t1.g)FmTx96 622.666 M 0 0 228(   3 to b        ab/2    line 4   t1.g)FmTx96 632.666 M 0 0 228(   4 b           b/1     line 7   t1.g)FmTx96 642.666 M 0 0 228(   5 #token A    b/1     line 7   t1.g)FmTx96 652.666 M 0 0 228(   6 #token B    b/1     line 7   t1.g)FmTx96 672.666 M 0 0 36(#endif)FmTx96 682.666 M 0 0 24( \) {)FmTx96 692.666 M 0 0 66(      ab\(\);)FmTx96 702.666 M 0 0 30(    })FmTx96 712.666 M 0 0 18(  })FmTxFmEendp%%Page: 34 34%%BeginPageSetupinitializepage(Moog; page: 34 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC3549 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE3549 0 :Mf0_10 sf( )S3551 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (34)S7 FmP60 78 495 648 FmqFFmE3552 0 :Mf1_10 sf( )S3554 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (There is a second, more complex, example of the -mrhoistk option in the )SFmE3554 0 :Mf1_8 sf( )S3556 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP378.711 84.667 M (CHANGES_FROM_133*.TXT)SFmE3556 0 :Mf1_10 sf( )S3558 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP480.719 84.667 M ( file.)S60 100.667 M (#143.)S2.7 N ( Use #pred statement to describe the logical relationship of related predicates)S85.2 116.667 M (A problem with predicates is that each one is regarded as unique and capable of disambiguating cases where two )S85.2 128.667 M (alternatives have identical lookahead.  For example, consider:)SFmE3559 0 :Mf2_10 sf( )S3565 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 142.667 M 0 0 174(rule : <<pred\(LATEXT\(1\)\)>>? A)FmTx132 152.667 M 0 0 174(     | <<pred\(LATEXT\(1\)\)>>? A)FmTx132 162.667 M 0 0 36(     ;)FmTxFmE3565 0 :Mf1_10 sf( )S3567 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 178.667 M (Even though the two alternatives are identical, this will not cause any error messages or warnings to be issued by the )S85.2 190.667 M (original versions of )SFmE3567 0 :Mf1_8 sf( )S3569 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP165.451 190.667 M (PCCTS)SFmE3569 0 :Mf1_10 sf( )S3571 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP189.908 190.667 M (.  One could compare the text of the predicate, but this is not a robust or satisfactory )S85.2 202.667 M (solution.)S85.2 218.667 M (The #pred statement allows one to give a symbolic name to a \"predicate literal\" or a \"predicate expression\" in order )S85.2 230.666 M (to refer to it in other predicate expressions or in the rules of the grammar.)S85.2 246.666 M (The predicate literal associated with a predicate symbol is C or C++ code which can be used to test the condition.  A )S85.2 258.666 M (predicate expression defines a predicate symbol in terms of other predicate symbols using \"!\", \"&&\", and \"||\".  A )S85.2 270.666 M (predicate symbol can be defined in terms of a predicate literal, a predicate expression, or both.)S85.2 286.666 M (When a predicate symbol is defined with both a predicate literal and a predicate expression, the predicate literal is )S85.2 298.666 M (used to generate code, but the predicate expression is used to check for two alternatives with identical predicates in )S85.2 310.666 M (both alternatives.)S85.2 326.666 M (Here are some examples of #pred statements:)SFmE3572 0 :Mf2_10 sf( )S3578 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 340.666 M 0 0 264(#pred  IsLabel       <<isLabel\(LATEXT\(1\)\)>>?)FmTx96 350.666 M 0 0 282(#pred  IsLocalVar    <<isLocalVar\(LATEXT\(1\)\)>>?)FmTx96 360.666 M 0 0 282(#pred  IsGlobalVar   <<isGlobalVar\(LATEXT\(1\)>>?)FmTx96 370.666 M 0 0 444(#pred  IsVar         <<isVar\(LATEXT\(1\)\)>>?       IsLocalVar || IsGlobalVar)FmTx96 380.666 M 0 0 420(#pred  IsScoped      <<isScoped\(LATEXT\(1\)\)>>?    IsLabel || IsLocalVar)FmTxFmE3578 0 :Mf1_10 sf( )S3580 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 396.666 M (The predicate IsLocalVar is related to IsGlobalVar \(See the definition of IsVar\).  The #pred attempts to capture this )S85.2 408.666 M (for use in analyzing the predicates appearing that appear in prediction expressions.  This is discussed in more detail )S85.2 420.666 M (in the file )SFmE3580 0 :Mf1_8 sf( )S3582 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP126.018 420.666 M (CHANGES_FROM_133_BEFORE_MR13.TXT.)SFmE3582 0 :Mf1_10 sf( )S3584 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 436.666 M (#144.)S2.7 N (Disable predicate hoisting explicitly using the pseudo-action: )SFmE3585 0 :Mf2_10 sf( )S3591 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP332.624 436.666 M 0 0 162(rule: <<;>> <<nohoist>> ...)FmTxFmE3591 0 :Mf1_10 sf( )S3593 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 452.666 M (A common error, even among experienced )SFmE3593 0 :Mf1_8 sf( )S3595 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP258.728 452.666 M (PCCTS)SFmE3595 0 :Mf1_10 sf( )S3597 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP283.185 452.666 M ( users, is to code an init-action to inhibit hoisting rather than a )S85.2 464.666 M (leading action. An init-action does not inhibit hoisting.)S85.2 480.666 M (This was coded:)SFmE3598 0 :Mf2_10 sf( )S3604 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 494.666 M 0 0 114(rule1 : <<;>> rule2)FmTxFmE3604 0 :Mf1_10 sf( )S3606 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 508.666 M (This is what was meant:)SFmE3606 0 :Mf2_10 sf( )S3612 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 522.666 M 0 0 150(rule1 : <<;>> <<;>> rule2)FmTxFmE3612 0 :Mf1_10 sf( )S3614 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 536.666 M (Now the user can code:)SFmE3615 0 :Mf2_10 sf( )S3621 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 550.666 M 0 0 186(rule1 : <<;>> <<nohoist>> rule2)FmTxFmE3621 0 :Mf1_10 sf( )S3623 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 564.666 M (The following will give an error message:)SFmE3623 0 :Mf2_10 sf( )S3629 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 578.666 M 0 0 150(rule1 : <<nohoist>> rule2)FmTxFmE3629 0 :Mf1_10 sf( )S3631 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 592.666 M (If the <<nohoist>> appears as an init-action rather than a leading action an error message is issued. )S60 608.666 M (#145.)S2.7 N (Simplification of predicate expressions when there are multiple references to predicates)S85.2 624.666 M (When a rule containing a semantic predicate is referenced by more than one alternative of a grandparent rule or )S85.2 636.666 M (other ancestor, a large numbers of semantic predicate references can sometimes be generated.  An effort has been )S85.2 648.666 M (made to simplify some of them.  The table below summarized the kind of simplification performed.  In the table, X )S85.2 660.666 M (and Y stand for single predicates \(not trees\).)SFmE3632 0 :Mf2_10 sf( )S3638 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 674.666 M 0 0 276(\(OR X \(OR Y \(OR Z\)\)\)             => \(OR X Y Z\))FmTx132 684.666 M 0 0 282(\(AND X \(AND Y \(AND Z\)\)\)          => \(AND X Y Z\))FmTx132 696.666 M 0 0 330(\(OR X  \(... \(OR  X Y\) ... \)\)     => \(OR X \(... Y ... \)\))FmTx132 706.666 M 0 0 336(\(AND X \(... \(AND X Y\) ... \)\)     => \(AND X \(... Y ... \)\))FmTx132 716.666 M 0 0 324(\(OR X  \(... \(AND X Y\) ... \)\)     => \(OR X \(...  ... \)\))FmTxFmEendp%%Page: 35 35%%BeginPageSetupinitializepage(Moog; page: 35 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC3638 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE3638 0 :Mf0_10 sf( )S3640 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (35)S7 FmP60 78 495 648 FmqFFmE3641 0 :Mf2_10 sf( )S3647 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 84.667 M 0 0 330(\(AND X \(... \(OR  X Y\) ... \)\)     => \(AND X \(...  ... \)\))FmTx132 96.667 M 0 0 222(\(AND X\)                          => X)FmTx132 106.667 M 0 0 222(\(OR X\)                           => X)FmTxFmE60 127 495 12 rC3647 0 :MFrMacBegin60 128 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 129 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC3647 0 :Mf1_10 sf( )S3649 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 124.667 M (Debugging Tips for New Users of )SFmE3650 0 :Mf1_8 sf( )S3652 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP198.835 124.667 M (PCCTS)SFmE3652 0 :Mf1_10 sf( )S3654 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 148.667 M (#146.)S2.7 N (A syntax error with quotation marks on separate lines means a problem with newline)SFmE3654 0 :Mf2_10 sf( )S3660 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 162.667 M 0 0 150(line 1: syntax error at \")FmTx96 172.667 M 0 0 72(\" missing ID)FmTxFmE3660 0 :Mf1_10 sf( )S3662 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 188.667 M (#147.)S2.7 N (Use the )SFmE3663 0 :Mf1_8 sf( )S3665 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.964 188.667 M (ANTLR)SFmE3665 0 :Mf1_10 sf( )S3667 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.628 188.667 M ( \320gd switch to debug via rule trace)S60 204.667 M (#148.)S2.7 N (Use the )SFmE3667 0 :Mf1_8 sf( )S3669 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.964 204.667 M (ANTLR)SFmE3669 0 :Mf1_10 sf( )S3671 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.628 204.667 M ( \320gs switch to generate code with symbolic names for token tests)S60 220.667 M (#149.)S2.7 N (How to track )SFmE3672 0 :Mf1_8 sf( )S3674 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP139.9 220.667 M (DLG)SFmE3674 0 :Mf1_10 sf( )S3676 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP156.341 220.667 M ( results)S85.2 236.667 M (If the pre-processor symbol )SFmE3676 0 :Mf1_8 sf( )S3678 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP197.922 236.667 M (DEBUG_LEXER)SFmE3678 0 :Mf1_10 sf( )S3680 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP255.25 236.667 M ( is defined when )SFmE3681 0 :Mf1_8 sf( )S3683 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP323.558 236.667 M (DLG)SFmE3683 0 :Mf1_10 sf( )S3685 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP340 236.667 M (LexerBase is compiled it will include code to assist )S85.2 248.667 M (in debugging your lexer.  To turn on the debug output:)SFmE3685 0 :Mf2_10 sf( )S3691 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 262.667 M 0 0 306(previousDebugValue=lexer.debugLexer\(newDebugValue\);)FmTxFmE3691 0 :Mf1_10 sf( )S3693 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 276.667 M (A value of 1 enables the debug output while a value of 0 disables output.)S60 292.667 M (#150.)S2.7 N (For complex problems use traceOption and traceGuessOption to control trace output)SFmE60 315 495 11 rC3694 0 :MFrMacBegin60 316 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 317 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC3694 0 :Mf1_10 sf( )S3696 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 312.667 M (Switches and Options)S60 336.667 M (#151.)S2.7 N (Use )SFmE3697 0 :Mf1_8 sf( )S3699 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 336.667 M (ANTLR)SFmE3699 0 :Mf1_10 sf( )S3701 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP129.911 336.667 M ( \320gx switch to suppress regeneration of the )SFmE3701 0 :Mf1_8 sf( )S3703 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP303.737 336.667 M (DLG)SFmE3703 0 :Mf1_10 sf( )S3705 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP320.178 336.667 M ( code and recompilation of )SFmE3706 0 :Mf1_8 sf( )S3708 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP429.856 336.667 M (DLG)SFmE3708 0 :Mf1_10 sf( )S3710 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP446.297 336.667 M (Lexer.cpp)S85.2 352.667 M (It is possible to maintain separate grammar files for the )SFmE3710 0 :Mf1_8 sf( )S3712 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP308.437 352.667 M (DLG)SFmE3712 0 :Mf1_10 sf( )S3714 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP324.879 352.667 M ( definitions of #tokens and the )SFmE3715 0 :Mf1_8 sf( )S3717 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP448.736 352.667 M (ANTLR)SFmE3717 0 :Mf1_10 sf( )S3719 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP475.4 352.667 M ( definition of rules )S85.2 364.667 M (so that the )SFmE3719 0 :Mf1_8 sf( )S3721 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP128.801 364.667 M (DLG)SFmE3721 0 :Mf1_10 sf( )S3723 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP145.242 364.667 M ( related code \(and routines having dependence on tokens.h\) need not be re-compiled just because of a )S85.2 376.667 M (change in a rule\325s action.)S60 392.667 M (#152.)S2.7 N (Can\325t use an interactive scanner \()SFmE3724 0 :Mf1_8 sf( )S3726 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP218.735 392.667 M (ANTLR)SFmE3726 0 :Mf1_10 sf( )S3728 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP245.399 392.667 M ( \320gk option\) with )SFmE3728 0 :Mf1_8 sf( )S3730 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP317.059 392.667 M (ANTLR)SFmE3730 0 :Mf1_10 sf( )S3732 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP343.723 392.667 M ( infinite lookahead)S60 408.666 M (#153.)S2.7 N (To make )SFmE3733 0 :Mf1_8 sf( )S3735 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP122.964 408.666 M (DLG)SFmE3735 0 :Mf1_10 sf( )S3737 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP139.405 408.666 M ( case insensitive use the )SFmE3737 0 :Mf1_8 sf( )S3739 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP237.423 408.666 M (DLG)SFmE3739 0 :Mf1_10 sf( )S3741 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP253.864 408.666 M ( \320ci switch)S85.2 424.666 M (The analyzer does not change the text, it just ignores case when matching it against the regular expressions.)S60 440.666 M (#154.)S2.7 N ( Use )SFmE3742 0 :Mf1_8 sf( )S3744 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP105.747 440.666 M (ANTLR)SFmE3744 0 :Mf1_10 sf( )S3746 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132.411 440.666 M ( option -glms to convert Microsoft file names like \"..\\foo.g\" to \"../foo.g\" in generated files)S60 456.666 M (#155.)S2.7 N (Use )SFmE3746 0 :Mf1_8 sf( )S3748 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 456.666 M (ANTLR)SFmE3748 0 :Mf1_10 sf( )S3750 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP129.911 456.666 M ( option -treport )SFmE3751 0 :Mf0_10 sf( )S3753 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP192.946 456.666 M (number)SFmE3753 0 :Mf1_10 sf( )S3755 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP223.492 456.666 M ( to locate alternatives using a lot of CPU time to resolve)S85.2 472.666 M (It can be difficult to determine which alternatives are causing )SFmE3756 0 :Mf1_8 sf( )S3758 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP332.854 472.666 M (PCCTS)SFmE3758 0 :Mf1_10 sf( )S3760 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP357.311 472.666 M ( to work hard to resolve an ambiguity.  In some )S85.2 484.666 M (cases the ambiguity is successfully resolved after much CPU time so there is no message at all.)S85.2 500.666 M (A rough measure of the amount of work being performed which is independent of the CPU speed and system load is )S85.2 512.666 M (the number of tnodes created.  Using \"-info t\" gives information about the total number of tnodes created and the )S85.2 524.666 M (peak number of tnodes. )SFmE3760 0 :Mf2_10 sf( )S3766 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 538.666 M 0 0 276(Tree Nodes:  peak 1300k  created 1416k  lost 0)FmTxFmE3766 0 :Mf1_10 sf( )S3768 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 552.666 M (It also puts in the generated C or C++ file the number of tnodes created for a rule \(at the end of the rule\).  However )S85.2 564.666 M (this information is not sufficient to locate the alternatives within a rule which are causing the creation of tnodes.)S85.2 580.666 M (Using:)SFmE3769 0 :Mf2_10 sf( )S3775 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 594.666 M 0 0 156(antlr -treport 100000 ....)FmTxFmE3775 0 :Mf1_10 sf( )S3777 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 608.666 M (causes antlr to list on stdout any alternatives which require the creation of more than 100,000 tnodes, along with the )S85.2 620.666 M (lookahead sets for those alternatives.)S60 636.666 M (#156.)S2.7 N (The )SFmE3777 0 :Mf1_8 sf( )S3779 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 636.666 M (ANTLR)SFmE3779 0 :Mf1_10 sf( )S3781 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP129.911 636.666 M ( option -info \( p - predicate, t - tnodes, m - monitor, f - follow set, o - orphans\))S85.2 652.666 M (The )SFmE3782 0 :Mf1_8 sf( )S3784 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 652.666 M (ANTLR)SFmE3784 0 :Mf1_10 sf( )S3786 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP129.911 652.666 M ( -info options may be combined and may appear in any order:)SFmE3786 0 :Mf2_10 sf( )S3792 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 666.666 M 0 0 282(antlr -info ptm -CC -gt -mrhoist on mygrammar.g)FmTxFmEendp%%Page: 36 36%%BeginPageSetupinitializepage(Moog; page: 36 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC3792 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE3792 0 :Mf0_10 sf( )S3794 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (36)S7 FmP60 78 495 648 FmqFFmE3795 0 :Mf1_10 sf( )S3797 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (Summary:)S96 100.667 M (-info p)S9.066 N (Extra predicate information in generated file.)S96 116.667 M (-info t )S8.788 N (Information about tnode usage appears at the end of each rule in the generated file and on stderr.)S132 128.667 M (A tnode is used only when analyzing )SFmE3797 0 :Mf0_10 sf( )S3799 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP282.239 128.667 M (k)SFmE3800 0 :Mf1_10 sf( )S3802 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP286.678 128.667 M (>1 grammars.)S132 140.667 M (Compare with -treport )SFmE3802 0 :Mf0_10 sf( )S3804 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP223.907 140.667 M (number)SFmE3805 0 :Mf1_10 sf( )S3807 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP254.454 140.667 M (.)S96 156.667 M (-info m)S6.288 N (Monitor progress:)S132 172.667 M (Prints name of each rule as it is started.)S132 184.667 M (Flushes output at start of each rule.)S96 200.667 M (-info f)S10.739 N (First/follow set information sent to stdout.)S96 212.667 M (-info o)S9.066 N (\(letter o\) Orphan rules \(rules not referenced by any other rule\).)S96 228.667 M (-info 0)S9.066 N (\(digit zero\) No-operation)SFmE60 251 495 11 rC3807 0 :MFrMacBegin60 252 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 253 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC3807 0 :Mf1_10 sf( )S3809 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 248.666 M (Multiple Source Files)S60 272.667 M (#157.)S2.7 N (To see how to place main\(\) in a .cpp file rather than a grammar file \(\".g\"\) see pccts./testcpp/8/main.cpp)SFmE3810 0 :Mf2_10 sf( )S3816 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 286.667 M 0 0 114(#include \"tokens.h\")FmTx96 296.667 M 0 0 60(#include \")FmTxFmE3816 0 :Mf0_10 sf( )S3818 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP156 296.667 M (myParserClass)SFmE3818 0 :Mf2_10 sf( )S3824 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP217.099 296.667 M 0 0 18(.h\")FmTx96 306.667 M 0 0 126(#include \"DLGLexer.h\")FmTxFmE3824 0 :Mf1_10 sf( )S3826 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 322.666 M (#158.)S2.7 N (How to put file scope information into the second file of a grammar with two .g files )S85.2 338.666 M (If one did place a file scope action in the second file, )SFmE3827 0 :Mf1_8 sf( )S3829 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP298.711 338.666 M (ANTLR)SFmE3829 0 :Mf1_10 sf( )S3831 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP325.375 338.666 M ( would interpret it as the fail action of the last rule )S85.2 350.666 M (appearing in the first grammar file.)S85.2 366.666 M (To place file scope information in the second file #include the generated file in yet another file which has the file )S85.2 378.666 M (scope declarations.)SFmE60 401 495 11 rC3831 0 :MFrMacBegin60 402 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 403 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC3831 0 :Mf1_10 sf( )S3833 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 398.666 M (Source Code Format)S60 422.666 M (#159.)S2.7 N (To place the C right shift operator \">>\" inside an action use \"\\>\\>\")S85.2 438.666 M (If you forget to do this you\'ll get the error message:)SFmE3834 0 :Mf2_10 sf( )S3840 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 452.666 M 0 0 228(warning: Missing <<; found dangling >>)FmTxFmE3840 0 :Mf1_10 sf( )S3842 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 466.666 M (No special action is required for the shift left operator. )S60 482.666 M (#160.)S2.7 N (One can continue a regular expression in a #token statement across lines \(or use flex definitions\))S85.2 498.666 M (One can continue an antlr #token definition across a line boundary, by using a backslash, but if your regular )S85.2 510.666 M (expressions are that long, it might be wiser to use flex, which allows the definition of elements which can be )S85.2 522.666 M (combined to create complex regular expressions.)S60 538.666 M (#161.)S2.7 N (A #token without an action will attempt to swallow an action which immediately follows it - use \";\")S85.2 554.666 M (This is a minor problem when the #token is created for use with attributes or ASTs nodes and has no regular )S85.2 566.666 M (expression:)SFmE3842 0 :Mf2_10 sf( )S3848 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 580.666 M 0 0 96(#token  CastExpr)FmTx132 590.666 M 0 0 126(#token  SubscriptExpr)FmTx132 600.666 M 0 0 120(#token  ArgumentList)FmTx132 610.666 M 0 0 12(<<)FmTx132 620.666 M 0 0 162(... Code related to parsing)FmTx132 630.666 M 0 0 12(>>)FmTxFmE3848 0 :Mf1_10 sf( )S3850 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 646.666 M (You\'ll receive the message:)SFmE3851 0 :Mf2_10 sf( )S3857 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 660.666 M 0 0 300(warning: action cannot be attached to a token name)FmTx96 670.666 M 0 0 210(        \(...token name...\); ignored)FmTxFmE3857 0 :Mf1_10 sf( )S3859 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 686.666 M (To solve this problem one is now allowed to end a #token definition with a \";\":)SFmE3859 0 :Mf2_10 sf( )S3865 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 698.666 M 0 0 132(#token  ArgumentList ;)FmTxFmEendp%%Page: 37 37%%BeginPageSetupinitializepage(Moog; page: 37 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC3865 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE3865 0 :Mf0_10 sf( )S3867 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (37)S7 FmP60 78 495 648 FmqFFmE60 87 495 12 rC3868 0 :MFrMacBegin60 88 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 89 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC3868 0 :Mf1_10 sf( )S3870 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (Miscellaneous)S60 108.667 M (#162.)S2.7 N (A grammar may contain multiple start rules.  They aren\325t declared.)S60 124.667 M (#163.)S2.7 N (Given )SFmE3871 0 :Mf2_10 sf( )S3877 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP112.136 124.667 M 0 0 126(rule[A a,B b] > [X x])FmTxFmE3877 0 :Mf1_10 sf( )S3879 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP238.136 124.667 M ( the proto is )SFmE3879 0 :Mf2_10 sf( )S3885 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP288.126 124.667 M 0 0 222(X rule\(ASTBase* ast,int* sig,A a,B b\))FmTxFmE3885 0 :Mf1_10 sf( )S3887 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 140.667 M (The argument \"sig\" is the status value returned when using parser exception handling.)S85.2 156.667 M (If automatic generation of ASTs is not selected, exceptions are not in use, or there are no inheritance variables then )S85.2 168.667 M (the corresponding arguments are dropped from the argument list.  Thus with ASTs disabled, no parser exception )S85.2 180.667 M (support, and neither upward nor downward inheritance variables the prototype of a rule would be:)SFmE3888 0 :Mf2_10 sf( )S3894 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 194.667 M 0 0 66(void rule\(\))FmTxFmE3894 0 :Mf1_10 sf( )S3896 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 208.667 M (#164.)S2.7 N (To remake )SFmE3896 0 :Mf1_8 sf( )S3898 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP130.73 208.667 M (ANTLR)SFmE3898 0 :Mf1_10 sf( )S3900 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP157.394 208.667 M ( after changes to the source code use )SFmE3901 0 :Mf2_10 sf( )S3907 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP306.202 208.667 M 0 0 102(make -f makefile1)FmTxFmE3907 0 :Mf1_10 sf( )S3909 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 224.667 M (The first problem with the standard makefile is that generic.h does not appear in the dependency lists.  The second )S85.2 236.667 M (problem is that the rebuild of antlr.c from antlr.g and of scan.c from parser.dlg have been commented out so as to )S85.2 248.667 M (allow building )SFmE3909 0 :Mf1_8 sf( )S3911 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP145.749 248.667 M (ANTLR)SFmE3911 0 :Mf1_10 sf( )S3913 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP172.413 248.667 M ( on a machine without )SFmE3914 0 :Mf1_8 sf( )S3916 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP263.778 248.667 M (ANTLR)SFmE3916 0 :Mf1_10 sf( )S3918 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP290.442 248.667 M ( the first time when there are problems with zip restoring )S85.2 260.667 M (modification dates for files.)S60 276.667 M (#165.)SFmE3918 0 :Mf1_8 sf( )S3920 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 276.667 M (ANTLR)SFmE3920 0 :Mf1_10 sf( )S3922 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 276.667 M ( reports \"... action buffer overflow ...\")S85.2 292.667 M (There are several approaches:)S96 308.667 M (Usually one can bypass this problem with several consecutive action blocks. Contributed by M.T. Richter )S96 320.666 M (\(mtr@ottawa.com\).)S96 336.666 M (One can place the code in a separate file and use #include.  Contributed by Dave Seidel.)S96 352.666 M (One can add -DZZLEXBUFSIZE=)SFmE3923 0 :Mf0_10 sf( )S3925 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP236.864 352.666 M (value)SFmE3925 0 :Mf1_10 sf( )S3927 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP258.52 352.666 M ( to the command line. )S60 368.666 M (#166.)S2.7 N (Exception handling uses status codes and )SFmE3928 0 :Mf2_10 sf( )S3934 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP252.932 368.666 M 0 0 36(switch)FmTxFmE3934 0 :Mf1_10 sf( )S3936 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP288.932 368.666 M ( statements to unwind the stack rule by rule)S60 384.666 M (#167.)S2.7 N (For tokens with complex internal structure add #token expressions to match frequent errors)S85.2 400.666 M (Suppose one wants to match something like a floating point number, character literal, or string literal.  These have a )S85.2 412.666 M (complex internal structure.  It is possible to describe them exactly with )SFmE3936 0 :Mf1_8 sf( )S3938 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP370.93 412.666 M (DLG)SFmE3938 0 :Mf1_10 sf( )S3940 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP387.371 412.666 M (.  But is it wise to do so ?  Consider:)SFmE3941 0 :Mf2_10 sf( )S3947 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 428.666 M 0 0 24(\'\\ff)FmTxFmE3947 0 :Mf1_10 sf( )S3949 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP120 428.666 M (\'  for )SFmE3949 0 :Mf2_10 sf( )S3955 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP140.955 428.666 M 0 0 30(\'\\xff)FmTxFmE3955 0 :Mf1_10 sf( )S3957 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP170.955 428.666 M (\'  or  )SFmE3958 0 :Mf2_10 sf( )S3964 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP191.082 428.666 M 0 0 114(\"\\mThe result is: \")FmTxFmE3964 0 :Mf1_10 sf( )S3966 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP305.082 428.666 M ( for )SFmE3966 0 :Mf2_10 sf( )S3972 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP321.737 428.666 M 0 0 114(\"\\nThe result is: \")FmTxFmE3972 0 :Mf1_10 sf( )S3974 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 444.666 M (If )SFmE3975 0 :Mf1_8 sf( )S3977 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP94.355 444.666 M (DLG)SFmE3977 0 :Mf1_10 sf( )S3979 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP110.797 444.666 M ( fails to tolerate small errors like the ones above the result could be dozens of error messages as it searches for )S85.2 456.666 M (the closing quotation mark or apostrophe.)S85.2 472.666 M (One solution is to create additional #token definitions which recognize common errors and either generates an )S85.2 484.666 M (appropriate error message or return a special #token code such as \"Bad_String_Const\".  This can be combined with )S85.2 496.666 M (a special #lexclass which scans \(in a very tolerant manner\) to the end of the construct and generates no additional )S85.2 508.666 M (errors.  This is the approach used by John D. Mitchell \(johnm@jGuru.com\) in the recognizer for C character and )S85.2 520.666 M (string literals in Example )S(#1)S(.)S85.2 536.666 M (Another approach is to try to scan to the end of the token in the most forgiving way possible and then to validate the )S85.2 548.666 M (token\325s syntax  in the )SFmE3979 0 :Mf1_8 sf( )S3981 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP173.235 548.666 M (DLG)SFmE3981 0 :Mf1_10 sf( )S3983 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP189.676 548.666 M ( action routine.)S60 564.666 M (#168.)S2.7 N (See pccts/testcpp/2/test.g and testcpp/3/test.g for examples of how to integrate non-)SFmE3984 0 :Mf1_8 sf( )S3986 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP418.972 564.666 M (DLG)SFmE3986 0 :Mf1_10 sf( )S3988 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP435.413 564.666 M ( lexers with )SFmE3988 0 :Mf1_8 sf( )S3990 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP484.561 564.666 M (PCCTS)SFmE3990 0 :Mf1_10 sf( )S3992 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 580.666 M (The examples were written by Ariel Tamches \(tamches@cs.wisc.edu\).)S60 596.666 M (#169.)S2.7 N (Ambiguity, full LL\()SFmE3993 0 :Mf0_10 sf( )S3995 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP165.461 596.666 M (k)SFmE3995 0 :Mf1_10 sf( )S3997 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP169.9 596.666 M (\), and the linear approximation to LL\()SFmE3998 0 :Mf0_10 sf( )S4000 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP321.784 596.666 M (k)SFmE4000 0 :Mf1_10 sf( )S4002 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP326.223 596.666 M (\))S85.2 612.666 M (It took me a while to understand in an intuitive way the difference between full LL\()SFmE4003 0 :Mf0_10 sf( )S4005 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP419.783 612.666 M (k)SFmE4005 0 :Mf1_10 sf( )S4007 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP424.221 612.666 M (\) lookahead given by the )SFmE4008 0 :Mf1_8 sf( )S4010 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP525.576 612.666 M (ANTLR)SFmE4010 0 :Mf1_10 sf( )S4012 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP552.24 612.666 M ( )S85.2 624.666 M (\320k switch and the linear approximation given by the )SFmE4012 0 :Mf1_8 sf( )S4014 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP295.971 624.666 M (ANTLR)SFmE4014 0 :Mf1_10 sf( )S4016 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP322.636 624.666 M ( \320ck switch. Most of the time I run )SFmE4017 0 :Mf1_8 sf( )S4019 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP463.707 624.666 M (ANTLR)SFmE4019 0 :Mf1_10 sf( )S4021 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP490.371 624.666 M ( with  \320k 1 and )S85.2 636.666 M (\320ck 2.  Because I didn\'t understand the linear approximation I didn\'t understand the warnings about ambiguity.  I )S85.2 648.666 M (couldn\'t understand why )SFmE4021 0 :Mf1_8 sf( )S4023 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP185.586 648.666 M (ANTLR)SFmE4023 0 :Mf1_10 sf( )S4025 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP212.25 648.666 M ( would complain about something which I thought was obviously parse-able with )S85.2 660.666 M (the lookahead available.  I would try to make the messages go away totally, which was sometimes very hard.  If I )S85.2 672.666 M (had understood the linear approximation I might have been able to fix them easily or at least have realized that there )S85.2 684.666 M (was no problem with the grammar, just with the limitations of the linear approximation.)S85.2 700.666 M (I will restrict the discussion to the case of \"\320k 1\" and \"\320ck 2\".)S85.2 716.666 M ( Consider the following example:)SFmEendp%%Page: 38 38%%BeginPageSetupinitializepage(Moog; page: 38 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC4026 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE4026 0 :Mf0_10 sf( )S4028 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (38)S7 FmP60 78 495 648 FmqFFmE4029 0 :Mf2_10 sf( )S4035 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 84.667 M 0 0 216(rule1   : rule2a | rule2b | rule2c ;)FmTx96 94.667 M 0 0 162(rule2a  : A X | B Y | C Z ;)FmTx96 104.667 M 0 0 126(rule2b  : B X | B Z ;)FmTx96 114.667 M 0 0 90(rule2c  : C X ;)FmTxFmE4035 0 :Mf1_10 sf( )S4037 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 128.667 M (It should be clear that with the sentence being only two tokens this should be parseable with LL\(2\).)S85.2 144.667 M (Instead, because k=1 and ck=2 )SFmE4037 0 :Mf1_8 sf( )S4039 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP210.871 144.667 M (ANTLR)SFmE4039 0 :Mf1_10 sf( )S4041 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP237.535 144.667 M ( will produce the following messages:)SFmE4042 0 :Mf2_10 sf( )S4048 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 158.667 M 0 0 288(/pccts120/bin/antlr -k 1 -gs -ck 2 -gh example.g)FmTx96 168.667 M 0 0 294(ANTLR parser generator   Version 1.20   1989-1994)FmTx96 178.667 M 0 0 360(example.g, line 23: warning: alts 1 and 2 of the rule itself)FmTx96 188.667 M 0 0 228(         ambiguous upon { B }, { X Z })FmTx96 198.667 M 0 0 360(example.g, line 23: warning: alts 1 and 3 of the rule itself)FmTx96 208.666 M 0 0 216(         ambiguous upon { C }, { X })FmTxFmE4048 0 :Mf1_10 sf( )S4050 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 224.666 M (The code generated resembles the following:)SFmE4050 0 :Mf2_10 sf( )S4056 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 238.666 M 0 0 270(if      \(LA\(1\)==A || LA\(1\)==B || LA\(1\)==C\) &&)FmTx96 248.666 M 0 0 336(        \(LA\(2\)==X || LA\(2\)==Y || LA\(2\)==Z\) then rule2a\(\))FmTx96 258.666 M 0 0 126(else if \(LA\(1\)==B\) &&)FmTx96 268.666 M 0 0 264(        \(LA\(2\)==X || LA\(2\)==Z\) then rule2b\(\))FmTx96 278.666 M 0 0 126(else if \(LA\(1\)==C\) &&)FmTx96 288.666 M 0 0 192(        \(LA\(2\)==X\) then rule3a\(\))FmTx96 298.666 M 0 0 66(        ...)FmTxFmE4056 0 :Mf1_10 sf( )S4058 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 314.666 M (This might be called \"product-of-sums\".  There is an \"or\" part for LA\(1\), an \"or\" part for LA\(2\), and they are )S85.2 326.666 M (combined using \"and\".  To match, the first lookahead token must be in the first set and the second lookahead token )S85.2 338.666 M (must be in the second set.  It doesn\'t matter that what one really wants is: )SFmE4059 0 :Mf2_10 sf( )S4065 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 352.666 M 0 0 246(        if      \(LA\(1\)==A && LA\(2\)==X\) ||)FmTx96 362.666 M 0 0 246(                \(LA\(1\)==B && LA\(2\)==Y\) ||)FmTx96 372.666 M 0 0 312(                \(LA\(1\)==C && LA\(2\)==Z\) then rule2a\(\))FmTx96 382.666 M 0 0 246(        else if \(LA\(1\)==B && LA\(2\)==X\) ||)FmTx96 392.666 M 0 0 312(                \(LA\(1\)==B && LA\(2\)==Z\) then rule2b\(\))FmTx96 402.666 M 0 0 312(        else if \(LA\(1\)==C && LA\(2\)==X\) then rule2c\(\))FmTxFmE4065 0 :Mf1_10 sf( )S4067 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 418.666 M (The problem is that each product involves one element from LA\(1\) and one from LA\(2\) and as the number of )S85.2 430.666 M (possible tokens increases the number of terms grows as N)SFmE4067 0 :Mf1_8 sf( )S4069 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP316.501 426.666 M (2)SFmE4069 0 :Mf1_10 sf( )S4071 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP320.501 430.666 M (. With the linear approximation the number of terms )S85.2 442.666 M (grows \(surprise\) linearly in the number of tokens.)SFmE4072 0 :Mf1_8 sf( )S4074 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 458.666 M (ANTLR)SFmE4074 0 :Mf1_10 sf( )S4076 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.864 458.666 M ( won\'t do this with k=1 \(it would for k=2\).  It will only do \"product-of-sums\". However, all is not lost \321 you )S85.2 470.666 M (simply add a few well chosen semantic predicates which you have computed using your LL\()SFmE4076 0 :Mf0_10 sf( )S4078 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP455.62 470.666 M (k)SFmE4079 0 :Mf1_10 sf( )S4081 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP460.058 470.666 M (>1\), mobile, water-)S85.2 482.666 M (resistant, all purpose, guaranteed-for-a-lifetime, carbon based, analog computer.)S85.2 498.666 M (The linear approximation selects for each branch of the \"if\" a set which may include )SFmE4081 0 :Mf0_10 sf( )S4083 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP424.592 498.666 M (more)SFmE4084 0 :Mf1_10 sf( )S4086 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP445.139 498.666 M ( than what is wanted but )S85.2 510.666 M (never selects a )SFmE4086 0 :Mf0_10 sf( )S4088 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP145.993 510.666 M (subset)SFmE4089 0 :Mf1_10 sf( )S4091 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP170.989 510.666 M ( of the correct lookahead sets.  We simply insert a hand-coded version of the LL\(2\) )S85.2 522.666 M (computation.  It\'s ugly, especially in this case, but it fixes the problem.  In large grammars it may not be possible to )S85.2 534.666 M (run )SFmE4091 0 :Mf1_8 sf( )S4093 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP101.028 534.666 M (ANTLR)SFmE4093 0 :Mf1_10 sf( )S4095 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP127.692 534.666 M ( with k=2, so this fixes a few rules which cause problems.  The generated parser may run faster because it )S85.2 546.666 M (will have to evaluate fewer terms at execution time.)SFmE4096 0 :Mf2_10 sf( )S4102 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 560.666 M 0 0 60(        <<)FmTx96 570.666 M 0 0 156(        int use_rule2a\(\) {)FmTx96 580.666 M 0 0 282(          if \( LA\(1\)==A && LA\(2\)==X \) return 1;)FmTx96 590.666 M 0 0 282(          if \( LA\(1\)==B && LA\(2\)==Y \) return 1;)FmTx96 600.666 M 0 0 282(          if \( LA\(1\)==C && LA\(2\)==Z \) return 1;)FmTx96 610.666 M 0 0 114(          return 0;)FmTx96 620.666 M 0 0 54(        })FmTx96 630.666 M 0 0 60(        >>)FmTx96 642.666 M 0 0 372(        rule1   : <<use_rule2a\(\)>>? rule2a | rule2b | rule2c ;)FmTx96 652.666 M 0 0 210(        rule2a  : A X | B Y | C Z ;)FmTx96 662.666 M 0 0 174(        rule2b  : B X | B Z ;)FmTx96 672.666 M 0 0 138(        rule2c  : C X ;)FmTxFmE4102 0 :Mf1_10 sf( )S4104 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP276 688.666 M (Correction due to Monty Zukowski \(jaz@jGuru.com\))S85.2 704.666 M (The real cases I\'ve coded have shorter code sequences in the semantic predicate.  I coded this as a function to make )S85.2 716.666 M (it easier to read.  Another reason to use a function \(or macro\) is to make it easier to read the generated code to )SFmEendp%%Page: 39 39%%BeginPageSetupinitializepage(Moog; page: 39 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC4104 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE4104 0 :Mf0_10 sf( )S4106 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (39)S7 FmP60 78 495 648 FmqFFmE4107 0 :Mf1_10 sf( )S4109 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (determine when your semantic predicate is being hoisted too high.  It\'s easy to find references to a function name )S85.2 96.667 M (with the editor \321 but difficult to locate a particular sequence of \"LA\(1\)\" and \"LA\(2\)\" tests.  Predicate hoisting is a )S85.2 108.667 M (separate issue which is described in Item )S(#138)S(.)S85.2 124.667 M (In some cases of reported ambiguity it is not necessary to add semantic predicates because no )SFmE4109 0 :Mf0_10 sf( )S4111 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP461.706 124.667 M (valid)SFmE4112 0 :Mf1_10 sf( )S4114 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP481.701 124.667 M ( token sequence )S85.2 136.667 M (could get to the wrong rule. If the token sequence were invalid it would be detected by the grammar eventually, )S85.2 148.667 M (although perhaps not where one might wish.  In other cases the only necessary action is a reordering of the )S85.2 160.667 M (ambiguous rules so that a more specific rule is tested first.  The error messages still appear, but one can ignore them )S85.2 172.667 M (or place a trivial semantic predicate \(i.e. <<1>>? \) in front of the later rules.  This makes )SFmE4114 0 :Mf1_8 sf( )S4116 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP441.758 172.667 M (ANTLR)SFmE4116 0 :Mf1_10 sf( )S4118 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP468.422 172.667 M ( happy because it )S85.2 184.667 M (thinks you\'ve added a semantic predicate which fixes things. )S60 200.667 M (#170.)S2.7 N (Ambiguity, )SFmE4119 0 :Mf2_10 sf( )S4125 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP133.533 200.667 M 0 0 42(#pragma)FmTxFmE4125 0 :Mf1_10 sf( )S4127 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP175.533 200.667 M (, and )SFmE4127 0 :Mf1_8 sf( )S4129 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP197.471 200.667 M (ANTLR)SFmE4129 0 :Mf1_10 sf( )S4131 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP224.135 200.667 M ( -rl switch \(Contributed by John Lilley  jlilley@empathy.com\))SFmE4132 0 :Mf0_10 sf( )S4134 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 216.667 M (This note predates -treport \(Item )S(#155)S(\) and ambiguity aid \(Item )S(#54)S( ff.\).  However, it is still worth reading.)SFmE4134 0 :Mf1_10 sf( )S4136 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 232.666 M (A significant problem is the exhaustion of)SFmE4137 0 :Mf1_8 sf( )S4139 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP253.484 232.666 M ( ANTLR)SFmE4139 0 :Mf1_10 sf( )S4141 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP282.148 232.666 M (\'s lookahead-analysis resources, which is often related to the use of )SFmE4141 0 :Mf2_10 sf( )S4147 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 244.666 M 0 0 6(\()FmTxFmE4147 0 :Mf0_10 sf( )S4149 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP91.2 244.666 M (...)SFmE4150 0 :Mf2_10 sf( )S4156 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP98.7 244.666 M 0 0 12(\)*)FmTxFmE4156 0 :Mf1_10 sf( )S4158 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP110.7 244.666 M (. Without the )SFmE4158 0 :Mf2_10 sf( )S4164 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP165.69 244.666 M 0 0 18(-rl)FmTxFmE4164 0 :Mf1_10 sf( )S4166 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP183.69 244.666 M ( option, )SFmE4167 0 :Mf1_8 sf( )S4169 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP216.747 244.666 M (ANTLR)SFmE4169 0 :Mf1_10 sf( )S4171 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP243.411 244.666 M ( may consume a large, perhaps unlimited, amount of memory attempting to )S85.2 256.666 M (create the lookahead token sets for productions involving )SFmE4171 0 :Mf2_10 sf( )S4177 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP316.784 256.666 M 0 0 6(\()FmTxFmE4177 0 :Mf0_10 sf( )S4179 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP322.784 256.666 M (...)SFmE4180 0 :Mf2_10 sf( )S4186 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP330.284 256.666 M 0 0 12(\)*)FmTxFmE4186 0 :Mf1_10 sf( )S4188 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP342.284 256.666 M (.  If )SFmE4188 0 :Mf2_10 sf( )S4194 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP358.94 256.666 M 0 0 18(-rl)FmTxFmE4194 0 :Mf1_10 sf( )S4196 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP376.94 256.666 M ( is specified, then when )SFmE4197 0 :Mf1_8 sf( )S4199 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP473.571 256.666 M (ANTLR)SFmE4199 0 :Mf1_10 sf( )S4201 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP500.235 256.666 M ( reaches the )S85.2 268.666 M (specified limit, it will exit with the error message \"Ran out of resources while attempting to analyze )SFmE4201 0 :Mf0_10 sf( )S4203 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP486.909 268.666 M (something)SFmE4204 0 :Mf1_10 sf( )S4206 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP528.013 268.666 M (\".  I )S85.2 280.666 M (always use the )SFmE4206 0 :Mf2_10 sf( )S4212 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP146.008 280.666 M 0 0 18(-rl)FmTxFmE4212 0 :Mf1_10 sf( )S4214 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP164.008 280.666 M ( option;  setting it to 600000 is usually sufficient even for large grammars.  With an )SFmE4215 0 :Mf2_10 sf( )S4221 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP500.575 280.666 M 0 0 18(-rl)FmTxFmE4221 0 :Mf1_10 sf( )S4223 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP518.575 280.666 M ( setting )S85.2 292.666 M (of 60000 )SFmE4223 0 :Mf1_8 sf( )S4225 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP123.528 292.666 M (ANTLR)SFmE4225 0 :Mf1_10 sf( )S4227 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP150.192 292.666 M ( can consume about 40Mbytes of memory before aborting.)S85.2 308.666 M (Note:  With recent versions of )SFmE4228 0 :Mf1_8 sf( )S4230 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP208.481 308.666 M (PCCTS)SFmE4230 0 :Mf1_10 sf( )S4232 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP232.938 308.666 M ( one can use -treport to get information on tree node usage for each rule.)S85.2 324.666 M (An ambiguity problem is hard to get a handle on because there is little indication of the cause of the problem.  If you )S85.2 336.666 M (get this sort of error start looking for:)S96 352.666 M (a.  An )SFmE4232 0 :Mf2_10 sf( )S4238 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP122.658 352.666 M 0 0 6(\()FmTxFmE4238 0 :Mf0_10 sf( )S4240 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP128.658 352.666 M (...)SFmE4241 0 :Mf2_10 sf( )S4247 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP136.158 352.666 M 0 0 12(\)*)FmTxFmE4247 0 :Mf1_10 sf( )S4249 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP148.158 352.666 M ( where the \")SFmE4249 0 :Mf0_10 sf( )S4251 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP196.378 352.666 M (...)SFmE4252 0 :Mf1_10 sf( )S4254 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP203.878 352.666 M (\" might be empty.)S96 368.666 M (b.  Two adjacent )SFmE4254 0 :Mf2_10 sf( )S4260 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP165.138 368.666 M 0 0 6(\()FmTxFmE4260 0 :Mf0_10 sf( )S4262 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP171.138 368.666 M (...)SFmE4263 0 :Mf2_10 sf( )S4269 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP178.638 368.666 M 0 0 12(\)*)FmTxFmE4269 0 :Mf1_10 sf( )S4271 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP190.638 368.666 M (, perhaps brought together by related rules, where both )SFmE4271 0 :Mf2_10 sf( )S4277 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP411.935 368.666 M 0 0 6(\()FmTxFmE4277 0 :Mf0_10 sf( )S4279 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP417.935 368.666 M (...)SFmE4280 0 :Mf2_10 sf( )S4286 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP425.435 368.666 M 0 0 6(\))FmTxFmE4286 0 :Mf1_10 sf( )S4288 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP431.435 368.666 M ( might match the same thing.)S96 384.666 M (c.  Something like )SFmE4288 0 :Mf2_10 sf( )S4294 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP171.266 384.666 M 0 0 6({)FmTxFmE4294 0 :Mf1_10 sf( )S4296 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP177.266 384.666 M (A)SFmE4297 0 :Mf2_10 sf( )S4303 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP184.485 384.666 M 0 0 6(})FmTxFmE4303 0 :Mf1_10 sf( )S4305 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP190.485 384.666 M ( )SFmE4305 0 :Mf2_10 sf( )S4311 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP192.985 384.666 M 0 0 6(\()FmTxFmE4311 0 :Mf0_10 sf( )S4313 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP198.985 384.666 M (...)SFmE4314 0 :Mf2_10 sf( )S4320 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP206.485 384.666 M 0 0 12(\)*)FmTxFmE4320 0 :Mf1_10 sf( )S4322 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP218.485 384.666 M ( )SFmE4322 0 :Mf2_10 sf( )S4328 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP220.985 384.666 M 0 0 6({)FmTxFmE4328 0 :Mf1_10 sf( )S4330 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP226.985 384.666 M (A)SFmE4331 0 :Mf2_10 sf( )S4337 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP234.205 384.666 M 0 0 6(})FmTxFmE4337 0 :Mf1_10 sf( )S4339 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP240.205 384.666 M (.)S96 400.666 M (d.  Recursion can also be a problem if the recursion effectively implements \(...\)*.)S85.2 416.666 M (Of course, the pieces of this puzzle might be sitting in different rules that just happen to get slapped together in )S85.2 428.666 M (some production, so it can be incredibly frustrating to diagnose.  Sometimes, there is a real ambiguity underneath )S85.2 440.666 M (the problem \(like a repetition of a possibly empty construct\).  Other times, the pattern just exceeds )SFmE4339 0 :Mf1_8 sf( )S4341 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP480.886 440.666 M (ANTLR\325s)SFmE4341 0 :Mf1_10 sf( )S4343 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP513.327 440.666 M ( abilities.  )S85.2 452.666 M (When this happens, )SFmE4344 0 :Mf1_8 sf( )S4346 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP166.289 452.666 M (ANTLR)SFmE4346 0 :Mf1_10 sf( )S4348 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP192.953 452.666 M ( tries to compute an infinite or exponential number of combinations. )S85.2 468.666 M (The following is the type of thing that drives )SFmE4348 0 :Mf1_8 sf( )S4350 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP266.543 468.666 M (ANTLR)SFmE4350 0 :Mf1_10 sf( )S4352 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP293.207 468.666 M ( crazy, although this is too simple to exhibit any resource )S85.2 480.666 M (problem \(you\'ll just get an ambiguity warning\).  But if this pattern were a lot more complex, you\'d get resource )S85.2 492.666 M (problems:)SFmE4353 0 :Mf2_10 sf( )S4359 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 506.666 M 0 0 60(a : \(b\)+ c)FmTx132 516.666 M 0 0 102(b : { X | Y | Z })FmTx132 526.666 M 0 0 30(c : Z)FmTxFmE4359 0 :Mf1_10 sf( )S4361 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 542.666 M (There are several approaches I\'ve taken to counter this problem:)S96 558.666 M (a.  Use source code control.  Any time you introduce a significant change to a large grammar check in a snapshot )S96 570.666 M (first.  Then, if you get this error, back out the changes and apply them incrementally.)S96 586.666 M (b.  Use )SFmE4361 0 :Mf2_10 sf( )S4367 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP126.547 586.666 M 0 0 42(#pragma)FmTxFmE4367 0 :Mf1_10 sf( )S4369 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168.547 586.666 M ( )SFmE4370 0 :Mf2_10 sf( )S4376 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP171.047 586.666 M 0 0 36(approx)FmTxFmE4376 0 :Mf1_10 sf( )S4378 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP207.047 586.666 M (.  Be very careful with this!  It is a sledgehammer for difficult cases that seem to have )S96 598.666 M (no other solution.  It is dangerous because it easily masks problems in the grammar.  The documentation for )SFmE4378 0 :Mf2_10 sf( )S4384 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 610.666 M 0 0 42(#pragma)FmTxFmE4384 0 :Mf1_10 sf( )S4386 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP138 610.666 M ( )SFmE4387 0 :Mf2_10 sf( )S4393 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP140.5 610.666 M 0 0 36(approx)FmTxFmE4393 0 :Mf1_10 sf( )S4395 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP176.5 610.666 M ( is sketchy, but it seems to do the following things in situations where there is ambiguity )S96 622.666 M (and/or exponential analysis.)S132 638.666 M (1.  It performs a )SFmE4395 0 :Mf0_10 sf( )S4397 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP198.633 638.666 M (linear analysis)SFmE4398 0 :Mf1_10 sf( )S4400 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP257.791 638.666 M (: the leading set of tokens will be computed for each lookahead slot )S132 650.666 M (\(LA\(1\), LA\(2\), etc.\) but no \"token set tree\" will be calculated.  This is really only important for)SFmE4400 0 :Mf0_10 sf( )S4402 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP513.057 650.666 M ( k)SFmE4403 0 :Mf1_10 sf( )S4405 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP519.996 650.666 M (>1.)S132 666.666 M (2.  )SFmE4405 0 :Mf2_10 sf( )S4411 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.5 666.666 M 0 0 42(#pragma)FmTxFmE4411 0 :Mf1_10 sf( )S4413 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP186.5 666.666 M ( )SFmE4414 0 :Mf2_10 sf( )S4420 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP189 666.666 M 0 0 48(approx \()FmTxFmE4420 0 :Mf0_10 sf( )S4422 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP237 666.666 M (...)SFmE4422 0 :Mf2_10 sf( )S4428 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP244.5 666.666 M 0 0 12(\)*)FmTxFmE4428 0 :Mf1_10 sf( )S4430 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP256.5 666.666 M (    or   )SFmE4431 0 :Mf2_10 sf( )S4437 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP282.328 666.666 M 0 0 42(#pragma)FmTxFmE4437 0 :Mf1_10 sf( )S4439 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP324.328 666.666 M ( )SFmE4439 0 :Mf2_10 sf( )S4445 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP326.828 666.666 M 0 0 48(approx \()FmTxFmE4445 0 :Mf0_10 sf( )S4447 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP374.828 666.666 M (...)SFmE4448 0 :Mf2_10 sf( )S4454 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP382.328 666.666 M 0 0 12(\)+)FmTxFmE4454 0 :Mf1_10 sf( )S4456 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP394.328 666.666 M ( tells )SFmE4456 0 :Mf1_8 sf( )S4458 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP415.99 666.666 M (ANTLR)SFmE4458 0 :Mf1_10 sf( )S4460 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP442.654 666.666 M ( to favor another iteration )S132 678.666 M (of the )SFmE4461 0 :Mf2_10 sf( )S4467 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP157.544 678.666 M 0 0 6(\()FmTxFmE4467 0 :Mf0_10 sf( )S4469 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP163.544 678.666 M (...)SFmE4469 0 :Mf2_10 sf( )S4475 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP171.044 678.666 M 0 0 6(\))FmTxFmE4475 0 :Mf1_10 sf( )S4477 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP177.044 678.666 M ( over whatever rules may follow.)S132 694.666 M (3.  )SFmE4478 0 :Mf2_10 sf( )S4484 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.5 694.666 M 0 0 42(#pragma)FmTxFmE4484 0 :Mf1_10 sf( )S4486 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP186.5 694.666 M ( )SFmE4486 0 :Mf2_10 sf( )S4492 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP189 694.666 M 0 0 48(approx {)FmTxFmE4492 0 :Mf0_10 sf( )S4494 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP237 694.666 M (...)SFmE4495 0 :Mf2_10 sf( )S4501 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP244.5 694.666 M 0 0 6(})FmTxFmE4501 0 :Mf1_10 sf( )S4503 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP250.5 694.666 M ( tells )SFmE4503 0 :Mf1_8 sf( )S4505 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP272.163 694.666 M (ANTLR)SFmE4505 0 :Mf1_10 sf( )S4507 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP298.827 694.666 M ( to favor the optional stuff over skipping it and matching what )S132 706.666 M (follows.)S132 722.666 M (4.  )SFmE4508 0 :Mf2_10 sf( )S4514 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.5 722.666 M 0 0 42(#pragma)FmTxFmE4514 0 :Mf1_10 sf( )S4516 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP186.5 722.666 M ( )SFmE4516 0 :Mf2_10 sf( )S4522 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP189 722.666 M 0 0 54(approx \( )FmTxFmE4522 0 :Mf0_10 sf( )S4524 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP243 722.666 M (A)SFmE4525 0 :Mf2_10 sf( )S4531 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP249.108 722.666 M 0 0 18( | )FmTxFmE4531 0 :Mf0_10 sf( )S4533 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP267.108 722.666 M (B)SFmE4533 0 :Mf2_10 sf( )S4539 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP273.217 722.666 M 0 0 12( \))FmTxFmE4539 0 :Mf1_10 sf( )S4541 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP285.217 722.666 M ( tells )SFmE4542 0 :Mf1_8 sf( )S4544 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP306.879 722.666 M (ANTLR)SFmE4544 0 :Mf1_10 sf( )S4546 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP333.543 722.666 M ( to favor)SFmE4546 0 :Mf0_10 sf( )S4548 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP367.416 722.666 M ( A)SFmE4549 0 :Mf1_10 sf( )S4551 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP376.024 722.666 M ( over )SFmE4551 0 :Mf0_10 sf( )S4553 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP398.79 722.666 M (B)SFmE4554 0 :Mf1_10 sf( )S4556 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP404.898 722.666 M (.)SFmEendp%%Page: 40 40%%BeginPageSetupinitializepage(Moog; page: 40 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC4556 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE4556 0 :Mf0_10 sf( )S4558 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (40)S7 FmP60 78 495 648 FmqFFmE4559 0 :Mf1_10 sf( )S4561 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 84.667 M (You should only use #)SFmE4561 0 :Mf2_10 sf( )S4567 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP185.993 84.667 M 0 0 36(pragma)FmTxFmE4567 0 :Mf1_10 sf( )S4569 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP221.993 84.667 M ( )SFmE4570 0 :Mf2_10 sf( )S4576 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP224.493 84.667 M 0 0 36(approx)FmTxFmE4576 0 :Mf1_10 sf( )S4578 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP260.493 84.667 M ( when you are certain what is causing the problem, and there is no more )S96 96.667 M (specific way \(such as predicates\) to fix it.)S96 112.667 M (c.  Use the ambiguity aid options to locate rules which are contributing to the ambiguity that is driving )SFmE4578 0 :Mf1_8 sf( )S4580 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP508.114 112.667 M (ANTLR)SFmE4580 0 :Mf1_10 sf( )S4582 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP534.778 112.667 M ( out )S96 124.667 M (of resources \()SFmE4583 0 :Mf0_10 sf( )S4585 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP150.404 124.667 M (Item c added for 2.22 by THM\))SFmE4585 0 :Mf1_10 sf( )S4587 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP275.084 124.667 M (.)S96 140.667 M (d.  Selectively disable or remove rules until the problem goes away.  The purpose of this is to identify rules that )S96 152.667 M (participate in the ambiguity that is driving )SFmE4588 0 :Mf1_8 sf( )S4590 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP266.789 152.667 M (ANTLR)SFmE4590 0 :Mf1_10 sf( )S4592 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP293.453 152.667 M ( out of resources.  If you remove or disable a rule and the )S96 164.667 M (problem goes away, then the rule has )SFmE4592 0 :Mf0_10 sf( )S4594 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP247.052 164.667 M (something)SFmE4595 0 :Mf1_10 sf( )S4597 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP288.156 164.667 M ( to do with the problem, although it requires more thought to )S96 176.667 M (diagnose the exact ambiguity.  I sometimes create a special token that is never matched and use it in the grammar )S96 188.667 M (for the purpose of removing a rule from any potentially ambiguous interaction with other rules.  For example, to )S96 200.667 M (remove rule \"a\" from consideration \(in a certain sense\), change:)SFmE4597 0 :Mf2_10 sf( )S4603 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 214.667 M 0 0 84(a : b c \(d\)* ;)FmTxFmE4603 0 :Mf1_10 sf( )S4605 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 228.666 M (to:)SFmE4606 0 :Mf2_10 sf( )S4612 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 242.666 M 0 0 144(a : Unmatched b c \(d\)* ;)FmTxFmE4612 0 :Mf1_10 sf( )S4614 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 256.666 M (where )SFmE4614 0 :Mf2_10 sf( )S4620 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP122.924 256.666 M 0 0 54(Unmatched)FmTxFmE4620 0 :Mf1_10 sf( )S4622 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP176.924 256.666 M ( is a token that is never generated.  This will point out if the leading set of \"a\" is conflicting )S96 268.666 M (with other rules and causing problems.)S85.2 284.666 M (Here\'s an example of something that drove me crazy in the C++ grammar.  A fully-qualified identifier can have )S85.2 296.666 M (template arguments: this declares \"x\" to be a specialization of \"A\":)SFmE4623 0 :Mf2_10 sf( )S4629 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 310.666 M 0 0 60(   A<3> x;)FmTxFmE4629 0 :Mf1_10 sf( )S4631 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 324.666 M (The relevant part of the grammar was \"qualified id\", which matches a series of A::B::C:: followed by an ID:)SFmE4631 0 :Mf2_10 sf( )S4637 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 338.666 M 0 0 192(scope_override    //A::B::C::...)FmTx132 348.666 M 0 0 42(  id:ID)FmTx132 358.666 M 0 0 18(  \()FmTx132 368.666 M 0 0 42(    \"<\")FmTx132 378.666 M 0 0 156(        template_arguments)FmTx132 388.666 M 0 0 42(    \">\")FmTx132 398.666 M 0 0 18(  |)FmTx132 408.666 M 0 0 72(    // empty)FmTx132 418.666 M 0 0 18(  \))FmTxFmE4637 0 :Mf1_10 sf( )S4639 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 434.666 M (However, this was getting confused with relational expressions such as:)SFmE4640 0 :Mf2_10 sf( )S4646 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 448.666 M 0 0 60(\(A<3\) > x;)FmTxFmE4646 0 :Mf1_10 sf( )S4648 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 462.666 M (The first task was identifying this as the problem. )SFmE4648 0 :Mf1_8 sf( )S4650 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP285.693 462.666 M (ANTLR)SFmE4650 0 :Mf1_10 sf( )S4652 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP312.357 462.666 M ( actually blew up in an entirely different place, one that )S85.2 474.666 M (followed this rule sequentially in some productions.  It took some selective disabling and rearrangement of rules to )S85.2 486.666 M (identify this rule as a culprit.)S85.2 502.666 M (When this finally was pinpointed as an ambiguity, I couldn\'t see how this was, because \"A\" was a type, and types )S85.2 514.666 M (can\'t participate in relational expressions.  However, after some more searching I dug up this case:)SFmE4653 0 :Mf2_10 sf( )S4659 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 528.666 M 0 0 114(operator A < 3 > x;)FmTxFmE4659 0 :Mf1_10 sf( )S4661 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 542.666 M (The problem is that the type identifier \"A\" can be used as the \"optor\" for an operator function specification, so in )S85.2 554.666 M (that context \(which is semantically invalid but permitted by the grammar\), a type followed by \"<\" can be either a )S85.2 566.666 M (template specifier or a relational expression.  There were a whole family of cases, all involving \"operator\", which )S85.2 578.666 M (allowed type names to show up where types were not allowed \(or so I thought\).  The final solution was twofold:  )S85.2 590.666 M (First, a semantic predicate had to categorize an identifier as \"templated\".  Second, )SFmE4661 0 :Mf2_10 sf( )S4667 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP414.878 590.666 M 0 0 42(#pragma)FmTxFmE4667 0 :Mf1_10 sf( )S4669 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP456.878 590.666 M ( )SFmE4670 0 :Mf2_10 sf( )S4676 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP459.378 590.666 M 0 0 36(approx)FmTxFmE4676 0 :Mf1_10 sf( )S4678 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP495.378 590.666 M ( was used to )S85.2 602.666 M (avoid the complex processing that was bogging )SFmE4678 0 :Mf1_8 sf( )S4680 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP277.649 602.666 M (ANTLR)SFmE4680 0 :Mf1_10 sf( )S4682 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP304.313 602.666 M ( down:)SFmE4683 0 :Mf2_10 sf( )S4689 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 616.666 M 0 0 192(scope_override    //A::B::C::...)FmTx132 626.666 M 0 0 42(  id:ID)FmTx132 636.666 M 0 0 96(  #pragma approx)FmTx132 646.666 M 0 0 18(  \()FmTx132 656.666 M 0 0 240(    <<isTemplatedName\($id->getText\(\)\)>>?)FmTx132 666.666 M 0 0 42(    \"<\")FmTx132 676.666 M 0 0 150(       template_arguments)FmTx132 686.666 M 0 0 42(    \">\")FmTx132 696.666 M 0 0 18(  |)FmTx132 706.666 M 0 0 72(    // empty)FmTx132 716.666 M 0 0 18(  \))FmTxFmEendp%%Page: 41 41%%BeginPageSetupinitializepage(Moog; page: 41 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC4689 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE4689 0 :Mf0_10 sf( )S4691 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (41)S7 FmP60 78 495 648 FmqFFmE4692 0 :Mf1_10 sf( )S4694 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (Note that, if the brute-force )SFmE4694 0 :Mf2_10 sf( )S4700 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP197.358 84.667 M 0 0 42(#pragma)FmTxFmE4700 0 :Mf1_10 sf( )S4702 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP239.358 84.667 M ( )SFmE4703 0 :Mf2_10 sf( )S4709 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP241.858 84.667 M 0 0 36(approx)FmTxFmE4709 0 :Mf1_10 sf( )S4711 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP277.858 84.667 M ( had been used, then some relational expressions would never be )S85.2 96.667 M (parsed.  The combination of )SFmE4711 0 :Mf2_10 sf( )S4717 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP200.158 96.667 M 0 0 42(#pragma)FmTxFmE4717 0 :Mf1_10 sf( )S4719 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP242.158 96.667 M ( )SFmE4720 0 :Mf2_10 sf( )S4726 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP244.658 96.667 M 0 0 42(approx )FmTxFmE4726 0 :Mf1_10 sf( )S4728 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP286.658 96.667 M (and the predicate has \(hopefully\) solved the problem correctly.)S60 112.667 M (#171.)S2.7 N (What is the difference between \")SFmE4728 0 :Mf2_10 sf( )S4734 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP216.147 112.667 M 0 0 96(\(...\)? <<...>>? )FmTxFmE4734 0 :Mf0_10 sf( )S4736 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP312.147 112.667 M (x)SFmE4737 0 :Mf1_10 sf( )S4739 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP316.586 112.667 M (\" and \")SFmE4739 0 :Mf2_10 sf( )S4745 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP344.183 112.667 M 0 0 114(\(...\)? => <<...>>? )FmTxFmE4745 0 :Mf0_10 sf( )S4747 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP458.183 112.667 M (x)SFmE4748 0 :Mf1_10 sf( )S4750 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP462.622 112.667 M (\" ?)S85.2 128.667 M (The first expression is a syntactic predicate followed by a semantic predicate.  The syntactic predicate can perform )S85.2 140.667 M (arbitrary lookahead and backtracking before committing to the rule.  However it won\325t encounter the semantic )S85.2 152.667 M (predicate until already committed to the rule \321 this makes the semantic predicate merely a validation predicate.  )S85.2 164.667 M (Not a very useful semantic predicate.)S85.2 180.667 M (The second expression is a \"guarded semantic predicate\" with a convenient notation for specifying the look-ahead )S85.2 192.667 M (context.  The  context expression is used to generate an \"if\" condition similar to that used to predict which rule to )S85.2 204.667 M (invoke.  It isn\325t any more powerful than the grammar analysis implied by the)SFmE4750 0 :Mf1_8 sf( )S4752 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP392.873 204.667 M ( )SFmE4752 0 :Mf1_10 sf( )S4754 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP394.873 204.667 M (values you\325ve chosen for the )SFmE4755 0 :Mf1_8 sf( )S4757 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP512.322 204.667 M (ANTLR)SFmE4757 0 :Mf1_10 sf( )S4759 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP538.986 204.667 M ( )S85.2 216.667 M (switches \320k and \320ck.  It doesn\325t have any of the machinery of syntactic predicates and does )SFmE4759 0 :Mf0_10 sf( )S4761 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP452.268 216.667 M (not)SFmE4762 0 :Mf1_10 sf( )S4764 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP465.046 216.667 M ( allow arbitrarily )S85.2 228.666 M (large lookahead.  If the syntax predicate is )SFmE4764 0 :Mf0_10 sf( )S4766 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP257.06 228.666 M (true)SFmE4767 0 :Mf1_10 sf( )S4769 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP273.166 228.666 M ( the semantic predicate is evaluated \320  if )SFmE4769 0 :Mf0_10 sf( )S4771 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP436.145 228.666 M (true)SFmE4772 0 :Mf1_10 sf( )S4774 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP452.251 228.666 M ( the parse of the )S85.2 240.666 M (alternative continues, and if )SFmE4774 0 :Mf0_10 sf( )S4776 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP198.762 240.666 M (false)SFmE4777 0 :Mf1_10 sf( )S4779 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP217.646 240.666 M ( the parse of that alternative is aborted.  If the syntax predicate is )SFmE4779 0 :Mf0_10 sf( )S4781 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP478.908 240.666 M (false)SFmE4782 0 :Mf1_10 sf( )S4784 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP497.793 240.666 M ( then the )S85.2 252.666 M (semantic predicate is ignored and the parse continues.  A common misconception is that the parse of the alternative )S85.2 264.666 M (is rejected when the syntax predicate is false.)S60 280.666 M (#172.)S2.7 N (Memory leaks and lost resources)S85.2 296.666 M (Syntactic predicates use setjmp/longjmp. They cause leaks even with reference counted tokens. \(Item )S(#123)S(\).)S85.2 308.666 M (Delete temporary attributes on rule failure and exceptions \(Item )S(#193)S(\).)S85.2 320.666 M (Delete temporary ASTs on rule failure and exceptions \(Item )S(#95)S(\).)S85.2 332.666 M (A rule that constructs an AST returns an AST even when its caller uses the \"!\" operator \(Item )S(#88)S(\).)S85.2 344.666 M (\(C++ mode\) A rule which applies \"!\" to a terminal loses the token \(Item )S(#89)S(\) unless the )SFmE4784 0 :Mf1_8 sf( )S4786 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP438.684 344.666 M (ANTLR)SFmE4786 0 :Mf1_10 sf( )S4788 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP465.348 344.666 M ( reference counting )S85.2 356.666 M (option is enabled.)S85.2 368.666 M (\(C mode\) Define a zzd_ast\(\) routine if you define a zzcr_ast\(\) or zzmk_ast\(\) \(Item )S(#200)S(\).)S60 384.666 M (#173.)S2.7 N (Some ambiguities can be fixed by introduction of new #token numbers)S85.2 400.666 M (For instance in C++ with a suitable definition of the class \"C\" one can write:)SFmE4789 0 :Mf2_10 sf( )S4795 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 414.666 M 0 0 240(C a,b,c                         /* a1 */)FmTx96 424.666 M 0 0 240(a.func1\(b\);                     /* a2 */)FmTx96 434.666 M 0 0 240(a.func2\(\)=c;                    /* a3 */)FmTx96 444.666 M 0 0 240(a = b;                          /* a4 */)FmTx96 454.666 M 0 0 240(a.operator =\(b\);                /* a5 */)FmTxFmE4795 0 :Mf1_10 sf( )S4797 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 470.666 M (Statement a5 happens to place an \"=\" \(or any of the usual C++ operators\) in a token position where it can cause a lot )S85.2 482.666 M (of ambiguity in the lookahead set.  One can solve this particular problem by creating a special #lexclass for things )S85.2 494.666 M (which follow \"operator\" with an entirely different token number for such operator strings \321 thereby avoiding the )S85.2 506.666 M (whole problem.)SFmE4797 0 :Mf2_10 sf( )S4803 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 520.666 M 0 0 60(        //)FmTx96 530.666 M 0 0 432(        //  C++ operator sequences \(somewhat simplified for these notes\))FmTx96 540.666 M 0 0 60(        //)FmTx96 550.666 M 0 0 192(        //  operator <type_name>)FmTx96 560.666 M 0 0 246(        //  operator <special characters>)FmTx96 570.666 M 0 0 60(        //)FmTx96 580.666 M 0 0 438(        //  There must be at least one non-alphanumeric character between)FmTx96 590.666 M 0 0 420(        //  \"operator\" and operator name - otherwise they would be run)FmTx96 600.666 M 0 0 384(        //  together - \(\"operatorint\" instead of \"operator int\"\))FmTx96 610.666 M 0 0 60(        //)FmTx96 630.666 M 0 0 180(        #lexclass LEX_OPERATOR)FmTx96 640.666 M 0 0 294(        #token  FILLER_C1               \"[\\ \\t]*\")FmTx96 650.666 M 0 0 162(                  <<skip\(\);)FmTx96 660.666 M 0 0 300(                    if\( isalnum\(ch\) \) mode\(START\);)FmTx96 670.666 M 0 0 120(                  >>)FmTx96 680.666 M 0 0 420(        #token  OPERATOR_STRING         \"[\\+\\-\\*\\/%\\^\\&\\|\\~\\!\\=\\<\\>]*\")FmTx96 690.666 M 0 0 288(                                <<mode\(START\);>>)FmTx96 700.666 M 0 0 324(        #token  FILLER_C2               \"\\\(\\\) | \\[\\] \")FmTx96 710.666 M 0 0 426(                                <<mode\(START\);return OPERATOR_STRING;>>)FmTxFmEendp%%Page: 42 42%%BeginPageSetupinitializepage(Moog; page: 42 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC4803 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE4803 0 :Mf0_10 sf( )S4805 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (42)S7 FmP60 78 495 648 FmqFFmE4806 0 :Mf1_10 sf( )S4808 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (#174.)S2.7 N ( Subclassing )SFmE4808 0 :Mf1_8 sf( )S4810 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP137.971 84.667 M (DLG)SFmE4810 0 :Mf1_10 sf( )S4812 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP154.412 84.667 M (InputStream)S85.2 100.667 M (To subclass )SFmE4813 0 :Mf1_8 sf( )S4815 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP134.631 100.667 M (DLG)SFmE4815 0 :Mf1_10 sf( )S4817 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP151.073 100.667 M (InputStream requires )SFmE4817 0 :Mf1_8 sf( )S4819 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP237.699 100.667 M (DLG)SFmE4819 0 :Mf1_10 sf( )S4821 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP254.14 100.667 M (LexerBase which is dependent on )SFmE4822 0 :Mf1_8 sf( )S4824 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP391.586 100.667 M (ANTLR)SFmE4824 0 :Mf1_10 sf( )S4826 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP418.25 100.667 M (TokenType.  However the values )S85.2 112.667 M (of the )SFmE4826 0 :Mf1_8 sf( )S4828 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP110.744 112.667 M (ANTLR)SFmE4828 0 :Mf1_10 sf( )S4830 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP137.408 112.667 M (TokenType may not be known at the time.  The workaround is to define a dummy )SFmE4831 0 :Mf1_8 sf( )S4833 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP468.146 112.667 M (ANTLR)SFmE4833 0 :Mf1_10 sf( )S4835 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP494.81 112.667 M (TokenType in )S85.2 124.667 M (the header file for your subclass.  Because enum definitions have only file scope, this should not cause a problem as )S85.2 136.667 M (long as all files which include your class use the same size int to represent the enum.)SFmE60 159 495 11 rC4835 0 :MFrMacBegin60 160 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 161 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC4835 0 :Mf1_10 sf( )S4837 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 156.667 M (Changes From The Original 1.33 Which Are Not Part of Any Other Section )S60 180.667 M (A complete log of all but the most trivial changes are distributed in the )SFmE4838 0 :Mf1_8 sf( )S4840 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP345.464 180.667 M (PCCTS)SFmE4840 0 :Mf1_10 sf( )S4842 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP369.921 180.667 M ( kits.  The most recent changes are in  )SFmE4842 0 :Mf1_8 sf( )S4844 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 192.667 M (CHANGES_FROM_133.TXT.)SFmE4844 0 :Mf1_10 sf( )S4846 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP160.008 192.667 M (   Changes prior to 1.33MR13 are in )SFmE4847 0 :Mf1_8 sf( )S4849 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP307.198 192.667 M (CHANGES_FROM_133_BEFORE_MR13.TXT)SFmE4849 0 :Mf1_10 sf( )S4851 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP464.327 192.667 M (.  Finally, for those )S60 204.667 M (who don\325t have the endurance to read these files, there is a )SFmE4851 0 :Mf1_8 sf( )S4853 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP296.829 204.667 M (CHANGES_SUMMARY.TXT)SFmE4853 0 :Mf1_10 sf( )S4855 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP397.504 204.667 M ( which contains only the most )S60 216.667 M (interesting parts of those files.  The following items are based on this last file.)S60 232.667 M (#175.)S2.7 N (Use )SFmE4856 0 :Mf2_10 sf( )S4862 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 232.667 M 0 0 78(#first <<...>)FmTxFmE4862 0 :Mf1_10 sf( )S4864 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP181.247 232.667 M ( to place references to precompiled header files at the beginning of generated files)S60 248.667 M (#176.)S2.7 N (Use )SFmE4864 0 :Mf1_8 sf( )S4866 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 248.667 M (DLG)SFmE4866 0 :Mf1_10 sf( )S4868 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP119.688 248.667 M (LexerBase::reset\(\) to reset the input stream when parsing the input stream multiple times.)S60 264.667 M (#177.)S2.7 N (Error counters are: )SFmE4869 0 :Mf1_8 sf( )S4871 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP162.646 264.667 M (ANTLR)SFmE4871 0 :Mf1_10 sf( )S4873 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP189.31 264.667 M (Parser::syntaxErrCount and )SFmE4873 0 :Mf1_8 sf( )S4875 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP302.604 264.667 M (DLG)SFmE4875 0 :Mf1_10 sf( )S4877 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP319.045 264.667 M (LexerBase::lexErrCount)S85.2 280.667 M (These counters are )SFmE4878 0 :Mf0_10 sf( )S4880 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP162.651 280.667 M (not)SFmE4880 0 :Mf1_10 sf( )S4882 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP175.429 280.667 M ( reset to zero by )SFmE4883 0 :Mf1_8 sf( )S4885 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP241.784 280.667 M (ANTLR)SFmE4885 0 :Mf1_10 sf( )S4887 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP268.449 280.667 M (Parser::init\(\).)S60 296.667 M (#178.)S2.7 N (Use \")SFmE4887 0 :Mf2_10 sf( )S4893 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP107.326 296.667 M 0 0 252(class MyParser : public MyBaseParser ... {)FmTxFmE4893 0 :Mf1_10 sf( )S4895 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP359.326 296.667 M ( \" to specify your own parser base class)S85.2 312.667 M (The information following the \":\" is copied to the class declaration for MyParser.  The constructor of the base class )S85.2 324.666 M (\(e.g. MyBaseParser\) must have the same signature as )SFmE4896 0 :Mf1_8 sf( )S4898 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP300.661 324.666 M (ANTLR)SFmE4898 0 :Mf1_10 sf( )S4900 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP327.325 324.666 M (Parser.)S60 340.666 M (#179.)S2.7 N (Use )SFmE4900 0 :Mf2_10 sf( )S4906 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 340.666 M 0 0 96(#FirstSetSymbol\()FmTxFmE4906 0 :Mf0_10 sf( )S4908 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP199.247 340.666 M (symbol_name)SFmE4909 0 :Mf2_10 sf( )S4915 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP254.23 340.666 M 0 0 6(\))FmTxFmE4915 0 :Mf1_10 sf( )S4917 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP260.23 340.666 M ( to generate symbol for first set of an alternative)S85.2 356.666 M (The set can be tested using:)SFmE4917 0 :Mf2_10 sf( )S4923 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 370.666 M 0 0 168(if \(set_el\(token->getType\(\),)FmTxFmE4923 0 :Mf0_10 sf( )S4925 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP300 370.666 M (symbol_name)SFmE4926 0 :Mf2_10 sf( )S4932 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP354.983 370.666 M 0 0 48(\)\) {...})FmTxFmE4932 0 :Mf1_10 sf( )S4934 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 384.666 M (A follow set can be generated by placing the #FirstSetSymbol operator after the block of interest:)SFmE4934 0 :Mf2_10 sf( )S4940 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 398.666 M 0 0 324(rr : \(rule_a | rule_b\) #FirstSetSymbol\(ab_follow\) \(\) ;)FmTxFmE4940 0 :Mf1_10 sf( )S4942 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 412.666 M (#180.)S2.7 N (Use )SFmE4943 0 :Mf2_10 sf( )S4949 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 412.666 M 0 0 54(-preamble)FmTxFmE4949 0 :Mf1_10 sf( )S4951 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP157.247 412.666 M ( and )SFmE4951 0 :Mf2_10 sf( )S4957 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP176.685 412.666 M 0 0 90(-preamble_first)FmTxFmE4957 0 :Mf1_10 sf( )S4959 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP266.685 412.666 M ( to insert macro code at the start of each rule or block)S85.2 428.666 M (The antlr option -preamble causes )SFmE4960 0 :Mf1_8 sf( )S4962 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP223.747 428.666 M (ANTLR)SFmE4962 0 :Mf1_10 sf( )S4964 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP250.411 428.666 M ( to insert the code \")SFmE4964 0 :Mf2_10 sf( )S4970 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP328.075 428.666 M 0 0 90(BLOCK_PREAMBLE\")FmTxFmE4970 0 :Mf1_10 sf( )S4972 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP418.075 428.666 M ( at the start of each rule and )S85.2 440.666 M (block.)S85.2 456.666 M (The option -preamble_first inserts the code \")SFmE4973 0 :Mf2_10 sf( )S4979 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP264.206 456.666 M 0 0 210(BLOCK_PREAMBLE_FIRST\(PreambleFirst_)FmTxFmE4979 0 :Mf0_10 sf( )S4981 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP474.206 456.666 M (number)SFmE4981 0 :Mf2_10 sf( )S4987 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP504.753 456.666 M 0 0 12(\)\")FmTxFmE4987 0 :Mf1_10 sf( )S4989 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP516.753 456.666 M ( where )S85.2 468.666 M (the symbol )SFmE4990 0 :Mf2_10 sf( )S4996 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP131.863 468.666 M 0 0 84(PreambleFirst_)FmTxFmE4996 0 :Mf0_10 sf( )S4998 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP215.863 468.666 M (number)SFmE4998 0 :Mf1_10 sf( )S5000 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP246.409 468.666 M ( is equivalent to the first set defined by the #FirstSetSymbol described )S85.2 480.666 M (above.)S60 496.666 M (#181.)S2.7 N (Preprocessor option )SFmE5001 0 :Mf2_10 sf( )S5007 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP167.392 496.666 M 0 0 78(ZZDEFER_FETCH)FmTxFmE5007 0 :Mf1_10 sf( )S5009 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP245.392 496.666 M ( to defer token fetch for C++ mode)S85.2 512.666 M (When the )SFmE5009 0 :Mf1_8 sf( )S5011 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP126.294 512.666 M (ANTLR)SFmE5011 0 :Mf1_10 sf( )S5013 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP152.958 512.666 M (Parser class is built with the pre-processor option ZZDEFER_FETCH defined, the fetch of new )S85.2 524.666 M (tokens by consume\(\) is deferred until LA\(i\) or LT\(i\) is called.   This is useful in cases where there is a potential for a )S85.2 536.666 M (deadlock between a supplier of data which is waiting for the parser to ask for more data and the parser which is )S85.2 548.666 M (waiting for another token because of prefetching.)S85.2 564.666 M (The defer fetch feature cannot be used with the standard tracein\(\) and traceout\(\) routines because they display )S85.2 576.666 M (information from a prefetched token.  The function isDeferFetchEnabled\(\) tests whether this feature is enabled.)S60 592.666 M (#182.)S2.7 N (Exception handling)S85.2 608.666 M (There were significant problems in the handling of exceptions in 1.33 vanilla.  The general problem is that it can )S85.2 620.666 M (only process one level of exception handler.  For example, a named exception handler, an exception handler for an )S85.2 632.666 M (alternative, or an exception for a subrule always went to the rule\'s exception handler if there was no \"catch\" which )S85.2 644.666 M (matched the exception.)S85.2 660.666 M (Now the exception handlers properly nest.  If an exception handler does not have a matching \"catch\" then the )S85.2 672.666 M (nextmost outer exception handler is checked for an appropriate \"catch\" clause, and so on until an exception handler )S85.2 684.666 M (with an appropriate \"catch\" is found.)SFmEendp%%Page: 43 43%%BeginPageSetupinitializepage(Moog; page: 43 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC5014 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE5014 0 :Mf0_10 sf( )S5016 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (43)S7 FmP60 78 495 648 FmqFFmE60 87 495 12 rC5017 0 :MFrMacBegin60 88 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 89 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC5017 0 :Mf1_10 sf( )S5019 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (\(C Mode\) LA/LATEXT and NLA/NLATEXT)S60 108.667 M (#183.)S2.7 N (Do not use LA\()SFmE5020 0 :Mf0_10 sf( )S5022 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP147.68 108.667 M (i)SFmE5022 0 :Mf1_10 sf( )S5024 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP150.459 108.667 M (\) or LATEXT\()SFmE5025 0 :Mf0_10 sf( )S5027 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP209.314 108.667 M (i)SFmE5027 0 :Mf1_10 sf( )S5029 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP212.092 108.667 M (\) in the action routines of #token)S85.2 124.667 M (To refer to the token code \(in a #token action\) of the token just recognized use NLA.   NLA is an lvalue \(can appear )S85.2 136.667 M (on the left hand side of an assignment statement\).  To refer to the text just recognized use zzlextext \(the entire text\) )S85.2 148.667 M (or NLATEXT. One can also use zzbegexpr/zzendexpr which refer to the last regular expression matched. The char )S85.2 160.667 M (array pointed to by zzlextext may be larger than the string pointed to by zzbegexpr and zzendexpr because it )S85.2 172.667 M (includes substrings accumulated through the use of zzmore\(\).)S60 188.667 M (#184.)S2.7 N (Care must be taken in using LA\()SFmE5030 0 :Mf0_10 sf( )S5032 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP215.715 188.667 M (i)SFmE5032 0 :Mf1_10 sf( )S5034 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP218.493 188.667 M (\) and LATEXT\()SFmE5035 0 :Mf0_10 sf( )S5037 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP283.459 188.667 M (i)SFmE5037 0 :Mf1_10 sf( )S5039 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP286.238 188.667 M (\) in interactive mode \()SFmE5040 0 :Mf1_8 sf( )S5042 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP375.083 188.667 M (ANTLR)SFmE5042 0 :Mf1_10 sf( )S5044 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP401.747 188.667 M ( switch \320gk\))S85.2 204.667 M (In interactive mode )SFmE5044 0 :Mf1_8 sf( )S5046 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP165.439 204.667 M (ANTLR)SFmE5046 0 :Mf1_10 sf( )S5048 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP192.103 204.667 M ( doesn\'t guarantee that it will fetch lookahead tokens until absolutely necessary. It is )S85.2 216.667 M (somewhat safer to refer to lookahead information in semantic predicates, but care is still required.)S85.2 232.667 M (In this table the entries \"prev\" and \"next\" means that the item refers to the token which precedes \(or follows\) the )S85.2 244.667 M (action which generated the output.  For semantic predicate entries think of the following rule:)SFmE5049 0 :Mf2_10 sf( )S5055 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 258.667 M 0 0 276(rule : <<semantic-predicate>>? Next NextNext ;)FmTxFmE5055 0 :Mf1_10 sf( )S5057 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 272.667 M (For rule-action entries think of the following rule:)SFmE5057 0 :Mf2_10 sf( )S5063 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 286.667 M 0 0 222(rule : Prev <<action>> Next NextNext;)FmTx96 298.667 M 0 0 426(-----------------------------------------------------------------------)FmTx96 308.666 M 0 0 390(                k=1         k=1        k=3        k=3         k=3)FmTx96 318.666 M 0 0 408(                standard  infinite   standard  interactive  infinite)FmTx96 328.666 M 0 0 426(-----------------------------------------------------------------------)FmTx96 338.666 M 0 0 144(for a semantic predicate)FmTx96 348.666 M 0 0 144(------------------------)FmTx96 358.666 M 0 0 390(  LA\(0\)         Next        Next       --         --           --)FmTx96 368.666 M 0 0 396(  LA\(1\)         Next        Next      Next       Next         Next)FmTx96 378.666 M 0 0 396(  zzlextext     Next        Next      Next        --          Next)FmTx96 388.666 M 0 0 396(  ZZINF_LA\(0\)               Next                              Next)FmTx96 398.666 M 0 0 420(  ZZINF_LA\(1\)               NextNext                          NextNext)FmTx96 408.666 M 0 0 102(-----------------)FmTx96 418.666 M 0 0 102(for a rule action)FmTx96 428.666 M 0 0 102(-----------------)FmTx96 438.666 M 0 0 390(  LA\(0\)         Prev        Prev       --        Prev          --)FmTx96 448.666 M 0 0 396(  LA\(1\)         Prev        Prev      Prev       Next         Prev)FmTx96 458.666 M 0 0 396(  zzlextext     Prev        Prev      Prev        --          Prev)FmTx96 468.666 M 0 0 396(  ZZINF_LA\(0\)               Prev                              Prev)FmTx96 478.666 M 0 0 396(  ZZINF_LA\(1\)               Next                              Next)FmTx96 488.666 M 0 0 426(-----------------------------------------------------------------------)FmTxFmE60 509 495 11 rC5063 0 :MFrMacBegin60 510 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 511 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC5063 0 :Mf1_10 sf( )S5065 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 506.666 M (\(C Mode\) Execution-Time Routines)S60 530.666 M (#185.)S2.7 N (Calls to zzskip\(\) and zzmore\(\) should appear only in #token actions \(or in subroutines they call\))S60 546.666 M (#186.)S2.7 N (Use )SFmE5066 0 :Mf1_8 sf( )S5068 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 546.666 M (ANTLR)SFmE5068 0 :Mf1_10 sf( )S5070 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP129.911 546.666 M (s or )SFmE5070 0 :Mf1_8 sf( )S5072 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP147.128 546.666 M (ANTLR)SFmE5072 0 :Mf1_10 sf( )S5074 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP173.792 546.666 M (f in line-oriented languages to control the prefetching of characters and tokens)S85.2 562.666 M (Write your own input routine and then use )SFmE5075 0 :Mf1_8 sf( )S5077 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP257.37 562.666 M (ANTLR)SFmE5077 0 :Mf1_10 sf( )S5079 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP284.034 562.666 M (s \(input supplied by string\) or )SFmE5079 0 :Mf1_8 sf( )S5081 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP405.121 562.666 M (ANTLR)SFmE5081 0 :Mf1_10 sf( )S5083 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP431.785 562.666 M (f \(input supplied by function\) )S85.2 574.666 M (rather than plain )SFmE5084 0 :Mf1_8 sf( )S5086 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP153.222 574.666 M (ANTLR)SFmE5086 0 :Mf1_10 sf( )S5088 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP179.887 574.666 M ( which is used in most of the examples.)S60 590.666 M (#187.)S2.7 N (Saving and restoring parser state in order to parse other objects \(input files\))S85.2 606.666 M (Suppose one wants to parse files that \"include\" other files.  The code in )SFmE5088 0 :Mf1_8 sf( )S5090 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP372.981 606.666 M (ANTLR)SFmE5090 0 :Mf1_10 sf( )S5092 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP399.645 606.666 M ( \(antlr.g\) for handling #tokdefs )S85.2 618.666 M (statements demonstrates how this may be done:)SFmE5093 0 :Mf2_10 sf( )S5099 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 632.666 M 0 0 102(    grammar:  ...)FmTx96 642.666 M 0 0 228(              | \"#tokdefs\"  QuotedTerm)FmTx96 652.666 M 0 0 114(                <<{)FmTx96 664.666 M 0 0 438(                zzantlr_state           st;     /* defined in antlr.h  */)FmTx96 674.666 M 0 0 438(                struct zzdlg_state      dst;    /* defined in dlgdef.h */)FmTx96 684.666 M 0 0 258(                FILE                    *f;)FmTx96 696.666 M 0 0 336(                UserTokenDefsFile = mystrdup\(LATEXT\(1\)\);)FmTx96 706.666 M 0 0 240(                zzsave_antlr_state\(&st\);)FmTx96 716.666 M 0 0 234(                zzsave_dlg_state\(&dst\);)FmTxFmEendp%%Page: 44 44%%BeginPageSetupinitializepage(Moog; page: 44 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC5099 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE5099 0 :Mf0_10 sf( )S5101 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (44)S7 FmP60 78 495 648 FmqFFmE5102 0 :Mf2_10 sf( )S5108 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 84.667 M 0 0 324(                f = fopen\(StripQuotes\(LATEXT\(1\)\),\"r\"\);)FmTx96 94.667 M 0 0 192(                if \( f==NULL \) {)FmTx96 104.667 M 0 0 396(                    warn\(eMsg1\(\"cannot open token defs file \'%s\'\",)FmTx96 114.667 M 0 0 282(                                LATEXT\(1\)+1\)\);})FmTx96 124.667 M 0 0 132(                else {)FmTx96 134.667 M 0 0 366(                    ANTLRm\( enum_file\(\), f, PARSE_ENUM_FILE\);)FmTx96 144.667 M 0 0 234(                    UserDefdTokens = 1;)FmTx96 154.667 M 0 0 102(                })FmTx96 164.667 M 0 0 258(                zzrestore_antlr_state\(&st\);)FmTx96 174.667 M 0 0 252(                zzrestore_dlg_state\(&dst\);)FmTx96 184.667 M 0 0 114(                }>>)FmTxFmE5108 0 :Mf1_10 sf( )S5110 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 200.666 M (The code uses zzsave_antlr_state\(\) and zzsave_dlg_state\(\) to save the state of the current parse.  The )SFmE5110 0 :Mf1_8 sf( )S5112 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP489.702 200.666 M (ANTLR)SFmE5112 0 :Mf1_10 sf( )S5114 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP516.366 200.666 M (m macro )S85.2 212.666 M (specifies a starting rule for )SFmE5115 0 :Mf1_8 sf( )S5117 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP194.306 212.666 M (ANTLR)SFmE5117 0 :Mf1_10 sf( )S5119 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP220.971 212.666 M ( of \"enum_file\" and starts )SFmE5119 0 :Mf1_8 sf( )S5121 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP326.036 212.666 M (DLG)SFmE5121 0 :Mf1_10 sf( )S5123 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP342.478 212.666 M ( in the )SFmE5124 0 :Mf1_8 sf( )S5126 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP369.973 212.666 M (PARSE_ENUM_FILE)SFmE5126 0 :Mf1_10 sf( )S5128 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP443.313 212.666 M ( state rather than the )S85.2 224.666 M (default state \(which is the current state \321 whatever it might be\).  Because enum_file\(\) is called without any )S85.2 236.666 M (arguments it appears that enum_file\(\) does not use ASTs nor pass back any attributes. Contributed by TJP.)SFmE60 259 495 11 rC5128 0 :MFrMacBegin60 260 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 261 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC5128 0 :Mf1_10 sf( )S5130 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 256.666 M (\(C Mode\) Attributes)S60 280.666 M (#188.)S2.7 N (Use symbolic tags \(rather than numbers\) to refer to attributes and ASTs in rules)S85.2 296.666 M (prior to version 1.30:)SFmE5131 0 :Mf2_10 sf( )S5137 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 296.666 M 0 0 60(rule : X Y)FmTx84 N 0 0 168(<<printf\(\"%s %s\",$1,$2\);>> ;)FmTxFmE5137 0 :Mf1_10 sf( )S5139 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 308.666 M (     sinc version 1.30:)SFmE5139 0 :Mf2_10 sf( )S5145 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 308.666 M 0 0 96(rule : xx:X yy:Y)FmTx48 N 0 0 180(<<printf\(\"%s %s\",$xx,$yy\);>> ;)FmTxFmE5145 0 :Mf1_10 sf( )S5147 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 324.666 M (#189.)S2.7 N (Rules no longer have attributes: )S( )S( )SFmE5148 0 :Mf2_10 sf( )S5154 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP219.883 324.666 M 0 0 180(rule : r1:rule1 <<...$r1...;>>)FmTxFmE5154 0 :Mf1_10 sf( )S5156 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP399.883 324.666 M ( won\325t work)S85.2 340.666 M (Actually this still works if one restricts oneself to C mode and uses )SFmE5156 0 :Mf0_10 sf( )S5158 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP355.398 340.666 M (numeric)SFmE5159 0 :Mf1_10 sf( )S5161 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP388.161 340.666 M ( labels like $1 and $2.  However )S85.2 352.666 M (numeric labels are a deprecated feature, can\325t be used in C++ mode,  and can\325t be used in the same source file as )S85.2 364.666 M (symbolic labels, so it\325s best to avoid them.)S60 380.666 M (#190.)S2.7 N (Attributes are built automatically only for terminals)S85.2 396.666 M (To construct attributes under any other circumstances one must use )SFmE5161 0 :Mf2_10 sf( )S5167 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP356.76 396.666 M 0 0 12($[)FmTxFmE5167 0 :Mf0_10 sf( )S5169 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP368.76 396.666 M (TokenCode)SFmE5170 0 :Mf2_10 sf( )S5176 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP414.304 396.666 M 0 0 30(,...])FmTxFmE5176 0 :Mf1_10 sf( )S5178 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP444.304 396.666 M ( or zzcr_attr\(\).)S60 412.666 M (#191.)S2.7 N (How to access the text or token part of an attribute)S85.2 428.666 M (The way to access the text, token, \(or whatever\) part of an attribute depends on the way the attribute is stored. If one )S85.2 440.666 M (uses the )SFmE5178 0 :Mf1_8 sf( )S5180 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP119.634 440.666 M (PCCTS)SFmE5180 0 :Mf1_10 sf( )S5182 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.091 440.666 M ( supplied routine \"pccts/h/charbuf.h\" then:)SFmE5183 0 :Mf2_10 sf( )S5189 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 454.666 M 0 0 372(id : \"[a-z]+\"           <<printf\(\"Token is %s\\n\",$1.text\);>> ;)FmTxFmE5189 0 :Mf1_10 sf( )S5191 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 468.666 M (If one uses the )SFmE5191 0 :Mf1_8 sf( )S5193 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP145.727 468.666 M (PCCTS)SFmE5193 0 :Mf1_10 sf( )S5195 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP170.184 468.666 M ( supplied routine \"pccts/h/charptr.c\" and \"pccts/h/charptr.h\" then:)SFmE5196 0 :Mf2_10 sf( )S5202 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 482.666 M 0 0 342(id : \"[a-z]+\"           <<printf\(\"Token is %s\\n\",$1\);>> ;)FmTxFmE5202 0 :Mf1_10 sf( )S5204 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 496.666 M (If one uses the )SFmE5204 0 :Mf1_8 sf( )S5206 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP145.727 496.666 M (PCCTS)SFmE5206 0 :Mf1_10 sf( )S5208 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP170.184 496.666 M ( supplied routine \"pccts/h/int.h\" \(which stores numbers only\) then:)SFmE5209 0 :Mf2_10 sf( )S5215 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 510.666 M 0 0 348(number : \"[0-9]+\"       <<printf \(\"Token is %d\\n\",$1\);>> ;)FmTxFmE5215 0 :Mf1_10 sf( )S5217 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204 524.666 M (\(Note the use of \"%d\" rather than \"%s\" in the printf\(\) format\).)S60 540.666 M (#192.)S2.7 N (The $0 and $$ constructs are no longer supported \321 use inheritance instead \(Item )S(#113)S(\))S60 556.666 M (#193.)S2.7 N (If you use attributes then define a zzd_attr\(\) to release resources \(memory\) when an attribute is destroyed)S60 572.666 M (#194.)S2.7 N (Don\'t pass automatically constructed attributes to an outer rule or sibling rule \321 they\325ll be out of scope)S85.2 588.666 M (The )SFmE5217 0 :Mf1_8 sf( )S5219 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP103.247 588.666 M (PCCTS)SFmE5219 0 :Mf1_10 sf( )S5221 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP127.704 588.666 M ( generated variables which contain automatically generated attributes go out of scope at the end of the )S85.2 600.666 M (rule or sub-rule that contains them.  Of course you can copy the attribute to a variable that won\325t go out of scope.  If )S85.2 612.666 M (the attribute contains a pointer which is copied \(e.g. pccts/h/charptr.c\) then extra caution is required because of the )S85.2 624.666 M (actions of zzd_attr\(\).  See Item )S(#195)S(.)S60 640.666 M (#195.)S2.7 N (A charptr.c attribute must be copied before being passed to a calling rule)S85.2 656.666 M (The pccts/h/charptr.c routines use a pointer to a string.  The string itself will go out of scope when the rule or sub-)S85.2 668.666 M (rule is exited.  Why ? The string is copied to the heap when )SFmE5222 0 :Mf1_8 sf( )S5224 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP325.395 668.666 M (ANTLR)SFmE5224 0 :Mf1_10 sf( )S5226 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP352.059 668.666 M ( calls the routine zzcr_attr\(\) supplied by charptr.c )S85.2 680.666 M (\321 however )SFmE5226 0 :Mf1_8 sf( )S5228 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP134.624 680.666 M (ANTLR)SFmE5228 0 :Mf1_10 sf( )S5230 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP161.288 680.666 M ( also calls the charptr.c supplied routine zzd_attr\(\) \(which frees the allocated string\) as soon as )S85.2 692.666 M (the rule or sub-rule exits.  The result is that in order to pass charptr.c strings to outer rules via inheritance it is )S85.2 704.666 M (necessary to make an independent copy of the string \(using strdup for example\) or else by zeroing the original )S85.2 716.666 M (pointer to prevent its deallocation.)SFmEendp%%Page: 45 45%%BeginPageSetupinitializepage(Moog; page: 45 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC5231 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE5231 0 :Mf0_10 sf( )S5233 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (45)S7 FmP60 78 495 648 FmqFFmE5234 0 :Mf1_10 sf( )S5236 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (#196.)S2.7 N (Attributes created in a rule should be assumed )SFmE5236 0 :Mf0_10 sf( )S5238 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP272.348 84.667 M (not)SFmE5239 0 :Mf1_10 sf( )S5241 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP285.127 84.667 M ( valid on entry to a fail action)S85.2 100.667 M (Fail action are \"... executed after a syntax error is detected but before a message is printed and the attributes have )S85.2 112.667 M (been destroyed. However, attributes are not valid here because one does not know at what point the error occurred )S85.2 124.667 M (and which attributes even exist.  Fail actions are often useful for cleaning up data structures or freeing memory.\" )S85.2 136.667 M (\(Page 29 of 1.00 manual\))S85.2 152.667 M (Example of a fail action:)SFmE5241 0 :Mf2_10 sf( )S5247 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 166.667 M 0 0 186(          a : <<List *p=NULL;>>)FmTx96 176.667 M 0 0 252(              \( v:Var <<append\(p,$v\);>> \)+)FmTx96 186.667 M 0 0 270(                  <<operateOn\(p\);rmlist\(p\);>>)FmTx96 196.667 M 0 0 168(            ; <<rmlist\(p\);>>)FmTx96 206.667 M 0 0 288(              ^^^^^^^^^^^^^^    <--- Fail Action)FmTxFmE5247 0 :Mf1_10 sf( )S5249 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 222.666 M (#197.)S2.7 N (Use a fail action to destroy temporary attributes when a rule fails)S85.2 238.666 M (If you construct temporary, local, attributes in the middle of the recognition of a rule, remember to deallocate the )S85.2 250.666 M (structure should the rule fail.  The code for failure goes after the \";\" and before the next rule.  For this reason it is )S85.2 262.666 M (sometimes desirable to defer some processing until the rule is recognized rather than the most convenient place:)SFmE5250 0 :Mf2_10 sf( )S5256 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 276.666 M 0 0 216(        #include \"pccts/h/charptr.h\")FmTx96 288.666 M 0 0 114(        ;statement!)FmTx96 298.666 M 0 0 216(                : <<char *label=0;>>)FmTx96 308.666 M 0 0 372(                  {name:ID COLON  <<label=MYstrdup\($name\);>> })FmTx96 318.666 M 0 0 300(                         s:statement_without_label)FmTx96 328.666 M 0 0 384(                                <<#0=#\(#[T_statement,label],#s\);)FmTx96 338.666 M 0 0 360(                                  if \(label!=0\) free\(label\);)FmTx96 348.666 M 0 0 204(                                >>)FmTx96 358.666 M 0 0 240(        ;<<if \(label !=0\) free\(label\);>>)FmTxFmE5256 0 :Mf1_10 sf( )S5258 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 374.666 M (In the above example attributes are handled by charptr.* \(see the warning, Item )S(#195)S(\). The call to MYstrdup\(\) is )S85.2 386.666 M (necessary because $name will go out of scope at the end of the subrule \"{name:ID COLON}\". The routine written )S85.2 398.666 M (to construct ASTs from attributes \(invoked by )SFmE5258 0 :Mf2_10 sf( )S5264 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP272.09 398.666 M 0 0 78(#[int,char *])FmTxFmE5264 0 :Mf1_10 sf( )S5266 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP350.09 398.666 M (\) knows about this behavior and always makes a )S85.2 410.666 M (copy of the character string when it constructs the AST.  This makes the copy created by the explicit call to )S85.2 422.666 M (MyStrdup redundant once the AST has been constructed.  If the call to \"statement_without_label\" fails then the )S85.2 434.666 M (temporary copy must be deallocated.)S60 450.666 M (#198.)S2.7 N (When you need more information for a token than just token type, text, and line number)S85.2 466.666 M (Passing accurate column information along with the token in C mode when using syntactic predicates requires )S85.2 478.666 M (workarounds.  P.A. Keller \(keller@ebi.ac.uk\) has worked around this limitation of C mode by passing the address of )S85.2 490.666 M (a user-defined struct \(rendered as text using format codes \"%p\" or \"%x\"\) along with \(or instead\) of the token\325s )S85.2 502.666 M (actual text.  This requires changes in syntax error routines and other places where the token text might be displayed.)S60 518.666 M (#199.)S2.7 N (About the pipeline between )SFmE5267 0 :Mf1_8 sf( )S5269 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP197.939 518.666 M (DLG)SFmE5269 0 :Mf1_10 sf( )S5271 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP214.381 518.666 M ( and )SFmE5271 0 :Mf1_8 sf( )S5273 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP233.819 518.666 M (ANTLR)SFmE5273 0 :Mf1_10 sf( )S5275 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP260.483 518.666 M ( \(C mode\))S85.2 534.666 M (I find it helpful to think of lexical processing by )SFmE5276 0 :Mf1_8 sf( )S5278 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP279.587 534.666 M (DLG)SFmE5278 0 :Mf1_10 sf( )S5280 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP296.029 534.666 M ( as a process which fills a pipeline and of )SFmE5280 0 :Mf1_8 sf( )S5282 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP463.182 534.666 M (ANTLR)SFmE5282 0 :Mf1_10 sf( )S5284 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP489.846 534.666 M ( as a process )S85.2 546.666 M (which empties a pipeline. \(This relationship is exposed in C++ mode because of the )SFmE5285 0 :Mf1_8 sf( )S5287 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP422.763 546.666 M (ANTLR)SFmE5287 0 :Mf1_10 sf( )S5289 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP449.428 546.666 M (TokenBuffer class\).)S85.2 562.666 M (With LL_K=1 the pipeline is only one item deep, trivial, and invisible. It is invisible because one can make a )S85.2 574.666 M (decision in )SFmE5289 0 :Mf1_8 sf( )S5291 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP131.301 574.666 M (ANTLR)SFmE5291 0 :Mf1_10 sf( )S5293 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP157.965 574.666 M ( to change the )SFmE5294 0 :Mf1_8 sf( )S5296 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP216.276 574.666 M (DLG)SFmE5296 0 :Mf1_10 sf( )S5298 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP232.717 574.666 M ( #lexclass with zzmode\(\) and have the next token \(the one following the one )S85.2 586.666 M (just parsed by )SFmE5298 0 :Mf1_8 sf( )S5300 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP143.24 586.666 M (ANTLR)SFmE5300 0 :Mf1_10 sf( )S5302 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP169.904 586.666 M (\) parsed according to the new #lexclass.)S85.2 602.666 M (With LL_K>1 the pipeline is not invisible.  )SFmE5303 0 :Mf1_8 sf( )S5305 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP261.086 602.666 M (DLG)SFmE5305 0 :Mf1_10 sf( )S5307 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP277.528 602.666 M ( will put a number of tokens into the pipeline and )SFmE5307 0 :Mf1_8 sf( )S5309 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP477.2 602.666 M (ANTLR)SFmE5309 0 :Mf1_10 sf( )S5311 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP503.865 602.666 M ( will )S85.2 614.666 M (analyze them in the same order.  How many tokens are in the pipeline depends on options one has chosen.)S96 630.666 M (Case 1: Infinite lookahead mode \(\")SFmE5312 0 :Mf2_10 sf( )S5318 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP235.861 630.666 M 0 0 36(\(...\)?)FmTxFmE5318 0 :Mf1_10 sf( )S5320 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP271.861 630.666 M (\"\). The pipeline is as huge as the input since the entire input is )S96 642.666 M (tokenized by )SFmE5320 0 :Mf1_8 sf( )S5322 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP149.872 642.666 M (DLG)SFmE5322 0 :Mf1_10 sf( )S5324 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP166.313 642.666 M ( before )SFmE5325 0 :Mf1_8 sf( )S5327 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP196.846 642.666 M (ANTLR)SFmE5327 0 :Mf1_10 sf( )S5329 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP223.51 642.666 M ( even begins analysis.)S96 658.666 M (Case 2: Demand lookahead \(interactive mode\). There is a varying amount of lookahead depending on how much )SFmE5329 0 :Mf1_8 sf( )S5331 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 670.666 M (ANTLR)SFmE5331 0 :Mf1_10 sf( )S5333 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP122.664 670.666 M ( thinks it needs to predict which rule to execute next.  This may be zero tokens \(or maybe it\325s one token\) )S96 682.666 M (up to )SFmE5334 0 :Mf0_10 sf( )S5336 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP118.778 682.666 M (k)SFmE5336 0 :Mf1_10 sf( )S5338 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP123.217 682.666 M ( tokens.  Naturally, it takes extra work by )SFmE5339 0 :Mf1_8 sf( )S5341 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP291.212 682.666 M (ANTLR)SFmE5341 0 :Mf1_10 sf( )S5343 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP317.876 682.666 M ( to keep track of how many tokens are in the pipe and how )S96 694.666 M (many are needed to parse the next rule.)S96 710.666 M (Case 3: Normal mode. )SFmE5343 0 :Mf1_8 sf( )S5345 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP188.473 710.666 M (DLG)SFmE5345 0 :Mf1_10 sf( )S5347 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204.915 710.666 M ( stays exactly )SFmE5348 0 :Mf0_10 sf( )S5350 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP261.282 710.666 M (k)SFmE5350 0 :Mf1_10 sf( )S5352 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP265.72 710.666 M ( tokens ahead of )SFmE5353 0 :Mf1_8 sf( )S5355 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP333.469 710.666 M (ANTLR)SFmE5355 0 :Mf1_10 sf( )S5357 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP360.133 710.666 M (.  This is a half-truth.  It rounds )SFmE5357 0 :Mf0_10 sf( )S5359 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP487.594 710.666 M (k)SFmE5360 0 :Mf1_10 sf( )S5362 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP492.033 710.666 M ( up to the next )S96 722.666 M (power of 2 so that with k=3 it actually has a pipeline of 4 tokens. If one says \"-k 3\" the analysis is still )SFmE5362 0 :Mf0_10 sf( )S5364 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP506.627 722.666 M (k)SFmE5365 0 :Mf1_10 sf( )S5367 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP511.066 722.666 M (=3, but )SFmEendp%%Page: 46 46%%BeginPageSetupinitializepage(Moog; page: 46 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC5367 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE5367 0 :Mf0_10 sf( )S5369 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (46)S7 FmP60 78 495 648 FmqFFmE5370 0 :Mf1_10 sf( )S5372 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 84.667 M (the pipeline size is rounded up because TJP decided it was faster to use a bit-wise \"and\" to compute the next )S96 96.667 M (position in a circular buffer rather than \(n+1\) mod k.)SFmE60 119 495 12 rC5372 0 :MFrMacBegin60 120 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 121 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC5372 0 :Mf1_10 sf( )S5374 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 116.667 M (\(C Mode\) ASTs)S60 140.667 M (#200.)S2.7 N (Define a zzd_ast\(\) to recover resources when an AST is deleted)S60 156.667 M (#201.)S2.7 N (How to place prototypes for routines using ASTs in the #header)S85.2 172.667 M (Add #include \"ast.h\" after the #define AST_FIELDS and before any references to AST:)SFmE5375 0 :Mf2_10 sf( )S5381 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 186.667 M 0 0 288(        #define AST_FIELDS int token;char *text;)FmTx96 196.667 M 0 0 144(        #include \"ast.h\")FmTx96 206.667 M 0 0 288(        #define zzcr_ast\(ast,attr,tok,astText\) \\)FmTx96 216.667 M 0 0 270(                create_ast\(ast,attr,tok,text\))FmTx96 226.667 M 0 0 390(        void create_ast \(AST *ast,Attr *attr,int tok,char *text\);)FmTxFmE5381 0 :Mf1_10 sf( )S5383 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 242.667 M (#202.)S2.7 N (To free an AST tree use zzfree_ast\(\) to recursively descend the AST tree and free all sub-trees)S85.2 258.667 M (The user should supply a routine zzd_ast\(\) to free any resources used by a single node \321 such as pointers to )S85.2 270.667 M (character strings allocated on the heap.)S60 286.667 M (#203.)S2.7 N (Use #define zzAST_DOUBLE to add support for doubly linked ASTs)S85.2 302.667 M (There is an option for doubly linked ASTs in the module ast.c. It is controlled by #define zzAST_DOUBLE.  Even )S85.2 314.666 M (with zzAST_DOUBLE only the right and down fields are filled while the AST tree is constructed.  Once the tree is )S85.2 326.666 M (constructed the user must call the routine zzdouble_link\(tree,0,0\) to traverse the tree and fill in the left and up fields.)SFmE60 349 495 11 rC5383 0 :MFrMacBegin60 350 495 10 FmKp0 0 0 1 0 0 0 FmK0 FmP60 351 FmB468 0 FmL2 1 FmSoFmEgRgS 0 0 588 768 rC5383 0 :Mf1_10 sf( )S5385 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 346.666 M (Extended Examples and Short Descriptions of Distributed Source Code)S60 370.667 M (Examples mentioned in these notes are available as .zip files at the sites mentioned in Item )S(#1)S(.  In keeping with the )S60 382.667 M (restrictions in )SFmE5386 0 :Mf1_8 sf( )S5388 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.202 382.667 M (PCCTS)SFmE5388 0 :Mf1_10 sf( )S5390 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP141.659 382.667 M (, I have used neither templates nor multiple inheritance in these examples.)S60 398.666 M (All these examples use AST classes which are derived from NoLeakAST. Some of them use tokens which are derived )S60 410.666 M (from NoLeakToken.  These classes maintain a doubly-linked list of all ASTs \(or tokens\) which have been created but not )S60 422.666 M (yet deleted making it possible to recover memory for these objects.)S60 438.666 M (#1.)SFmE5390 0 :Mf1_8 sf( )S5392 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 438.666 M (DLG)SFmE5392 0 :Mf1_10 sf( )S5394 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP101.641 438.666 M ( definitions for C and C++ comments, character literals, and string literals)S85.2 454.666 M (See files in notes/cstuff/cstr.g \(C mode\) or notes/cstuff/cppstr.g \(C++ mode\).  Contributed by John D. Mitchell )S85.2 466.666 M (\(johnm@jGuru.com\).)S60 482.666 M (#2.)S12.7 N (A simple floating point calculator implemented using )SFmE5395 0 :Mf1_8 sf( )S5397 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP301.531 482.666 M (PCCTS)SFmE5397 0 :Mf1_10 sf( )S5399 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP325.988 482.666 M ( attributes and inheritance)S85.2 498.666 M (This is )SFmE5399 0 :Mf1_8 sf( )S5401 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP114.643 498.666 M (the PCCTS)SFmE5401 0 :Mf1_10 sf( )S5403 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP150.874 498.666 M ( equivalent of the approach used in the canonical yacc example.  See notes/calctok/*.)S60 514.666 M (#3.)S12.7 N (A simple floating point calculator implemented using )SFmE5404 0 :Mf1_8 sf( )S5406 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP301.531 514.666 M (PCCTS)SFmE5406 0 :Mf1_10 sf( )S5408 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP325.988 514.666 M ( ASTs and C++ virtual functions)S85.2 530.666 M (See files in notes/calcAST/*.)S85.2 546.666 M (In this example an expression tree is built using ASTs.  For each operator in the tree there is a different class derived )S85.2 558.666 M (from AST with an operator specific implementation of the virtual function \"eval\(\)\".  Evaluation of the expression is )S85.2 570.666 M (performed by calling eval\(\) for the root node of the AST tree.  Each node invokes eval\(\) for its children nodes, )S85.2 582.666 M (computes its own operation, and passed the result to its parent in a recursive manner.)S60 598.666 M (#4.)S12.7 N (An )SFmE5408 0 :Mf1_8 sf( )S5410 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP99.919 598.666 M (ANTLR)SFmE5410 0 :Mf1_10 sf( )S5412 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP126.583 598.666 M (Token class for variable length strings allocated from the heap)S85.2 614.666 M (This is no longer useful since )SFmE5413 0 :Mf1_8 sf( )S5415 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP205.166 614.666 M (ANTLR)SFmE5415 0 :Mf1_10 sf( )S5417 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP231.83 614.666 M (CommonToken uses the heap.)S60 630.666 M (#5.)S12.7 N (How to extend )SFmE5417 0 :Mf1_8 sf( )S5419 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP146.572 630.666 M (PCCTS)SFmE5419 0 :Mf1_10 sf( )S5421 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP171.029 630.666 M ( C++ classes using the example of adding column information)S85.2 646.666 M (See files in notes/col/*)S85.2 662.666 M (This demonstrates how to add column information to tokens and to produce syntax error messages using this )S85.2 674.666 M (information.  This example derives classes from )SFmE5422 0 :Mf1_8 sf( )S5424 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP280.122 674.666 M (ANTLR)SFmE5424 0 :Mf1_10 sf( )S5426 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP306.786 674.666 M (Token and)SFmE5426 0 :Mf1_8 sf( )S5428 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP349.271 674.666 M ( ANTLR)SFmE5428 0 :Mf1_10 sf( )S5430 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP377.935 674.666 M (TokenBuffer.)S60 690.666 M (#6.)S12.7 N (Use of parser exception handling in C and C++ programs)S85.2 706.666 M (For C see notes/exc/extestc.g and test1.dat)S85.2 718.666 M (For C++ see notes/excpp/extestcpp.g and test1.dat)SFmEendp%%Page: 47 47%%BeginPageSetupinitializepage(Moog; page: 47 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC5431 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE5431 0 :Mf0_10 sf( )S5433 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (47)S7 FmP60 78 495 648 FmqFFmE5434 0 :Mf1_10 sf( )S5436 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (#7.)S12.7 N (How to pass whitespace through )SFmE5436 0 :Mf1_8 sf( )S5438 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP217.658 84.667 M (DLG)SFmE5438 0 :Mf1_10 sf( )S5440 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP234.1 84.667 M ( for pretty-printers)S85.2 100.667 M (See files in notes/ws/*)S85.2 116.667 M (This demonstrates how to combine several separate )SFmE5441 0 :Mf1_8 sf( )S5443 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP293.723 116.667 M (DLG)SFmE5443 0 :Mf1_10 sf( )S5445 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP310.164 116.667 M ( tokens \(whitespace for this example\) into a single )SFmE5445 0 :Mf1_8 sf( )S5447 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP513.697 116.667 M (ANTLR)SFmE5447 0 :Mf1_10 sf( )S5449 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP540.361 116.667 M ( )S85.2 128.667 M (token.  It also demonstrates careful processing of tab characters to generate accurate column information even )S85.2 140.667 M (within comments or other constructs which use more\(\).)S60 156.667 M (#8.)S12.7 N (How to prepend a newline to the )SFmE5450 0 :Mf1_8 sf( )S5452 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP218.208 156.667 M (DLG)SFmE5452 0 :Mf1_10 sf( )S5454 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP234.649 156.667 M (InputStream via derivation from )SFmE5454 0 :Mf1_8 sf( )S5456 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP366.265 156.667 M (DLG)SFmE5456 0 :Mf1_10 sf( )S5458 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP382.707 156.667 M (Lexer)S85.2 172.667 M (See files in notes/prependnl/*)S85.2 188.667 M (This demonstrates how to derive from )SFmE5459 0 :Mf1_8 sf( )S5461 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP240.146 188.667 M (DLG)SFmE5461 0 :Mf1_10 sf( )S5463 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP256.588 188.667 M (Lexer in order to replace a user-supplied )SFmE5463 0 :Mf1_8 sf( )S5465 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP421.217 188.667 M (DLG)SFmE5465 0 :Mf1_10 sf( )S5467 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP437.658 188.667 M (InputStream routine with )S85.2 200.667 M (another which can perform additional processing on the input character stream before the characters are passed to )SFmE5468 0 :Mf1_8 sf( )S5470 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 212.667 M (DLG)SFmE5470 0 :Mf1_10 sf( )S5472 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP101.641 212.667 M (.  In this case a single newline is prepended to the input.  This is done to make it easier to treat the first non-)S85.2 224.667 M (blank token on a line as a special case, even when it appears on the very first line of the input file.)S60 240.666 M (#9.)S12.7 N (How to maintain a stack of #lexclass modes)S85.2 256.666 M (See files in notes/modestack/*)S85.2 272.666 M (This is based on routines written by David Seidel which allow the user to pass a a routine to be executed when the )S85.2 284.666 M (mode is popped from the stack.)S60 300.666 M (#10.)S7.7 N (When you want to change the token type just before passing the token to the parser)S85.2 316.666 M (See files in notes/predbuf/*)S85.2 332.666 M (This program shows how to reassign token codes to tokens at the time they are fetched by the parser by deriving )S85.2 344.666 M (from class )SFmE5472 0 :Mf1_8 sf( )S5474 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP129.067 344.666 M (ANTLR)SFmE5474 0 :Mf1_10 sf( )S5476 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP155.731 344.666 M (TokenBuffer and changing the behavior of getToken\(\).)S60 360.666 M (#11.)S7.7 N (Rewriting a grammar to remove left recursion and perform left factoring)S85.2 376.666 M (The original grammar:)SFmE5477 0 :Mf2_10 sf( )S5483 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 390.666 M 0 0 240(         command := SET var BECOMES expr)FmTx96 400.666 M 0 0 318(                       |  SET var BECOMES QUOTE QUOTE)FmTx96 410.666 M 0 0 342(                       |  SET var BECOMES QUOTE expr QUOT)FmTx96 420.666 M 0 0 366(                       |  SET var BECOMES QUOTE command QUOTE)FmTx96 440.666 M 0 0 282(         expr    := QUOTE anyCharButQuote QUOTE)FmTx96 450.666 M 0 0 246(                       |  expr AddOp expr)FmTx96 460.666 M 0 0 246(                       |  expr MulOp expr)FmTxFmE5483 0 :Mf1_10 sf( )S5485 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 476.666 M (The repetition of \"SET var BECOMES\" for command would require k=4 to get to the interesting part.  The first step )S85.2 488.666 M (is to left-factor \"command\":)SFmE5485 0 :Mf2_10 sf( )S5491 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 502.666 M 0 0 210(         command := SET var BECOMES)FmTx96 512.666 M 0 0 180(                        \( expr)FmTx96 522.666 M 0 0 222(                        | QUOTE QUOTE)FmTx96 532.666 M 0 0 252(                        | QUOTE expr QUOTE)FmTx96 542.666 M 0 0 270(                        | QUOTE command QUOTE)FmTx96 552.666 M 0 0 150(                        \))FmTxFmE5491 0 :Mf1_10 sf( )S5493 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 566.666 M (The definition of expr uses left recursion which must be eliminated when using )SFmE5494 0 :Mf1_8 sf( )S5496 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP404.812 566.666 M (ANTLR)SFmE5496 0 :Mf1_10 sf( )S5498 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP431.476 566.666 M (:)SFmE5498 0 :Mf2_10 sf( )S5504 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 580.666 M 0 0 150(         op      := AddOp)FmTx96 590.666 M 0 0 150(                 |  MulOp)FmTx96 600.666 M 0 0 348(         expr    := QUOTE anyCharButQuote QUOTE \(op expr\)*)FmTxFmE5504 0 :Mf1_10 sf( )S5506 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 616.666 M (Since expr begins with QUOTE and all the alternatives of the sub-rule of command also start with QUOTE.  This )S85.2 628.666 M (too can be left-factored:)SFmE5507 0 :Mf2_10 sf( )S5513 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 642.666 M 0 0 252(          command := SET var BECOMES QUOTE)FmTx96 652.666 M 0 0 222(                        \( expr_suffix)FmTx96 662.666 M 0 0 186(                        | QUOTE)FmTx96 672.666 M 0 0 216(                        | expr QUOTE)FmTx96 682.666 M 0 0 234(                        | command QUOTE)FmTx96 692.666 M 0 0 150(                        \))FmTx96 702.666 M 0 0 336(         expr_suffix := anyCharButQuote QUOTE \(op expr\)*)FmTx96 712.666 M 0 0 246(         expr        := QUOTE expr_suffix)FmTxFmEendp%%Page: 48 48%%BeginPageSetupinitializepage(Moog; page: 48 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC5513 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE5513 0 :Mf0_10 sf( )S5515 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (48)S7 FmP60 78 495 648 FmqFFmE5516 0 :Mf1_10 sf( )S5518 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 84.667 M (The final grammar can be built by )SFmE5518 0 :Mf1_8 sf( )S5520 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP224.309 84.667 M (ANTLR)SFmE5520 0 :Mf1_10 sf( )S5522 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP250.973 84.667 M ( with k=2.)SFmE5523 0 :Mf2_10 sf( )S5529 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 98.667 M 0 0 120(#token Q        \"\\\"\")FmTx96 108.667 M 0 0 126(#token SVB      \"svb\")FmTx126 N 0 0 126(//  \"SET var BECOMES\")FmTx96 118.667 M 0 0 168(#token Qbar     \"[a-z A-Z]*\")FmTx96 128.667 M 0 0 120(#token AddOp    \"\\+\")FmTx96 138.667 M 0 0 120(#token MulOp    \"\\*\")FmTx96 148.667 M 0 0 210(#token WS       \"\\ \"    <<skip\(\);>>)FmTx96 158.667 M 0 0 210(#token NL       \"\\n\"    <<skip\(\);>>)FmTx96 178.667 M 0 0 186(repeat      : \( command \)+ \"@\";)FmTx96 188.667 M 0 0 198(command     : SVB Q \( expr_suffix)FmTx96 198.666 M 0 0 168(                    | expr Q)FmTx96 208.666 M 0 0 372(                    | Q          <<printf\(\"null command\\n\"\);>>)FmTx96 218.666 M 0 0 342(                    | command Q  <<printf\(\"command\\n\"\);>>)FmTx96 228.666 M 0 0 132(                    \);)FmTx96 238.666 M 0 0 402(expr_suffix : Qbar Q <<printf\(\"The Qbar expr is \(%s\)\\n\",$1.text\);>>)FmTx96 248.666 M 0 0 174(                 { op expr };)FmTx96 258.666 M 0 0 168(expr        : Q expr_suffix;)FmTx96 268.666 M 0 0 174(op          : AddOp | MulOp ;)FmTxFmE5529 0 :Mf1_10 sf( )S5531 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 284.666 M (#12.)S7.7 N (Processing counted strings in )SFmE5531 0 :Mf1_8 sf( )S5533 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP204.617 284.666 M (DLG)SFmE5533 0 :Mf1_10 sf( )S5535 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 300.666 M (Sometimes literals are preceded by a count field.)SFmE5536 0 :Mf2_10 sf( )S5542 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132 314.666 M 0 0 126(3abc identifier 4defg)FmTxFmE5542 0 :Mf1_10 sf( )S5544 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 328.666 M (This example works by storing the count which precedes the string in a local variable and then switching to a )S85.2 340.666 M (#lexclass which accepts characters one at a time while decrementing a counter.  When the counter reaches zero \(or a )S85.2 352.666 M (newline in this example\) the )SFmE5544 0 :Mf1_8 sf( )S5546 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP200.993 352.666 M (DLG)SFmE5546 0 :Mf1_10 sf( )S5548 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP217.435 352.666 M ( routine switches back to the usual #lexclass.)SFmE5549 0 :Mf2_10 sf( )S5555 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP96 366.666 M 0 0 18(...)FmTx96 376.666 M 0 0 192(#lexaction <<static int count;>>)FmTx96 396.666 M 0 0 192(#token HOLLERITH        \"[0-9]*\")FmTx96 406.666 M 0 0 192(        <<count=atoi\(lextext\(\)\);)FmTx96 416.666 M 0 0 234(         printf\(\"Count is %d\\n\",count\);)FmTx96 426.666 M 0 0 126(         mode\(COUNT\);)FmTx96 436.666 M 0 0 60(        >>)FmTx96 446.666 M 0 0 162(#token Eof              \"@\")FmTx96 456.666 M 0 0 414(#token ID               \"[a-z]*\"  <<printf\(\"ID is %s\\n\",lextext\(\)\);>>)FmTx96 466.666 M 0 0 270(#token WS               \"\\ \"      <<skip\(\);>>)FmTx96 476.666 M 0 0 168(#token NL               \"\\n\")FmTx96 488.666 M 0 0 90(#lexclass COUNT)FmTx96 498.666 M 0 0 174(#token  STRING          \"~[]\")FmTx96 508.666 M 0 0 108(        <<count--;)FmTx96 518.666 M 0 0 162(          if \(count == 0\) {)FmTx96 528.666 M 0 0 156(              mode\(START\);)FmTx96 538.666 M 0 0 384(              printf \(\"Hollerith string is \\\"%s\\\"\\n\",lextext\(\)\);)FmTx96 548.666 M 0 0 204(          } else if \(ch == \'\\n\'\) {)FmTx96 558.666 M 0 0 156(              mode\(START\);)FmTx96 568.666 M 0 0 402(              printf\(\"Hollerith string %s terminated by newline\\n\",)FmTx96 578.666 M 0 0 162(                lextext\(\)\);)FmTx96 588.666 M 0 0 108(          } else {)FmTx96 598.666 M 0 0 126(              more\(\);)FmTx96 608.666 M 0 0 72(          };)FmTx96 618.666 M 0 0 60(        >>)FmTx96 628.666 M 0 0 54(class P {)FmTx96 638.666 M 0 0 336(  statement      : \( \(HOLLERITH STRING | ID \)* NL\)+ \"@\";)FmTx96 648.666 M 0 0 6(})FmTxFmE5555 0 :Mf1_10 sf( )S5557 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 664.666 M (See files in notes/hollerith/*)SFmEendp%%Page: 49 49%%BeginPageSetupinitializepage(Moog; page: 49 of 49)setjob%%EndPageSetupgS 0 0 588 768 rC5557 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE5557 0 :Mf0_10 sf( )S5559 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S123.881 N (49)S7 FmP60 78 495 648 FmqFFmE5560 0 :Mf1_10 sf( )S5562 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 84.667 M (#13.)S7.7 N (How to convert a failed validation predicate into a signal for treatment by parser exception handling)S85.2 100.667 M (See files notes/sim/*)S85.2 116.667 M (This program intercepts a failed validation predicate in order to pass a signal back up the call tree.  The example )S85.2 128.667 M (includes code which takes the signal returned by the start rule and invokes the default handler)S85.2 144.667 M (This example is not as clean as I would like because of the difficulty of adding new behavior to a parser class.)S60 160.667 M (#14.)S7.7 N (How to use Vern Paxson\325s flex with )SFmE5562 0 :Mf1_8 sf( )S5564 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP232.654 160.667 M (PCCTS)SFmE5564 0 :Mf1_10 sf( )S5566 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP257.111 160.667 M ( in C++ mode by inheritance from )SFmE5567 0 :Mf1_8 sf( )S5569 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP396.405 160.667 M (ANTLR)SFmE5569 0 :Mf1_10 sf( )S5571 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP423.069 160.667 M (TokenStream)S85.2 176.667 M (See files example.flex and flexLexer.* in notes/flex/*)S60 192.667 M (#15.)S7.7 N (Using the GNU gperf \(generate perfect hashing function\) with )SFmE5571 0 :Mf1_8 sf( )S5573 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP337.024 192.667 M (PCCTS)SFmE5573 0 :Mf1_10 sf( )S5575 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP85.2 208.667 M (See files in notes/gperfex/*)S85.2 224.667 M (The scanner generated by )SFmE5576 0 :Mf1_8 sf( )S5578 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP190.139 224.667 M (DLG)SFmE5578 0 :Mf1_10 sf( )S5580 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP206.58 224.667 M ( can be very large. For grammars which contain a large number of keywords it might )S85.2 236.667 M (make sense to the use of the GNU program \"gperf\".  The gperf programs attempts to generate a \"minimal perfect )S85.2 248.666 M (hash function\" for testing whether an argument is among a fixed set of strings such as those used in the reserved )S85.2 260.666 M (words of languages it has a large number of options to specify space/time trade-offs and the style of the code )S85.2 272.666 M (generated \(e.g. C++ vs. C, case sensitivity, arrays vs. case statements, etc.\).)S85.2 288.666 M (As a test I found that a grammar with  25 keywords caused )SFmE5580 0 :Mf1_8 sf( )S5582 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP323.164 288.666 M (DLG)SFmE5582 0 :Mf1_10 sf( )S5584 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP339.605 288.666 M ( to generate a file )SFmE5585 0 :Mf1_8 sf( )S5587 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP411.505 288.666 M (DLG)SFmE5587 0 :Mf1_10 sf( )S5589 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP427.946 288.666 M (Lexer.cpp with 22,000 )S85.2 300.666 M (characters.  Changing the lexical analysis code to use gperf resulted in a file )SFmE5589 0 :Mf1_8 sf( )S5591 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP391.448 300.666 M (DLG)SFmE5591 0 :Mf1_10 sf( )S5593 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP407.889 300.666 M (Lexer.cpp that was  2,800 )S85.2 312.666 M (characters.  The file generated by gperf was about 3,000 characters.)S85.2 328.666 M (The gperf program was originally written by Douglas C. Schmidt.  It is based on an algorithm developed by Keith )S85.2 340.666 M (Bostic. The gperf program is covered by the GNU General Public License. I do not know what restrictions there are )S85.2 352.666 M (on the output of gperf.  The source code can be found in comp.sources.unix, volume 20.)S85.2 368.666 M (Among the many )SFmE5594 0 :Mf1_8 sf( )S5596 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP157.131 368.666 M (FTP)SFmE5596 0 :Mf1_10 sf( )S5598 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP170.916 368.666 M ( sites with comp.sources.unix here are two:)S132 384.666 M (ftp.cis.ohio-state.edu/pub/comp.sources.unix/Volume20/gperf)S132 396.666 M (ftp.informatik.tu-muenchen.de/pub/comp/usenet/comp.sources.unix/gperf)S60 412.666 M (#16.)S7.7 N (Multiple files managed as a single token stream)S85.2 428.666 M (See files in notes/nested/*)S85.2 444.666 M (This example manages a file which may have an #include statement as a single stream of tokens.)SFmEendp%%Trailerend		% md%%EOF