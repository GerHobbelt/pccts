%!PS-Adobe-3.0%%Title: (! IntegratedTOC)%%Creator: (FrameMaker5: PSPrinter 8.1.1)%%CreationDate: (2:47 PM Tuesday, March 28, 2000)%%For: (Moog)%%Pages: 6%%DocumentFonts: Times-Italic Times-Roman Courier Symbol%%DocumentNeededFonts: Times-Italic Times-Roman Courier Symbol%%DocumentSuppliedFonts:%%DocumentData: Clean7Bit%%PageOrder: Ascend%%Orientation: Portrait%ADO_PaperArea: -12 -12 780 600%ADO_ImageableArea: 0 0 768 588%%EndComments/md 174 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if%%BeginFile: adobe_psp_basic%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved./bd{bind def}bind def/xdf{exch def}bd/xs{exch store}bd/ld{load def}bd/Z{0 def}bd/T/true/F/false/:L/lineto/lw/setlinewidth/:M/moveto/rl/rlineto/rm/rmoveto/:C/curveto/:T/translate/:K/closepath/:mf/makefont/gS/gsave/gR/grestore/np/newpath14{ld}repeat/$m matrix def/av 81 def/por true def/normland false def/psb-nosave{}bd/pse-nosave{}bd/us Z/psb{/us save store}bd/pse{us restore}bd/level2/languagelevel where{pop languagelevel 2 ge}{false}ifelsedef/featurecleanup{stoppedcleartomarkcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bd/noload Z/startnoload{{/noload save store}if}bd/endnoload{{noload restore}if}bdlevel2 startnoload/setjob{statusdict/jobname 3 -1 roll put}bd/setcopies{userdict/#copies 3 -1 roll put}bdlevel2 endnoload level2 not startnoload/setjob{1 dict begin/JobName xdf currentdict end setuserparams}bd/setcopies{1 dict begin/NumCopies xdf currentdict end setpagedevice}bdlevel2 not endnoload/pm Z/mT Z/sD Z/realshowpage Z/initializepage{/pm save store mT concat}bd/endp{pm restore showpage}def/$c/DeviceRGB def/rectclip where{pop/rC/rectclip ld}{/rC{np 4 2 roll:M1 index 0 rl0 exch rlneg 0 rl:Kclip np}bd}ifelse/rectfill where{pop/rF/rectfill ld}{/rF{gSnp4 2 roll:M1 index 0 rl0 exch rlneg 0 rlfillgR}bd}ifelse/rectstroke where{pop/rS/rectstroke ld}{/rS{gSnp4 2 roll:M1 index 0 rl0 exch rlneg 0 rl:KstrokegR}bd}ifelse%%EndFile%%BeginFile: adobe_psp_colorspace_level1%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved./G/setgray ld/:F/setrgbcolor ld%%EndFile%%BeginFile: adobe_psp_customps%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved./$t Z/$p Z/$s Z/$o 1. def/2state? false def/ps Zlevel2 startnoload/pushcolor/currentrgbcolor ld/popcolor/setrgbcolor ld/setcmykcolor where{pop/currentcmykcolor where{pop/pushcolor/currentcmykcolor ld/popcolor/setcmykcolor ld}if}iflevel2 endnoload level2 not startnoload/pushcolor{currentcolorspace $c eq{currentcolor currentcolorspace true}{currentcmykcolor false}ifelse}bd/popcolor{{setcolorspace setcolor}{setcmykcolor}ifelse}bdlevel2 not endnoload/pushstatic{ps2state?$o$t$p$s}bd/popstatic{/$s xs/$p xs/$t xs/$o xs/2state? xs/ps xs}bd/pushgstate{save errordict/nocurrentpoint{pop 0 0}putcurrentpoint3 -1 roll restorepushcolorcurrentlinewidthcurrentlinecapcurrentlinejoincurrentdash exch aload lengthnp clippath pathbbox$m currentmatrix aload pop}bd/popgstate{$m astore setmatrix2 index sub exch3 index sub exchrCarray astore exch setdashsetlinejoinsetlinecaplwpopcolornp :M}bd/bu{pushgstategRpushgstate2state?{gRpushgstate}ifpushstaticpm restoremT concat}bd/bn{/pm save storepopstaticpopgstategSpopgstate2state?{gSpopgstate}if}bd/cpat{pop 64 div G 8{pop}repeat}bd%%EndFile%%BeginFile: adobe_psp_basic_text%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved./S/show ld/A{0.0 exch ashow}bd/R{0.0 exch 32 exch widthshow}bd/W{0.0 3 1 roll widthshow}bd/J{0.0 32 4 2 roll 0.0 exch awidthshow}bd/V{0.0 4 1 roll 0.0 exch awidthshow}bd/fcflg true def/fc{fcflg{vmstatus exch sub 50000 lt{(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store}if pop}if}bd/$f[1 0 0 -1 0 0]def/:ff{$f :mf}bd/MacEncoding StandardEncoding 256 array copy defMacEncoding 39/quotesingle putMacEncoding 96/grave put/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronMacEncoding 128 128 getinterval astore poplevel2 startnoload/copyfontdict{findfont dup length dictbegin{1 index/FID ne{def}{pop pop}ifelse}forall}bdlevel2 endnoload level2 not startnoload/copyfontdict{findfont dup length dictcopybegin}bdlevel2 not endnoloadmd/fontname known not{/fontname/customfont def}if/Encoding Z/:mre{copyfontdict/Encoding MacEncoding deffontname currentdictenddefinefont :ff def}bd/:bsr{copyfontdict/Encoding Encoding 256 array copy defEncoding dup}bd/pd{put dup}bd/:esr{pop popfontname currentdictenddefinefont :ff def}bd/scf{scalefont def}bd/scf-non{$m scale :mf setfont}bd/ps Z/fz{/ps xs}bd/sf/setfont ld/cF/currentfont ld/mbf{/makeblendedfont where{popmakeblendedfont/ABlend exch definefont}{pop}ifelsedef}def%%EndFile%%BeginFile: adobe_psp_derived_styles%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved./wiversion(23.0)eq{{gS 0 0 0 0 rC stringwidth gR}bind}{/stringwidth load}ifelsedef/$o 1. def/gl{$o G}bd/ms{:M S}bd/condensedmtx[.82 0 0 1 0 0]def/:mc{condensedmtx :mf def}bd/extendedmtx[1.18 0 0 1 0 0]def/:me{extendedmtx :mf def}bd/basefont Z/basefonto Z/dxa Z/dxb Z/dxc Z/dxd Z/dsdx2 Z/bfproc Z/:fbase{dup/FontType get 0 eq{dup length dict begindup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall/FDepVector exch/FDepVector get[exch/:fbase load forall]def}/bfproc load ifelse/customfont currentdict end definefont}bd/:mo{/bfproc{dup dup length 2 add dictbegin{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall/PaintType 2 def/StrokeWidth .012 0 FontMatrix idtransform pop def/customfont currentdictenddefinefont8 dict begin/basefonto xdf/basefont xdf/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/Encoding StandardEncoding def/BuildChar{exch beginbasefont setfont( )dup 0 4 -1 roll putdup wisetcharwidth0 0 :MgSgldup showgRbasefonto setfontshowend}def}store :fbase}bd/:mso{/bfproc{7 dict begin/basefont xdf/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/Encoding StandardEncoding def/BuildChar{exch beginsD begin/dxa 1 ps div defbasefont setfont( )dup 0 4 -1 roll putdup wi1 index 0 ne{exch dxa add exch}ifsetcharwidthdup 0 0 msdup dxa 0 msdup dxa dxa msdup 0 dxa msgldxa 2. div dup msendend}def}store :fbase}bd/:ms{/bfproc{dup dup length 2 add dictbegin{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall/PaintType 2 def/StrokeWidth .012 0 FontMatrix idtransform pop def/customfont currentdictenddefinefont8 dict begin/basefonto xdf/basefont xdf/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/Encoding StandardEncoding def/BuildChar{exch beginsD begin/dxb .05 defbasefont setfont( )dup 0 4 -1 roll putdup wiexch dup 0 ne{dxb add}ifexch setcharwidthdup dxb .01 add 0 ms0 dxb :TgSgldup 0 0 msgRbasefonto setfont0 0 msendend}def}store :fbase}bd/:mss{/bfproc{7 dict begin/basefont xdf/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/Encoding StandardEncoding def/BuildChar{exch beginsD begin/dxc 1 ps div def/dsdx2 .05 dxc 2 div add defbasefont setfont( )dup 0 4 -1 roll putdup wiexch dup 0 ne{dsdx2 add}ifexch setcharwidthdup dsdx2 .01 add 0 ms0 .05 dxc 2 div sub :Tdup 0 0 msdup dxc 0 msdup dxc dxc msdup 0 dxc msgldxc 2 div dup msendend}def}store :fbase}bd/:msb{/bfproc{7 dict begin/basefont xdf/FontType 3 def/FontMatrix[1 0 0 1 0 0]def/FontBBox[0 0 1 1]def/Encoding StandardEncoding def/BuildChar{exch beginsD begin/dxd .03 defbasefont setfont( )dup 0 4 -1 roll putdup wi1 index 0 ne{exch dxd add exch}ifsetcharwidthdup 0 0 msdup dxd 0 msdup dxd dxd ms0 dxd msendend}def}store :fbase}bd/italicmtx[1 0 -.212557 1 0 0]def/:mi{italicmtx :mf def}bd/:v{[exch dup/FontMatrix get exchdup/FontInfo known{/FontInfo getdup/UnderlinePosition known{dup/UnderlinePosition get2 index 03 1 rolltransformexch pop}{.1}ifelse3 1 rolldup/UnderlineThickness known{/UnderlineThickness getexch 0 3 1 rolltransformexch popabs}{pop pop .067}ifelse}{pop pop .1 .067}ifelse]}bd/$t Z/$p Z/$s Z/:p{aload pop2 index mul/$t xs1 index mul/$p xs.012 mul/$s xs}bd/:m{gS0 $p rm$t lw0 rl strokegR}bd/:n{gS0 $p rm$t lw0 rlgSglstrokegRstrokepath$s lw/setstrokeadjust where{popcurrentstrokeadjust true setstrokeadjust stroke setstrokeadjust}{stroke}ifelsegR}bd/:o{gS0 $p rm$t 2 div dup rm$t lwdup 0 rlstrokegR:n}bd%%EndFile/currentpacking where {pop sc_oldpacking setpacking}ifend		% md%%EndProlog%%BeginSetupmd begincountdictstack[{%stopped%%BeginFeature: *ManualFeed False    1 dict    dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put	setpagedevice	1 dict     dup /ManualFeed false put     setpagedevice%%EndFeature}featurecleanupcountdictstack[{%stopped%%BeginFeature: *PageSize Letter    1 dict    dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put	setpagedevice	2 dict    dup /PageSize [612 792] put    dup /ImagingBBox null put    setpagedevice%%EndFeature}featurecleanup(Moog)setjob/pT[1 0 0 -1 12 780]def/mT[1 0 0 -1 12 780]def/sD 16 dict def300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse%%IncludeFont: Times-Italic%%IncludeFont: Times-Roman%%IncludeFont: Courier%%IncludeFont: Symbol/f0_1/Times-Italic :mre/f0_36 f0_1 36 scf/f0_14 f0_1 14 scf/f0_10 f0_1 10 scf/f1_1/Times-Roman :mre/f1_18 f1_1 18 scf/f1_14 f1_1 14 scf/f1_12 f1_1 12 scf/f1_10 f1_1 10 scf/f1_9 f1_1 9 scf/f1_8 f1_1 8 scf/f2_1/Courier :mre/f2_10 f2_1 10 scf/f3_1/Symbol :bsr240/apple pd:esr /f4_1 f3_1 :mi/f4_10 f4_1 10 scf/Courier findfont[10 0 0 -10 0 0]:mf setfont% Frame PostScript Prolog for use with Macintosh Frame Products 5.0.1% Copyright (c) 1986-95 Frame Technology Corp.  All rights reserved.%%BeginProcSet: "FrameMacDict" 501 1userdict/FrameMacDict 250 dict put FrameMacDict begin systemdict/setpackingknown{/fMSP currentpacking def true setpacking}if[/fM1/fM18/fM2/fM3/fM4/fMAB/fM5/fM6/fM8/fM9/fMBC/fMBM/fMC/fMCD/fMCG/fMCK/fMCM/fMCl/fMCO/fMef/fMet/fMeh/fMew/fMey/fMex/fMei/fMej/fMek/fMel/fMFl/fMGC/fMGL/fMGM/fMIx/fMJB/fMJC/fMJG/fMJK/fMJM/fMJR/fMJY/fMK/fML1/fMM/fMN/fMNC/fMNg/fMND/fMOx/fMPC/fMPH/fMPt/fMRC/fMS/fMSJ/fMUC/fMUM/fMUY/fMY/fMdm/fM2x/fMa2/fMi/fMk/fms/fmBS/fMdp/freq/sangle/sflipx/sflipy/pflipx/pflipy/xx/yy/xindex/yindex/fM1B/fM0B/fMdc/fMds]{0 def}forall/fML1/languagelevel where{pop languagelevel}{1}ifelse 2 lt def/fMCl fML1{/statusdict where{pop statusdict/processcolors known{statusdict/processcolorsget exec 1 gt}{F}ifelse}{F}ifelse}{T}ifelse def/fMXN/statusdict where{popstatusdict/product known{statusdict/product get}{(Unknown)}ifelse}{(Unknown)}ifelse def/fMHq fMXN(LaserWriter-Sim)eq def/FmBD{bind def}bind def/fmBx{[exch{dup/FrameMacDict eq{pop FrameMacDict}{dup type dup/arraytype eq exch/packedarraytype eq or{dup xcheck{fmBi}if}if}ifelse}forall]cvx}FmBD/fmBi{bindfmBx}FmBD fML1{userdict/FrMacBegin{FrameMacDict begin}fmBi put/FmE{end}FmBD}{/fMdc 6 array def userdict/FrMacBegin{FrameMacDict begin/fMds currentcolorspacestore mark 0 0 0 0 0 currentcolor fMdc astore pop cleartomark}fmBi put/FmE{fMdssetcolorspace mark fMdc aload pop setcolor cleartomark end}FmBD}ifelse/fMEd 35dict def/fmPE{fMEd 3 1 roll fmBi put}bind def/T true def/F false def userdict/FrameSuccessfull F put userdict/FrameEndPictSave F put userdict/FrameEndPictStopped F put userdict/fM7 known not{userdict/fM7 0 put}if/fmXD{exch def}FmBD/FmG/gsave load def/FmR/grestore load def/fm_l/grestoreall loaddef/fm_v/save load def/fm_g/setgray load def/fm_r/setrgbcolor load def/fm_h/sethsbcolor load def/fm_f/fill load def/fm_e/eofill load def/fm_t/stroke loaddef/fm_m/imagemask load def/fm_i/image load def/fm_s/show load def/fm_a/ashowload def/fm_w/widthshow load def/fm_y/awidthshow load def/RealKshow/kshow loaddef/fMdm matrix defaultmatrix def/fM2x matrix def/fMa2 matrix def/fmSM{fM2xcurrentmatrix pop}FmBD/fmRM{fM2x setmatrix}FmBD/FmRF{currentpoint 2 copytranslate 4 2 roll{-1 1 scale}if rotate neg exch neg exch translate}FmBD/fmax{2copy lt{exch}if pop}FmBD/fmin{2 copy gt{exch}if pop}FmBD systemdict/pdfmarkknown{/fMAB true def/FmPD/pdfmark load def/FmPT/fm_s load defcurrentdistillerparams/CoreDistVersion get 2000 ge{/FmPD2/pdfmark load def/FmPA{mark exch/Dest exch 5 3 roll/View[/XYZ null 6 -2 roll FmDC exch pop null]/DESTFmPD}FmBD}{/FmPD2/cleartomark load def/FmPA{pop pop pop}FmBD}ifelse}{/fMABfalse def/FmPD/cleartomark load def/FmPD2/cleartomark load def/FmPT/pop loaddef/FmPA{pop pop pop}FmBD}ifelse/FmDC{transform fMdm itransform cvi exch cviexch}FmBD/FmBx{dup 3 index lt{3 1 roll exch}if 1 index 4 index lt{4 -1 roll 3 1roll exch 4 1 roll}if}FmBD/fmgS 32 array def/fMgt 0 def/fMtp 0 def/fmSG{fmgSfMgt get dup null eq{pop fmgS fMgt 10 dict dup 4 1 roll put}if 3 1 roll put}FmBD/fmGG{fMgt -1 -1{fmgS exch get dup null ne{2 copy exch known{2 copy exchget/_notdef ne{exch get dup exit}if}if}if pop}for pop}FmBD/gsave{FrameMacDictbegin FmG/fMgt fMgt 1 add def fmgS fMgt get dup null eq{pop}{dup dup{pop/_notdef put dup}forall pop pop}ifelse end}fmPE/grestore{FrameMacDict beginfMgt fMtp gt{/fMgt fMgt 1 sub def}if FmR null fmCN end}fmPE/grestoreall{FrameMacDict begin/fMgt fMtp def fm_l null fmCN end}fmPE/save{FrameMacDict/fm_vget exec FrameMacDict begin/fMgt fMgt 1 add def fmgS fMgt get dup null eq{pop}{dup dup{pop/_notdef put dup}forall pop pop}ifelse/fMtp fMgt def end}fmPE/fMND Fdef/fMCC null fmSG/fMOP F fmSG/fMKO F fmSG/fmRY{1 exch sub 3 1 roll 1 exch sub3 1 roll 1 exch sub 3 1 roll 3 copy 2 copy le{pop}{exch pop}ifelse 2 copy le{pop}{exch pop}ifelse dup dup dup 6 1 roll 4 1 roll 7 1 roll sub 6 1 roll sub 51 roll sub 4 1 roll}fmSG/fmkn{2 copy known{get T}{pop pop false}ifelse}FmBD/fmfp{exch currentfont dup/FontMatrix get exch/FontInfo fmkn{T}{currentfont/dffmkn{dup/FontInfo fmkn{3 1 roll/FontMatrix get mtx concatmatrix exch T}{pop poppop F}ifelse}{pop pop F}ifelse}ifelse{3 -1 roll fmkn{exch 0 3 1 roll dtransformneg exch pop exch pop}{pop exec}ifelse}{exec}ifelse}FmBD/fmdl{3 index 16 and 0ne{FmG currentlinewidth 2. div dup rmoveto currentpoint newpath moveto 2 index0 rlineto fm_t FmR}if 3 index 24 and 0 ne{FmG currentrgbcolor dup 4 1 roll eq 31 roll eq and{1 currentgray sub setgray}{1 setgray}ifelse 2 index 0 rlinetofm_t FmR FmG 2 index 0 rlineto strokepath .24 setlinewidth fm_t FmR}{2 index 0rlineto fm_t 0 0 moveto}ifelse}FmBD/FmUl{FmG/fM2 fmXD currentpoint/UnderlineThickness{fM2 15 div}fmfp abs dup setlinewidth/fM1 fmXD 4 index 1 and0 ne{newpath 2 copy moveto 0/UnderlinePosition{fM2 10 div neg}fmfp neg rmovetofmdl}if 4 index 2 and 0 ne{newpath 2 copy moveto 0/XHeight{FmG newpath 0 0moveto(x)F charpath flattenpath pathbbox 4 -1 roll pop pop pop FmR dup 0 eq{popfM2 2. mul 3. div neg}if}fmfp 2. div rmoveto fmdl}if 4 index 4 and 0 ne{newpath2 copy moveto 0/CapHeight{FmG newpath 0 0 moveto(H)F charpath flattenpathpathbbox 4 -1 roll pop pop pop FmR dup 0 eq{pop fM2 3. mul 4. div neg}if}fmfpfM1 sub rmoveto fmdl}if pop pop pop pop pop FmR}FmBD/FmTx{/fM3 fmXD/fM2 fmXD/fM1 fmXD 0 32 fM1 fM3 stringwidth pop fM2 sub fM3 length div sub 0 fM3 fm_y}FmBD/fMN 0 def/fMC 1 def/fMM 2 def/fMY 3 def/fMK 4 def/fMS 5 def/fMNg 0currenttransfer exec .5 gt def/fMCM fMN def/fMJK 0 def/fMJY 0 def/fMJM 0 def/fMJC 0 def/fMJR 1 def/fMJG 1 def/fMJB 1 def/fMCG 1 def/fMPt null def/fMCK[0 00 1 0 0 0]def/fmCH{fML1{14 dict dup begin fMCl{/HalftoneType 2 defcurrentcolorscreen[/GraySpotFunction/GrayAngle/GrayFrequency/BlueSpotFunction/BlueAngle/BlueFrequency/GreenSpotFunction/GreenAngle/GreenFrequency/RedSpotFunction/RedAngle/RedFrequency]{exch def}forall}{/HalftoneType 1 defcurrentscreen[/SpotFunction/Angle/Frequency]{exch def}forall}ifelse statusdict/checkscreen known{statusdict/accuratescreens get exec}{F}ifelse/AccurateScreens exch def end}{currenthalftone}ifelse}FmBD/fmSH{fML1{beginstatusdict/checkscreen known{currentdict/AccurateScreens known{AccurateScreens}{F}ifelse statusdict/setaccuratescreens get exec}if HalftoneType 1 eq{FrequencyAngle currentdict/SpotFunction get setscreen}{HalftoneType 2 eq{fMCl{RedFrequency RedAngle currentdict/RedSpotFunction get GreenFrequency GreenAnglecurrentdict/GreenSpotFunction get BlueFrequency BlueAngle currentdict/BlueSpotFunction get GrayFrequency GrayAngle currentdict/GraySpotFunction getsetcolorscreen}{GrayFrequency GrayAngle currentdict/GraySpotFunction getsetscreen}ifelse}if}ifelse end}{sethalftone}ifelse}FmBD/FmCS{14 dict begin/HalftoneType 2 def/AccurateScreens exch def/GraySpotFunction exch def/GrayAngle exch def/GrayFrequency exch def/BlueSpotFunction exch def/BlueAngleexch def/BlueFrequency exch def/GreenSpotFunction exch def/GreenAngle exch def/GreenFrequency exch def/RedSpotFunction exch def/RedAngle exch def/RedFrequency exch def currentdict dup end/fMPH exch def fmSH}FmBD/FmSS{5 dictbegin/HalftoneType 1 def/AccurateScreens exch def/SpotFunction exch def/Angleexch def/Frequency exch def currentdict dup end/fMPH exch def fmSH}FmBD/fMPHfmCH def/fmcp{/FmPr2 exch cvlit def/FmPr1 exch cvlit def/FmPrn FmPr1 lengthFmPr2 length add array def FmPrn 0 FmPr1 putinterval FmPrn FmPr1 length FmPr2putinterval FmPrn cvx}FmBD/fmEp{sub dup 0 lt{neg}if .001 le}FmBD/fmQC{2 copy 0get exch 0 get fmEp{2 copy 1 get exch 1 get fmEp{2 copy 2 get exch 2 get fmEp{3get exch 3 get fmEp}{pop pop F}ifelse}{pop pop F}ifelse}{pop pop F}ifelse}FmBD/fmQR{2 copy 4 get exch 0 get fmEp{2 copy 5 get exch 1 get fmEp{6 get exch 2get fmEp}{pop pop F}ifelse}{pop pop F}ifelse}FmBD/FmSC{/fMCM fmXD/fMJB fmXD/fMJG fmXD/fMJR fmXD/fMJK fmXD/fMJY fmXD/fMJM fmXD/fMJC fmXD fmCC}FmBD/FmSP{/fMCM fmXD fmCC}FmBD/FrameSetSepColors{FrameMacDict begin[exch 1 add 1 roll]/fMSC exch def end}fmBi def/fmLC{fMSC{exch dup 3 -1 roll fmQC{pop T exit}if}forall dup T ne{pop F}if}FmBD/fmLR{fMSC{exch dup 3 -1 roll fmQR{pop T exit}if}forall dup T ne{pop F}if}FmBD/fmLM{fMSC{exch dup 3 -1 roll dup 7 get 3 -1 rolleq{exch pop T exit}{pop}ifelse}forall dup T ne{pop F}if}FmBD/fmCN{fMND F fMCMfMN ne{/fMOP fmGG{/fMKO fmGG{pop T}if}if}if dup/fMND exch def{pop pop}{exch dupnull ne{exch pop dup type dup/integertype eq exch/realtype eq or{fm_g}{setcolor}ifelse}{pop{1 fm_g}if}ifelse}ifelse}FmBD/fill{FrameMacDict begin fMND{newpath}{fm_f}ifelse end}fmPE/eofill{FrameMacDict begin fMND{newpath}{fm_e}ifelse end}fmPE/stroke{FrameMacDict begin fMND{newpath}{fm_t}ifelse end}fmPE/imagemask{FrameMacDict begin fMND{FmG nulldevive fm_m FmR}{fm_m}ifelse end}fmPE/fmNX{loadfMND{FmG fMa2 currentmatrix end nulldevice setmatrix exec currentpointFrameMacDict/FmR get exec moveto}{end exec}ifelse}fmBi def/show{FrameMacDictbegin/fm_s fmNX}fmPE/ashow{FrameMacDict begin/fm_a fmNX}fmPE/widthshow{FrameMacDict begin/fm_w fmNX}fmPE/awidthshow{FrameMacDict begin/fm_y fmNX}fmPE/kshow{FrameMacDict begin/RealKshow fmNX}fmPE/image{FrameMacDict begin fMCM fMNne fMCM fMK ne and{FmG/fMOP fmGG{nulldevice}{fMNg{{pop 0}}{{pop 1}}ifelsesettransfer}ifelse/fm_i load end exec FmR}{/fm_i load end exec}ifelse}fmPE/fMGMT def/fMBM F def/findcmykcustomcolor{0 0 0 4 -1 roll 8 array astore}fmPE/findrgbcustomcolor{FrameMacDict begin 4 1 roll 3 copy/fmRY fmGG exec 8 4 roll4 -1 roll 8 array astore end}fmPE/findgraycustomcolor{0 0 0 exch 1 exch subexch findcmykcustomcolor}fmPE/findhsbcustomcolor{FrameMacDict begin 4 1 rollgsave fm_h currentrgbcolor grestore 4 -1 roll findrgbcustomcolor end}fmPE/setcustomcolor{FrameMacDict begin dup type dup/integertype eq exch/realtype eqor not{1.0}if exch dup/fMCC exch fmSG/fMBM F def fMCM fMN eq{0 4 getintervalaload pop 4{4 index mul 4 1 roll}repeat fmSK pop}{dup{7 get}stopped{pop 4 get}if fmLM{exch pop 0 4 getinterval aload pop fMCM fMS eq{fMJK eq exch fMJY eq andexch fMJM eq and exch fMJC eq and{1 exch sub F}{pop 1 T}ifelse}{5{pop}repeat 1T}ifelse}{fMCM fMK eq{3 get F}{fMCM fMY eq{2 get F}{fMCM fMM eq{1 get F}{fMCMfMC eq{0 get F}{pop 0 T}ifelse}ifelse}ifelse}ifelse 3 1 roll mul 1 exch subexch}ifelse/fMKO exch fmSG fmCN}ifelse end}fmPE/setoverprint{FrameMacDict begin/fMOP exch fmSG null fmCN end}fmPE/currentoverprint{FrameMacDict begin/fMOPfmGG end}fmPE/fmCC{fMCM fMN eq{fMGM fML1 or not{[/Pattern[/DeviceCMYK]]setcolorspace fMCK 0 4 getinterval aload pop fMPt setcolor}{fMCK 3 get 1.0 ge{fMCG fm_g}{fMAB not fMCl fMGM and and{0 1 3{fMCK exch get 1 fMCG sub mul}forfmSK}{4 1 6{fMCK exch get fMGM{1 exch sub 1 fMCG sub mul 1 exch sub}{1.0 lt{fMCG}{1}ifelse}ifelse}for fm_r}ifelse}ifelse}ifelse null/fMKO F fmSG}{fMBM{fMCGF}{fMCK 0 4 getinterval aload fmLC{fMCM fMS eq{fMJK eq exch fMJY eq and exchfMJM eq and exch fMJC eq and{fMCG F}{1 T}ifelse}{pop pop pop pop 1 T}ifelse}{fMCM fMK eq{fMCG 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop F}{fMCM fMYeq{pop fMCG 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop F}{fMCM fMM eq{poppop fMCG 1.0 exch sub mul 1.0 exch sub exch pop F}{fMCM fMC eq{pop pop pop fMCG1.0 exch sub mul 1.0 exch sub F}{pop pop pop pop 1 T}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse/fMKO exch fmSG fMGM fML1 or not{[/Pattern[/DeviceGray]]setcolorspace fMPt}{fMGM not fML1 and{dup 1 lt{pop fMCG}if}if}ifelse}ifelsefmCN}FmBD/setgray{FrameMacDict begin fMCM fMN eq{F}{fMCM fMK eq{F}{fMCM fMS eqfMJR 0 eq and fMJG 0 eq and fMJB 0 eq and{F}{pop 1 T}ifelse}ifelse}ifelse/fMKOexch fmSG fmCN end}fmPE/setrgbcolor{FrameMacDict begin/fMBM F def fMCM fMN eq{fm_r}{3 copy[4 1 roll]fmLR{fMCM fMS eq{fMJB eq exch fMJG eq and exch fMJR eqand{0 F}{1 T}ifelse}{pop pop pop 1 T}ifelse}{/fmRY fmGG exec fMCM fMK eq{1.0exch sub 4 1 roll pop pop pop F}{fMCM fMY eq{pop 1.0 exch sub 3 1 roll pop popF}{fMCM fMM eq{pop pop 1.0 exch sub exch pop F}{fMCM fMC eq{pop pop pop 1.0exch sub F}{pop pop pop pop 1 T}ifelse}ifelse}ifelse}ifelse}ifelse/fMKO exchfmSG fmCN}ifelse end}fmPE/sethsbcolor{FrameMacDict begin fMCM fMN eq{fm_h}{fm_hcurrentrgbcolor setrgbcolor}ifelse end}fmPE/setcmykcolor where{pop/fmSK/setcmykcolor load def}{/fmSK{4 1 roll 3{3 index add 0 fmax 1 fmin 1 exch sub 31 roll}repeat fm_r pop}FmBD}ifelse/currentcmykcolor where{pop}{/currentcmykcolor{FrameMacDict begin currentrgbcolor/fmRY fmGG exec end}fmPE}ifelse/setcmykcolor{FrameMacDict begin/fMBM F def fMCM fMN eq{fmSK}{4 copy[5 1roll]fmLC{fMCM fMS eq{fMJK eq exch fMJY eq and exch fMJM eq and exch fMJC eqand{0 F}{1 T}ifelse}{pop pop pop pop 1 T}ifelse}{fMCM fMK eq{1.0 exch sub 4 1roll pop pop pop dup 1.0 ge}{fMCM fMY eq{pop 1.0 exch sub 3 1 roll pop pop dup1.0 ge}{fMCM fMM eq{pop pop 1.0 exch sub exch pop dup 1.0 ge}{fMCM fMC eq{poppop pop 1.0 exch sub dup 1.0 ge}{pop pop pop pop 1 T}ifelse}ifelse}ifelse}ifelse}ifelse/fMKO exch fmSG fmCN}ifelse end}fmPE/fMFl[0 .1 .3 .5 .7 .9 .97 1<0f1e3c78f0e1c387><0f87c3e1f0783c1e><cccccccccccccccc><ffff0000ffff0000><8142241818244281><0102040810204080><8040201008040201>]def fML1{/patScreenDict 7 dictdup begin<0f1e3c78f0e1c387>[45{pop}{exch pop}.5 2 sqrt]FmBD<0f87c3e1f0783c1e>[135{pop}{exch pop}.5 2 sqrt]FmBD<cccccccccccccccc>[0{pop}dup .5 2]FmBD<ffff0000ffff0000>[90{pop}dup .5 2]FmBD<8142241818244281>[45{2 copy lt{exch}if pop}dup.75 2 sqrt]FmBD<0102040810204080>[45{pop}{exch pop}.875 2 sqrt]FmBD<8040201008040201>[135{pop}{exch pop}.875 2 sqrt]FmBD end def}{/fMPP 5 dict dup begin<0f87c3e1f0783c1e>{3 setlinewidth -1 -1 moveto 9 9 lineto fm_t 4 -4 moveto 12 4lineto fm_t -4 4 moveto 4 12 lineto fm_t}FmBD<0f1e3c78f0e1c387>{3 setlinewidth-1 9 moveto 9 -1 lineto fm_t -4 4 moveto 4 -4 lineto fm_t 4 12 moveto 12 4lineto fm_t}FmBD<8142241818244281>{1 setlinewidth -1 9 moveto 9 -1 lineto fm_t-1 -1 moveto 9 9 lineto fm_t}FmBD<8040201008040201>{1 setlinewidth -1 -1 moveto9 9 lineto fm_t 4 -4 moveto 12 4 lineto fm_t -4 4 moveto 4 12 lineto fm_t}FmBD<0102040810204080>{1 setlinewidth -1 9 moveto 9 -1 lineto fm_t -4 4 moveto 4 -4lineto fm_t 4 12 moveto 12 4 lineto fm_t}FmBD end def/fMPD 15 dict dup begin/PatternType 1 def/PaintType 2 def/TilingType 3 def/BBox[0 0 8 8]def/XStep 8def/YStep 8 def/PaintProc{begin fMPP fmBS known{fMPP fmBS get exec}{8 8 T[1 0 0-1 0 8]fmBS fm_m}ifelse end}FmBD end def}ifelse/fMdp 72 0 fMdm dtransform dupmul exch dup mul add sqrt def/freq fMdp dup 72 div round dup 0 eq{pop 1}if 8mul div def/sangle 1 0 fMdm dtransform exch atan def sangle fMa2 rotate fMdmfMa2 concatmatrix dup 0 get/sflipx exch def 3 get/sflipy exch def fML1{/fmgF{fMa2 exch get mul 0 lt{-1}{1}ifelse}FmBD}if/fmPM fML1{{dup patScreenDict exchknown{patScreenDict exch get aload pop freq mul 5 2 roll fMa2 currentmatrix 1get 0 ne{3 -1 roll 90 add 3 1 roll sflipx 1 fmgF sflipy 2 fmgF mul}{sflipx 0fmgF sflipy 3 fmgF neg mul}ifelse 0 lt{exch pop}{pop}ifelse fMNg{{neg}fmcp}ifbind systemdict/setscreen get exec}{/fmBS fmXD/fM1B 0 def/fM0B 0 def freq 0fMa2 currentmatrix 1 get 0 ne{90 add/pflipx sflipx 1 fmgF def/pflipy sflipy 2fmgF def}{/pflipx sflipx 0 fmgF def/pflipy sflipy 3 fmgF neg def}ifelse{pflipymul/yy fmXD pflipx mul/xx fmXD/xindex xx 1 add 2 div 8 mul cvi def/yindex yy 1add 2 div 8 mul cvi def fmBS yindex xindex 8 idiv add get 1 7 xindex 8 mod subbitshift and 0 ne fMNg{not}if{/fM1B fM1B 1 add def 1}{/fM0B fM0B 1 add def 0}ifelse}setscreen fM0B fM0B fM1B add div fMNg{1.0 exch sub}if}ifelse/fMCG exchdef/fMGM F def fmCC}}{/fMPC 8 dict def{dup fMPC exch known{fMPC exch get}{dupfMPD/fmBS 3 -1 roll put fMPD matrix makepattern dup fMPC 4 -1 roll 3 -1 rollput}ifelse/fMCG 0 def/fMPt exch def/fMGM F def fmCC}}ifelse FmBD/fmgr{fMGM not{/fMGM T def fML1{fMPH fmSH}if}if/fMCG exch def fmCC}FmBD/FmP{fMFl exch get duptype/stringtype eq{fmPM}{fmgr}ifelse}FmBD/FmK{fMCK astore pop/fMBM F def fmCC}FmBD/FmFB{0 0 0 1 0 0 0 fMCK astore pop/fMCG 0 def/fMBM T def fmCC}FmBD/fMOxmatrix def fMOx currentmatrix pop/FmSO{/FmOs save def fmSM fMOx setmatrix}FmBD/FmIO{fmRM}FmBD/FmEO{FmOs restore}FmBD/fm3R[{.3 mul add 1}bind{.59 mul add 2}bind{.11 mul add round cvi fMs exch fMi exch put/fMi fMi 1 add def 0 0}bind]def/fm31{/fMi 0 def 0 exch 0 exch{exch fm3R exch get exec}forall pop pop fMs}FmBD/fm41{0 exch 4 exch{exch 1 sub dup 0 eq{pop 4 1 roll 3 index add 255 fmin 255exch sub .11 mul 3 1 roll 3 index add 255 fmin 255 exch sub .59 mul 3 1 roll 3index add 255 fmin 255 exch sub .3 mul add add 255 fmin round cvi fMs exch 3index exch put pop 1 add 4}if}forall pop pop fMs}FmBD fML1{/Fmi{save userdict/fM7 3 -1 roll put/fM9 F def{{dup length 1 sub/fMGL fmXD/fMBC fmXD/fMNC fmXD/fMRC fmXD/fMGC fMGL 1 add array def/setcolortransfer where{popcurrentcolortransfer/gryt fmXD/blut fmXD/grnt fmXD/redt fmXD 0 1 fMGL{/fMIxfmXD/fMUC 1 fMRC fMIx get sub def/fMUM 1 fMNC fMIx get sub def/fMUY 1 fMBC fMIxget sub def/fMk fMUC fMUM fmin fMUY fmin def/FmU fMk currentundercolorremovalexec def fMRC fMIx 1 0 fMUC FmU sub fmax sub redt exec put fMNC fMIx 1 0 fMUMFmU sub fmax sub grnt exec put fMBC fMIx 1 0 fMUY FmU sub fmax sub blut execput fMGC fMIx 1 fMk currentblackgeneration exec sub gryt exec put}for{fMGL mulcvi fMRC exch get}{fMGL mul cvi fMNC exch get}{fMGL mul cvi fMBC exch get}{fMGLmul cvi fMGC exch get}setcolortransfer{pop 0}setundercolorremoval{}setblackgeneration/fM9 T def}{0 1 fMGL{fMGC exch dup dup fMRC exch get .3 mulexch dup fMNC exch get .59 mul exch fMBC exch get .11 mul add add put}for{fMGLmul cvi fMGC exch get}currenttransfer fmcp settransfer}ifelse}{dup length 1 sub/fMGL fmXD/fMGC fmXD{fMGL mul cvi fMGC exch get}currenttransfer fmcpsettransfer}ifelse}{{{1 exch sub}currenttransfer fmcp settransfer}if}ifelse/fM5fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD translate rotate scale{-1 1 scale}if/fM18 fM8 string def fM4 fM3 fM6[fM4 0 0 fM3 fM4 2 div fM3 2 div]{currentfilefM18 fM5{readstring}{readhexstring}ifelse pop}fM9{{fM18}{fM18}T 3 colorimage}{fm_i}ifelse fM7 restore}FmBD}{/Fmi{save userdict/fM7 3 -1 roll put/fM9 F def{{dup length 1 sub/fMGL fmXD/fMBC fmXD/fMNC fmXD/fMRC fmXD[/Indexed/DeviceRGBfMGL{dup fMRC exch get exch dup fMNC exch get exch fMBC exch get}]setcolorspace}{dup length 1 sub/fMGL fmXD/fMGC fmXD[/Indexed/DeviceGray fMGL{fMGC exch get}]setcolorspace}ifelse}{1 4 index bitshift 1 sub/fMGL fmXD[/Indexed/DeviceGrayfMGL 5 -1 roll{{fMGL div 1 exch sub}}{{fMGL div}}ifelse]setcolorspace}ifelse/fM5 fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD translate rotate scale{-1 1 scale}if/fM18 fM8 string def 7 dict begin/ImageType 1 def/Width fM4 def/Height fM3def/ImageMatrix[fM4 0 0 fM3 fM4 2 div fM3 2 div]def/DataSource{currentfile fM18fM5{readstring}{readhexstring}ifelse pop}def/BitsPerComponent fM6 def/Decode[0fMGL]def currentdict end fm_i fM7 restore}FmBD}ifelse/Fmci{save userdict/fM7 3-1 roll put/fM5 fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD/fM18 fM8 string def/fMs fM18 0 fM18 length 3 idiv getinterval def translate rotate scale{-1 1scale}if fM4 fM3 fM6[fM4 0 0 fM3 fM4 2 div fM3 2 div]fMCl{{currentfile fM18 fM5{readstring}{readhexstring}ifelse pop}F 3 colorimage}{{currentfile fM18 fM5{readstring}{readhexstring}ifelse pop fm31}fm_i}ifelse fM7 restore}FmBD/Fmc4{save userdict/fM7 3 -1 roll put/fM5 fmXD/fM8 fmXD/fM6 fmXD/fM3 fmXD/fM4 fmXD/fM18 fM8 string def/fMs fM18 0 fM18 length 4 idiv getinterval def translaterotate scale{-1 1 scale}if fM4 fM3 fM6[fM4 0 0 fM3 fM4 2 div fM3 2 div]fMCl{{currentfile fM18 fM5{readstring}{readhexstring}ifelse pop}F 4 colorimage}{{currentfile fM18 fM5{readstring}{readhexstring}ifelse pop fm41}fm_i}ifelse fM7restore}FmBD fML1{/fmAn{transform round .5 sub exch round .5 sub exchitransform}FmBD/fmAc{transform round 1.5 sub exch round 1.5 sub exch itransform}FmBD/fmDn{dtransform round exch round exch idtransform}FmBD/fmLn{0 dtransformexch cvi 2 idiv 2 mul .1 add exch idtransform pop}FmBD/FmCv{fmDn 6 2 roll fmDn6 2 roll fmDn 6 2 roll rcurveto}FmBD}{T setstrokeadjust/fmAn{}FmBD/fmAc{}FmBD/fmDn{}FmBD/fmLn{}FmBD/FmCv{rcurveto}FmBD}ifelse/FmM{fmAn moveto}FmBD/M{moveto}FmBD/N{0 rmoveto}FmBD/S{fm_s}FmBD/A{0 exch fm_a}FmBD/W{0 exch 32 exch fm_w}FmBD/X{0 exch 0 32 5 2 roll fm_y}FmBD/fmQP{fML1 fMGM or not{FmG dup 1 fm_g exec FmR}if exec}FmBD/FmB{newpath fmAn moveto}FmBD/FmL{rlineto}FmBD/FmAL{fmAn lineto}FmBD/FmSo{fmLn setlinewidth setlinecap{fm_t}fmQP 0 0 moveto}FmBD/FmS{fmLnsetlinewidth closepath{fm_t}fmQP 0 0 moveto}FmBD/FmDS{fmLn setlinewidthsetlinecap{closepath}if setdash{fm_t}fmQP[]0 setdash 0 0 moveto}FmBD/FmFl{FmG{fm_e}fmQP FmR}FmBD/fmq{fmDn 4 2 roll fmAn newpath moveto 1 index 0 rlineto 0exch rlineto neg 0 rlineto closepath}FmBD/FmqP{fmq fmLn setlinewidth{fm_t}fmQP0 0 moveto}FmBD/FmqF{fmq FmG{fm_f}fmQP FmR}FmBD/FmKp{{currentpoint}stopped{F 51 roll}{T 7 3 roll}ifelse fmDn 4 2 roll fmAn newpath moveto 1 index 0 rlineto 0exch rlineto neg 0 rlineto closepath clip{moveto}{newpath}ifelse}FmBD/FmKb{{currentpoint}stopped}FmBD/FmKe{clip{newpath}{moveto}ifelse}FmBD/FmAF{FmGnewpath fmAn translate not{0.0 0.0 moveto}if rotate fmDn scale 0.0 0.0 1.0 5 3roll arc closepath{fm_f}fmQP FmR}FmBD/FmAP{FmG{setdash}if fmLn setlinewidthsetlinecap fmSM newpath 2 index 2 div add exch 3 index 2 div sub exch fmAn 2index 2 div sub exch 3 index 2 div add exch translate rotate scale 0.0 0.0 1.05 3 roll exch arcn{closepath}if fmRM{fm_t}fmQP FmR}FmBD/FmST{FmG fmAn translate.3 fmLn setlinewidth 0 setlinecap 0 setlinejoin newpath 1 fm_g 0 0 10 0 360 arcfm_f 0 fm_g 0 0 10 0 360 arc fm_t 36{1 0 moveto 0 0 10 -2.5 2.5 arc fm_f 10rotate}repeat FmR}FmBD/FmSL{FmG fmAn translate .25 fmLn setlinewidth 0setlinecap 0 setlinejoin newpath 1 fm_g 0 0 10 0 360 arc fm_f 0 fm_g 10 .5 fmLnneg .1{0 0 3 -1 roll 0 360 arc fm_t}for FmR}FmBD/FrameEr where{pop}{userdict/FrameEr(\000)put}ifelse/fMSJ 100 string def/fmXC{userdict/FrameEndPictSave 2index put FmE{countdictstack userdict begin/showpage{}def/FrameDictStackDepthexch def count/FrameStackDepth exch def}if userdict/FrameSuccessfull false putFrameMacDict/fMHq get/$brkpage where dup{exch pop}if or{userdict/FrameEndPictStopped false put}{userdict/FrameEndPictStopped true putcurrentfile cvx stopped pop FrameSuccessfull not{systemdict/clear get execuserdict/FrameEr get 0 1 put FrameMacDict begin FmG systemdict/initmatrix getexec 0 systemdict/setgray get exec clippath{pathbbox}stopped{100 100 512 692}ifexch pop add 2. div newpath moveto(Courier-BoldOblique)findfont 18 scalefontsetfont FrameEr1 fm_s( \()fm_s $error begin errorname 20 string cvs fm_s(, )fm_s/command load 128 string cvs fm_s end(\))fm_s FrameEr2 print flushFrameMacDict/fMSJ get{dup currentfile exch{readline}stopped{pop exch pop T}ifnot{exit}if(EndFrame5Picture)eq{exit}if}loop grestore end}if userdict/FrameSuccessfull false put userdict/FrameEndPictStopped false put FrameMacDict/fmIR get exec}ifelse}fmBi def/FmEP{save userdict/fM7 3 -1 roll put fMEd{userdict 3 1 roll put}forall setoverprint{fMN FmSP}if[/fMef/fMet/fMeh/fMew/fMey/fMex/fMei/fMej/fMek/fMel]{fmXD}forall fMex fMey translate fMet rotate fMewfMeh scale fMef{-1 1 scale}if 1 fMej fMel sub div 1 fMek fMei sub div scalefMej fMel add 2 div neg fMei fMek add 2 div neg translate 0 setgray 0setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit[]0 setdash newpathfML1 not{F setstrokeadjust}if T fmXC}FmBD/FmPI{newpath 0 0 moveto F fmXC}FmBD/FmPc{save userdict/fM7 3 -1 roll put newpath 3 index neg 3 index neg translate1 -1 scale 0.0 0.0 moveto T fmXC}FmBD/fmIR{FrameEndPictSave{fM7 type/savetypeeq{end/FrameDictStackDepth where{pop countdictstack FrameDictStackDepth sub dup0 gt{{end}repeat}{pop}ifelse count FrameStackDepth sub dup 0 gt{{pop}repeat}{pop}ifelse}if fM7 restore}if}if FrMacBegin}FmBD userdict/EndFrame5Picture{userdict/FrameEndPictSave 3 -1 roll put userdict/FrameEndPictStopped get{userdict/FrameSuccessfull true put stop}{FrameMacDict/fmIR get exec}ifelse}fmBiput/alphaimage where{pop}{/alphaimage{1 ne{limitcheck}if not{limitcheck}if popimage}fmPE}ifelse/fmDE{systemdict/initgraphics get exec clippath{pathbbox}stopped{100 100 512 692}if exch pop add 2. div newpath moveto(Courier-BoldOblique)findfont 18 scalefont setfont currentpoint 2 copy FrameEr3fm_s 20 sub 2 copy moveto FrameEr4 fm_s 20 sub 2 copy moveto(\()fm_s statusdict/jobname get fm_s(\))fm_s 20 sub moveto FrameEr5 fm_s showpage}FmBD/cd where{dup/cd get/fmRC fmXD/cd{FrameMacDict begin FrameEr 0 get 0 ne{fmDE}if/fmRC loadend exec}fmBi put}{/endp where{dup/endp get/fMRE fmXD/endp{FrameMacDict/fMREget exec FrameEr 0 get 0 ne{FrameMacDict begin currentfile fMSJ{readline}stopped{pop exch pop true}if pop(%%Trailer)eq{fmDE}if end}if}fmBi put}if}ifelsesystemdict/setpacking known{fMSP setpacking}if end%%EndProcSet%%FRMSetupFrameMacDict begin/FrameEr1(PostScript error)def/FrameEr2(A PostScript error occurred. FrameMaker is attempting recovery.)def/FrameEr3(FrameMaker has detected one or more)def/FrameEr4(PostScript errors in this document.)def/FrameEr5(Please check your output.)defend%%FRMEndSetup%%EndSetup%%Page: 1 1%%BeginPageSetupinitializepage(Moog; page: 1 of 6)setjob%%EndPageSetupgS 0 0 588 768 rC0 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42 495 684 FmqFFmE0 0 :Mf0_36 sf( )S9 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP93.571 192 M (Notes for New Users of PCCTS)SFmE9 0 :Mf1_18 sf( )S13 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP256.36 394 M (Thomas H. Moog )S272.362 414 M (Polhode, Inc.)SFmE14 0 :Mf1_14 sf( )S17 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP259.411 431.333 M (tmoog@polhode.com)SFmE17 0 :Mf0_14 sf( )S20 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP235.927 513.333 M ( 27 March 2000 )S( )S(Release 2.22)S242.717 529.333 M ( PCCTS Version 1.33MR22)SFmE21 0 :Mf1_9 sf( )S23 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP89.513 630 M (\251 Copyright 2000 Polhode, Inc.  These notes may be redistributed in electronic form or printed for personal use as long as there )S97.945 641 M (is no charge for them, proper credit is given to the author, any changes to the text are clearly marked, and the copyright and )S278.003 652 M (disclaimer are retained.)S96.449 674 M (Disclaimer: These notes are provided \322as is\323.  They may include typographical or technical errors.   The author disclaims all )S105.951 685 M (liability of any kind or nature for damages due to error, fault, defect, or deficiency in the notes regardless of cause.  All )S94.801 696 M (warranties of any kind, either express or implied, including, but not limited to, the implied warranties of  merchantability and )S236.77 707 M (fitness for a particular purpose are disclaimed.)SFmEendp%%Page: 2 2%%BeginPageSetupinitializepage(Moog; page: 2 of 6)setjob%%EndPageSetupgS 0 0 588 768 rC23 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE23 0 :Mf0_10 sf( )S25 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S128.881 N (1)S7 FmP60 78 495 648 FmqFFmE26 0 :Mf1_12 sf( )S29 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 86 M (Where is)SFmE29 0 :Mf1_10 sf( )S31 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 98.667 M (#1.)S16.3 N (The current maintenance release of )SFmE31 0 :Mf1_8 sf( )S33 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP242.561 98.667 M (PCCTS)SFmE33 0 :Mf1_10 sf( )S35 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP267.018 98.667 M (, these notes, and related examples are available on the net)S40.205 N (1)S70.8 110.667 M (#2.)S16.3 N (Some other items available at http://www.polhode.com:)S217.85 N (1)S70.8 122.667 M (#3.)S16.3 N (Newsgroup is comp.compilers.tools.pccts.  Mailing list is pccts_1-33 at onelist.com.)S101.481 N ( \320)SFmE36 0 :Mf1_12 sf( )S39 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 136 M (Basics)SFmE39 0 :Mf1_10 sf( )S41 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 148.667 M (#4.)S16.3 N (Invoke )SFmE41 0 :Mf1_8 sf( )S43 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP129.866 148.667 M (ANTLR)SFmE43 0 :Mf1_10 sf( )S45 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP156.53 148.667 M ( or )SFmE46 0 :Mf1_8 sf( )S48 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP169.858 148.667 M (DLG)SFmE48 0 :Mf1_10 sf( )S50 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP186.299 148.667 M ( with no arguments to get a switch summary)S175.026 N ( \320)S70.8 160.667 M (#5.)S16.3 N (Tokens begin with uppercase characters, rules begin with lowercase characters)S124.076 N ( \320)S70.8 172.667 M (#6.)S16.3 N (Even in C mode you can use C++ style comments in the non-action portion of )SFmE50 0 :Mf1_8 sf( )S52 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP414.419 172.667 M (ANTLR)SFmE52 0 :Mf1_10 sf( )S54 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP441.083 172.667 M ( source code)S49.946 N (1)S70.8 184.667 M (#7.)S16.3 N (In #token regular expressions spaces and tabs which are not escaped are ignored)S120.445 N (1)S70.8 196.667 M (#8.)S16.3 N (Never choose names which coincide with compiler reserved words or library names)S105.724 N (1)S70.8 208.667 M (#9.)S16.3 N (Write <<predicate>>? not <<predicate )SFmE55 0 :Mf0_10 sf( )S57 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP256.692 208.667 M (semi-colon)SFmE57 0 :Mf1_10 sf( )S59 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP300.562 208.667 M (>>? \(semantic predicates go in \"if\" conditions\))S50.792 N ( \320)S70.8 220.667 M (#10.)S11.3 N (Some constructs which cause warnings about ambiguities and optional paths)S135.099 N (1)SFmE60 0 :Mf1_12 sf( )S63 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 234 M (Checklist)SFmE63 0 :Mf1_10 sf( )S65 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 246.667 M (#11.)S11.3 N (Locate incorrectly spelled #token symbols using )SFmE65 0 :Mf1_8 sf( )S67 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP295.65 246.667 M (ANTLR)SFmE67 0 :Mf1_10 sf( )S69 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP322.314 246.667 M ( )S(\320w2 switch or by inspecting )SFmE70 0 :Mf0_10 sf( )S72 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP440.065 246.667 M (parserClassName)SFmE72 0 :Mf1_10 sf( )S74 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP511.725 246.667 M (.cpp)S12.336 N (1)S70.8 258.666 M (#12.)S11.3 N (Be consistent with in-line token definitions:  \")SFmE75 0 :Mf2_10 sf( )S81 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP283.919 258.666 M 0 0 12(&&)FmTxFmE81 0 :Mf1_10 sf( )S83 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP295.919 258.666 M (\" will not be assigned the same token number as \")SFmE83 0 :Mf2_10 sf( )S89 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP495.133 258.666 M 0 0 24(\\&\\&)FmTxFmE89 0 :Mf1_10 sf( )S91 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP519.133 258.666 M (\")S15.288 N ( \320)S70.8 270.666 M (#13.)S11.3 N (Duplicate definition of a #token name is not reported if there are no actions attached)S104.33 N (2)S70.8 282.666 M (#14.)S11.3 N (Use )SFmE92 0 :Mf1_8 sf( )S94 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 282.666 M (ANTLR)SFmE94 0 :Mf1_10 sf( )S96 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.311 282.666 M ( option -info o to detect orphan rules when ambiguities are reported)S124.018 N ( \320)S70.8 294.666 M (#15.)SFmE96 0 :Mf2_10 sf( )S102 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP99.6 294.666 M 0 0 12(LT)FmTxFmE102 0 :Mf1_10 sf( )S104 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP111.6 294.666 M (\()SFmE105 0 :Mf0_10 sf( )S107 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP114.928 294.666 M (i)SFmE107 0 :Mf1_10 sf( )S109 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.706 294.666 M (\) and )SFmE110 0 :Mf2_10 sf( )S116 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP140.472 294.666 M 0 0 36(LATEXT)FmTxFmE116 0 :Mf1_10 sf( )S118 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP176.472 294.666 M (\()SFmE118 0 :Mf0_10 sf( )S120 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP179.8 294.666 M (i)SFmE121 0 :Mf1_10 sf( )S123 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP182.578 294.666 M (\) are magical names in semantic predicates \321 punctuation is critical)S85.214 N (2)SFmE123 0 :Mf1_12 sf( )S126 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 308 M (#token)SFmE126 0 :Mf1_10 sf( )S128 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 320.666 M (#16.)S11.3 N (To change the token name appearing in syntax error messages: #token ID\(\"identifier\"\) \"[a-z A-Z]+\")S41.583 N (2)S70.8 332.666 M (#17.)S11.3 N (To match any single character use: \")SFmE129 0 :Mf2_10 sf( )S135 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP245.276 332.666 M 0 0 18(~[])FmTxFmE135 0 :Mf1_10 sf( )S137 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP263.276 332.666 M (\", to match everything to a newline use: \")SFmE137 0 :Mf2_10 sf( )S143 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP428.884 332.666 M 0 0 36(~[\\n]*)FmTxFmE143 0 :Mf1_10 sf( )S145 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP464.884 332.666 M (\")S69.536 N ( \320)S70.8 344.666 M (#18.)S11.3 N (To match an \")SFmE146 0 :Mf2_10 sf( )S152 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP156.16 344.666 M 0 0 6(@)FmTxFmE152 0 :Mf1_10 sf( )S154 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP162.16 344.666 M (\" in your input text use \")SFmE154 0 :Mf2_10 sf( )S160 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP260.305 344.666 M 0 0 18(\\@\")FmTxFmE160 0 :Mf1_10 sf( )S162 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP278.305 344.666 M (, otherwise it will be interpreted as the end-of-file symbol)S29.736 N ( \320)S70.8 356.666 M (#19.)S11.3 N (The escaped literals in #token regular expressions are: )SFmE163 0 :Mf2_10 sf( )S169 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP318.936 356.666 M 0 0 72(\\t \\n \\r \\b )FmTxFmE169 0 :Mf1_10 sf( )S171 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP390.936 356.666 M (\(not the same as )SFmE171 0 :Mf1_8 sf( )S173 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP458.131 356.666 M (ANSI)SFmE173 0 :Mf1_10 sf( )S175 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP476.799 356.666 M ( C\))S49.204 N ( \320)S70.8 368.666 M (#20.)S11.3 N (In #token expressions \"\\12\" is decimal, \"\\012\" is octal, and \"\\0x12\" is hex \(not the same as )SFmE176 0 :Mf1_8 sf( )S178 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP464.266 368.666 M (ANSI)SFmE178 0 :Mf1_10 sf( )S180 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP482.933 368.666 M ( C\))S43.069 N ( \320)S70.8 380.666 M (#21.)SFmE180 0 :Mf1_8 sf( )S182 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP99.6 380.666 M (DLG)SFmE182 0 :Mf1_10 sf( )S184 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP116.041 380.666 M ( wants to find the longest possible string that matches)S210.845 N (2)S70.8 392.666 M (#22.)S11.3 N (When two regular expressions of equal length match a regular expression the first one is chosen)S57.953 N (2)S70.8 404.666 M (#23.)S11.3 N (Inline regular expression are no different than #token statements)S183.744 N (2)S70.8 416.666 M (#24.)S11.3 N (Watch out when you see )SFmE185 0 :Mf2_10 sf( )S191 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP200.396 416.666 M 0 0 12(~[)FmTxFmE191 0 :Mf0_10 sf( )S193 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP212.396 416.666 M (list-of-characters)SFmE193 0 :Mf2_10 sf( )S199 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP281.815 416.666 M 0 0 6(])FmTxFmE199 0 :Mf1_10 sf( )S201 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP287.815 416.666 M ( at the end of a regular expression)S117.975 N (3)S70.8 428.666 M (#25.)S11.3 N (Watch out when one regular expression is the prefix of another)S189.293 N (3)S70.8 440.666 M (#26.)SFmE202 0 :Mf1_8 sf( )S204 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP99.6 440.666 M (DLG)SFmE204 0 :Mf1_10 sf( )S206 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP116.041 440.666 M ( is not able to backtrack \(unlike flex\))S277.525 N (3)S70.8 452.666 M (#27.)S11.3 N (The lexical routines mode\(\), skip\(\), and more\(\) are )SFmE206 0 :Mf0_10 sf( )S208 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP305.047 452.666 M (not)SFmE209 0 :Mf1_10 sf( )S211 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP317.825 452.666 M ( complicated !)S165.98 N (4)S70.8 464.666 M (#28.)S11.3 N (lextext\(\) includes strings accumulated via more\(\) \321 begexpr\(\)/endexpr\(\) refer only to the last matched RE)S12.438 N ( \320)S70.8 476.666 M (#29.)S11.3 N (Use )SFmE211 0 :Mf2_10 sf( )S217 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 476.666 M 0 0 186(\"if \(_lextext != _begexpr\) {...)FmTxFmE217 0 :Mf1_10 sf( )S219 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP303.647 476.666 M (}\" to test for RE being appended to lextext using more\(\))S12.988 N (4)S70.8 488.666 M (#30.)S11.3 N (#token actions can access protected variables of the )SFmE220 0 :Mf1_8 sf( )S222 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP308.382 488.666 M (DLG)SFmE222 0 :Mf1_10 sf( )S224 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP324.823 488.666 M ( base class)S171.477 N ( \320)S70.8 500.666 M (#31.)S11.3 N (When lookahead will break semantic routines in #token actions, consider using semantic predicates)S43.495 N (4)S70.8 512.666 M (#32.)S11.3 N (For 8 bit characters use flex or in )SFmE224 0 :Mf1_8 sf( )S226 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP234.537 512.666 M (DLG)SFmE226 0 :Mf1_10 sf( )S228 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP250.978 512.666 M ( make )SFmE229 0 :Mf2_10 sf( )S235 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP277.633 512.666 M 0 0 24(char)FmTxFmE235 0 :Mf1_10 sf( )S237 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP301.633 512.666 M ( variables unsigned \(g++ option \320funsigned-char\))S41.215 N (4)S70.8 524.666 M (#33.)S11.3 N (The maximum size of a )SFmE237 0 :Mf1_8 sf( )S239 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP196.509 524.666 M (DLG)SFmE239 0 :Mf1_10 sf( )S241 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP212.951 524.666 M ( token is set by an optional argument of the ctor )SFmE242 0 :Mf1_8 sf( )S244 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP406.503 524.666 M (DLG)SFmE244 0 :Mf1_10 sf( )S246 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP422.944 524.666 M (Lexer\(\) \321 default is 2000)S13.659 N (4)S70.8 536.666 M (#34.)S11.3 N (If a token is recognized using more\(\) and its #lexclass ignores end-of-file then the very last token will be lost)S5.743 N (4)S70.8 548.666 M (#35.)S11.3 N (Sometimes the easiest )SFmE246 0 :Mf1_8 sf( )S248 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP190.406 548.666 M (DLG)SFmE248 0 :Mf1_10 sf( )S250 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP206.847 548.666 M ( solution is to accept one character at a time.)S156.458 N (5)SFmE251 0 :Mf1_12 sf( )S254 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 561.999 M (#tokclass)SFmE254 0 :Mf1_10 sf( )S256 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 574.666 M (#36.)S11.3 N (#tokclass provides an efficient way to combine reserved words into reserved word sets)S94.886 N (5)S70.8 586.666 M (#37.)S11.3 N (Use )SFmE256 0 :Mf1_8 sf( )S258 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 586.666 M (ANTLR)SFmE258 0 :Mf1_10 sf( )S260 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.311 586.666 M (Parser::set_el\(\) to test whether an )SFmE261 0 :Mf1_8 sf( )S263 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP280.629 586.666 M (ANTLR)SFmE263 0 :Mf1_10 sf( )S265 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP307.293 586.666 M (TokenType is in a #tokclass or #FirstSetSymbol)S40.965 N (5)SFmE265 0 :Mf1_12 sf( )S268 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 599.999 M (#tokdef)SFmE268 0 :Mf1_10 sf( )S270 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 612.666 M (#38.)S11.3 N (A #tokdef must appear near the start of the grammar file \(only #first and #header may precede it\))S50.487 N ( \320)SFmE271 0 :Mf1_12 sf( )S274 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 625.999 M (#lexclass)SFmE274 0 :Mf1_10 sf( )S276 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 638.666 M (#39.)S11.3 N (Inline regular expressions are put in the most recently defined lexical class)S142.926 N (5)S70.8 650.666 M (#40.)S11.3 N (Use a stack of #lexclass modes in order to emulate lexical subroutines)S161.234 N (6)S70.8 662.666 M (#41.)S11.3 N (Sometimes a stack of #lexclass modes isn\325t enough)S236.183 N (6)SFmE276 0 :Mf1_12 sf( )S279 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 675.999 M (Lexical Lookahead)SFmE279 0 :Mf1_10 sf( )S281 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 688.666 M (#42.)S11.3 N (Vern Paxson\325s flex has more powerful features for lookahead than dlg)S160.421 N (6)S70.8 700.666 M (#43.)S11.3 N (Extra lookahead is available from class BufFileInput \(subclass of )SFmE282 0 :Mf1_8 sf( )S284 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP363.106 700.666 M (DLG)SFmE284 0 :Mf1_10 sf( )S286 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP379.547 700.666 M (InputStream\))S108.699 N (6)S70.8 712.666 M (#44.)S11.3 N (One extra character of lookahead is available to the #token action routine in )SFmE286 0 :Mf2_10 sf( )S292 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP405.291 712.666 M 0 0 12(ch)FmTxFmE292 0 :Mf1_10 sf( )S294 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP417.291 712.666 M ( \(except in interactive mode\))S8.77 N (7)SFmEendp%%Page: 3 3%%BeginPageSetupinitializepage(Moog; page: 3 of 6)setjob%%EndPageSetupgS 0 0 588 768 rC295 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE295 0 :Mf0_10 sf( )S297 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S128.881 N (2)S7 FmP60 78 495 648 FmqFFmE298 0 :Mf1_10 sf( )S300 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 84.667 M (#45.)S11.3 N (There is no easy way in )SFmE300 0 :Mf1_8 sf( )S302 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP196.783 84.667 M (DLG)SFmE302 0 :Mf1_10 sf( )S304 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP213.224 84.667 M ( to distinguish integer \"1\" from floating point \"1.\" when \"1.and.2\" is valid)S32.517 N (7)S70.8 96.667 M (#46.)S11.3 N (For lex operators \"^\" and \"$\" \(anchor pattern to start/end of line\) use flex - don\325t bother with dlg)S53.595 N ( \320)SFmE305 0 :Mf1_12 sf( )S308 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 110 M (Line and Column Information)SFmE308 0 :Mf1_10 sf( )S310 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 122.667 M (#47.)S11.3 N (If you want column information for error messages \(or other reasons\) use C++ mode)S100.265 N ( \320)S70.8 134.667 M (#48.)S11.3 N (If you want accurate line information even with many characters of lookahead use C++ mode)S65.008 N ( \320)S70.8 146.667 M (#49.)S11.3 N (Call trackColumns\(\) to request that )SFmE310 0 :Mf1_8 sf( )S312 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP243.164 146.667 M (DLG)SFmE312 0 :Mf1_10 sf( )S314 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP259.606 146.667 M ( maintain column information)S159.202 N ( \320)S70.8 158.667 M (#50.)S11.3 N (To report column information in syntax error messages override )SFmE315 0 :Mf1_8 sf( )S317 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP358.66 158.667 M (ANTLR)SFmE317 0 :Mf1_10 sf( )S319 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP385.324 158.667 M (Parser::syn\(\) \321 See Example #5)S22.116 N ( \320)S70.8 170.667 M (#51.)S11.3 N (Call newline\(\) and then set_endcol\(0\) in the #token action when a newline is encountered)S80.433 N ( \320)S70.8 182.667 M (#52.)S11.3 N (Adjusting column position for tab characters)S262.85 N (7)S70.8 194.667 M (#53.)S11.3 N (Computing column numbers when using more\(\) with strings that include tab characters and newlines)S37.362 N (8)SFmE319 0 :Mf1_12 sf( )S322 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 208 M (Ambiguity Aid \(options -aa, -aam, -aad)SFmE322 0 :Mf1_10 sf( )S324 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 220.667 M (#54.)S11.3 N (Example with nested if statement)S308.114 N (8)S70.8 232.667 M (#55.)S11.3 N (Example with cast expression)S317.276 N (10)S70.8 244.666 M (#56.)S11.3 N (Example with ambiguity due to limitations of linear approximation)S168.131 N (11)S70.8 256.666 M (#57.)S11.3 N (Summary of command line switches related to ambiguity aid)S192.584 N (13)SFmE325 0 :Mf1_12 sf( )S328 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 270 M (C++ Mode)SFmE328 0 :Mf1_10 sf( )S330 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 282.666 M (#58.)S11.3 N (The destructors of base classes should be virtual in almost all cases)S167.894 N (13)S70.8 294.666 M (#59.)S11.3 N (Why must the AST root be declared as ASTBase rather than AST ?)S166.505 N (13)S70.8 306.666 M (#60.)S11.3 N (C++ mode makes multiple parsers easy)S278.783 N (14)S70.8 318.666 M (#61.)S11.3 N (Use )SFmE330 0 :Mf1_8 sf( )S332 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 318.666 M (DLG)SFmE332 0 :Mf1_10 sf( )S334 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP134.088 318.666 M (LexerBase routines to save/restore )SFmE335 0 :Mf1_8 sf( )S337 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP274.572 318.666 M (DLG)SFmE337 0 :Mf1_10 sf( )S339 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP291.013 318.666 M ( state when multiple parsers share a token buffer)S51.195 N (14)S70.8 330.666 M (#62.)S11.3 N (In C++ mode ASTs and )SFmE339 0 :Mf1_8 sf( )S341 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP197.808 330.666 M (ANTLR)SFmE341 0 :Mf1_10 sf( )S343 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP224.472 330.666 M (Tokens do not use stack discipline as they do in C mode)S86.853 N (14)S70.8 342.666 M (#63.)S11.3 N (Summary of Token class inheritance in file AToken.h)S220.926 N (14)S70.8 354.666 M (#64.)S11.3 N (Diagram showing relationship of major classes)S248.414 N (14)S70.8 366.666 M (#65.)S11.3 N (Required AST constructors: AST\(\), AST\()SFmE344 0 :Mf1_8 sf( )S346 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP267.041 366.666 M (ANTLR)SFmE346 0 :Mf1_10 sf( )S348 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP293.705 366.666 M (TokenPtr\), and AST\(X )S(x,Y )S(y\) for #[X )S(x,Y )S(y])S64.587 N ( \320)S70.8 378.666 M (#66.)S11.3 N (Tokens are supplied as demanded by the parser. They are \"pulled\" rather than \"pushed\")S86.896 N (15)S70.8 390.666 M (#67.)S11.3 N (The lexer can access parser information using member function )SFmE348 0 :Mf2_10 sf( )S354 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP356.419 390.666 M 0 0 66(getParser\(\))FmTxFmE354 0 :Mf1_10 sf( )S356 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP536 390.666 M (15)S70.8 402.666 M (#68.)S11.3 N (Additional notes for users converting from C to C++ mode)S201.014 N (15)S70.8 414.666 M (#69.)S11.3 N (Use the macro )SFmE357 0 :Mf2_10 sf( )S363 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP159.847 414.666 M 0 0 48(mytoken\()FmTxFmE363 0 :Mf0_10 sf( )S365 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP207.847 414.666 M (expr)SFmE365 0 :Mf2_10 sf( )S371 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP225.613 414.666 M 0 0 6(\))FmTxFmE371 0 :Mf1_10 sf( )S373 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP231.613 414.666 M ( to convert an )SFmE374 0 :Mf1_8 sf( )S376 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP288.812 414.666 M (ANTLR)SFmE376 0 :Mf1_10 sf( )S378 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP315.476 414.666 M (TokenPtr to an )SFmE378 0 :Mf1_8 sf( )S380 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP377.405 414.666 M (ANTLR)SFmE380 0 :Mf1_10 sf( )S382 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP404.069 414.666 M (Token *)S101.384 N ( \320)S70.8 426.666 M (#70.)S11.3 N (When using reference counted tokens be careful about saving a pointer generated by )SFmE383 0 :Mf2_10 sf( )S389 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP439.712 426.666 M 0 0 54(myToken\(\))FmTxFmE389 0 :Mf1_10 sf( )S391 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP536 426.666 M (15)S70.8 438.666 M (#71.)SFmE391 0 :Mf2_10 sf( )S397 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP99.6 438.666 M 0 0 18(LA\()FmTxFmE397 0 :Mf0_10 sf( )S399 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.6 438.666 M (i)SFmE400 0 :Mf2_10 sf( )S406 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP120.378 438.666 M 0 0 6(\))FmTxFmE406 0 :Mf1_10 sf( )S408 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP126.378 438.666 M ( is a cache of )SFmE408 0 :Mf2_10 sf( )S414 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP181.066 438.666 M 0 0 12(LT)FmTxFmE414 0 :Mf1_10 sf( )S416 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP193.066 438.666 M (\()SFmE417 0 :Mf0_10 sf( )S419 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP196.393 438.666 M (i)SFmE419 0 :Mf2_10 sf( )S425 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP199.172 438.666 M 0 0 6(\))FmTxFmE425 0 :Mf1_10 sf( )S427 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP205.172 438.666 M ( values used by the parser \321 it is valid only for)SFmE428 0 :Mf0_10 sf( )S430 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP394.835 438.666 M ( i )SFmE430 0 :Mf4_10 sf( )S432 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP402.613 438.666 M (\243)SFmE433 0 :Mf0_10 sf( )S435 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP408.101 438.666 M ( k)SFmE435 0 :Mf1_10 sf( )S437 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP538.5 438.666 M ( \320)S70.8 450.666 M (#72.)S11.3 N (To disable reference counting of )SFmE438 0 :Mf1_8 sf( )S440 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP232.029 450.666 M (ANTLR)SFmE440 0 :Mf1_10 sf( )S442 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP258.693 450.666 M (Tokens use )SFmE442 0 :Mf0_10 sf( )S444 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP306.457 450.666 M (parserName)SFmE445 0 :Mf1_10 sf( )S447 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP355.891 450.666 M (.noGarbageCollectTokens\(\))S71.274 N ( \320)S70.8 462.666 M (#73.)S11.3 N (For string input use )SFmE447 0 :Mf1_8 sf( )S449 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP180.144 462.666 M (DLG)SFmE449 0 :Mf1_10 sf( )S451 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP196.586 462.666 M (Stri)SFmE452 0 :Mf2_10 sf( )S458 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP211.029 462.666 M 0 0 180(ngInput\(const DLGChar *string\))FmTxFmE458 0 :Mf1_10 sf( )S460 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP391.029 462.666 M ( for a )SFmE460 0 :Mf1_8 sf( )S462 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP414.623 462.666 M (DLG)SFmE462 0 :Mf2_10 sf( )S468 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP431.064 462.666 M 0 0 66(InputStream)FmTxFmE468 0 :Mf1_10 sf( )S470 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP538.5 462.666 M ( \320)S70.8 474.666 M (#74.)S11.3 N (Use )SFmE471 0 :Mf2_10 sf( )S477 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 474.666 M 0 0 108(#lexmember <<...>>)FmTxFmE477 0 :Mf1_10 sf( )S479 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP225.647 474.666 M ( to insert code into the )SFmE479 0 :Mf1_8 sf( )S481 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP317.287 474.666 M (DLG)SFmE481 0 :Mf1_10 sf( )S483 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP333.729 474.666 M (Lexer class)S159.525 N ( \320)S70.8 486.666 M (#75.)S11.3 N (Use )SFmE484 0 :Mf2_10 sf( )S490 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 486.666 M 0 0 108(#lexprefix <<...>>)FmTxFmE490 0 :Mf1_10 sf( )S492 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP225.647 486.666 M ( to insert )SFmE492 0 :Mf2_10 sf( )S498 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP263.137 486.666 M 0 0 48(#include)FmTxFmE498 0 :Mf1_10 sf( )S500 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP311.137 486.666 M ( statements into the )SFmE501 0 :Mf1_8 sf( )S503 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP391.118 486.666 M (DLG)SFmE503 0 :Mf1_10 sf( )S505 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP407.559 486.666 M (Lexer file)S91.805 N ( \320)S70.8 498.666 M (#76.)S11.3 N (How to change the default error reporting actions of )SFmE505 0 :Mf1_8 sf( )S507 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP310.332 498.666 M (DLG)SFmE507 0 :Mf1_10 sf( )S509 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP326.774 498.666 M ( and )SFmE510 0 :Mf1_8 sf( )S512 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP346.212 498.666 M (ANTLR)SFmE512 0 :Mf1_10 sf( )S514 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP536 498.666 M (15)SFmE514 0 :Mf1_12 sf( )S517 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 512 M (ASTs)SFmE517 0 :Mf1_10 sf( )S519 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 524.666 M (#77.)S11.3 N (To enable AST construction \(automatic or explicit\) use the )SFmE520 0 :Mf1_8 sf( )S522 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP337.564 524.666 M (ANTLR)SFmE522 0 :Mf1_10 sf( )S524 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP364.228 524.666 M ( \320gt switch)S130.39 N ( \320)S70.8 536.666 M (#78.)S11.3 N (Use )SFmE524 0 :Mf1_8 sf( )S526 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 536.666 M (ANTLR)SFmE526 0 :Mf1_10 sf( )S528 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.311 536.666 M ( option -newAST to make AST creation a member function of the parser)S101.252 N (16)S70.8 548.666 M (#79.)S11.3 N (Use symbolic tags \(rather than numbers\) to refer to tokens and ASTs in rules)S129.02 N (16)S70.8 560.666 M (#80.)S11.3 N (Constructor AST\()SFmE529 0 :Mf1_8 sf( )S531 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP171.524 560.666 M (ANTLR)SFmE531 0 :Mf1_10 sf( )S533 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP198.188 560.666 M (TokenPtr\) is automatically called for terminals when )SFmE533 0 :Mf1_8 sf( )S535 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP411.711 560.666 M (ANTLR)SFmE535 0 :Mf1_10 sf( )S537 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP438.375 560.666 M ( \320gt switch is used)S23.748 N (16)S70.8 572.666 M (#81.)S11.3 N (If you use ASTs you have to pass a root AST to the parser)S203.421 N (16)S70.8 584.666 M (#82.)S11.3 N (Use ast\320>destroy\(\) to recursively descend the AST tree and free all sub-trees)S131.478 N ( \320)S70.8 596.666 M (#83.)S11.3 N (Don\'t confuse )SFmE538 0 :Mf2_10 sf( )S544 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP157.491 596.666 M 0 0 36(#[...])FmTxFmE544 0 :Mf1_10 sf( )S546 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP193.491 596.666 M ( with )SFmE546 0 :Mf2_10 sf( )S552 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP216.266 596.666 M 0 0 36(#\(...\))FmTxFmE552 0 :Mf1_10 sf( )S554 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP536 596.666 M (16)S70.8 608.666 M (#84.)S11.3 N (The make-a-root operator for ASTs \(\"^\"\) can be applied only to terminals \(#token, #tokclass, #tokdef\))S27.611 N (17)S70.8 620.666 M (#85.)S11.3 N (An already constructed AST tree cannot be the root of a new tree)S175.978 N (17)S70.8 632.666 M (#86.)S11.3 N (Don\325t assign to #0 unless automatic construction of ASTs is disabled using the \"!\" operator on a rule)S34.191 N (17)S70.8 644.666 M (#87.)S11.3 N (The statement in Item #86 is stronger than necessary)S225.929 N (17)S70.8 656.666 M (#88.)S11.3 N (A rule that constructs an AST returns an AST even when its caller uses the \"!\" operator)S89.779 N ( \320)S70.8 668.666 M (#89.)S11.3 N (\(C++ mode\) Without )SFmE555 0 :Mf1_8 sf( )S557 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP186.695 668.666 M (ANTLR)SFmE557 0 :Mf1_10 sf( )S559 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP213.359 668.666 M (RefCountToken, a token which isn\325t used in an AST will result in lost memory)S6.601 N (17)S70.8 680.666 M (#90.)S11.3 N (When passing )SFmE559 0 :Mf2_10 sf( )S565 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP158.472 680.666 M 0 0 36(#\(...\))FmTxFmE565 0 :Mf1_10 sf( )S567 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP194.472 680.666 M ( or )SFmE568 0 :Mf2_10 sf( )S574 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP207.8 680.666 M 0 0 36(#[...])FmTxFmE574 0 :Mf1_10 sf( )S576 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP243.8 680.666 M ( to a subroutine it must be cast from \"ASTBase *\" to \"AST *\")S44.546 N (17)S70.8 692.666 M (#91.)S11.3 N (Some examples of )SFmE576 0 :Mf2_10 sf( )S582 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP175.965 692.666 M 0 0 36(#\(...\))FmTxFmE582 0 :Mf1_10 sf( )S584 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP211.965 692.666 M ( notation using the )SFmE585 0 :Mf1_8 sf( )S587 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP288.622 692.666 M (PCCTS)SFmE587 0 :Mf1_10 sf( )S589 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP313.079 692.666 M ( list notation)S172.923 N (18)S70.8 704.666 M (#92.)S11.3 N (A rule which derives epsilon can short circuit its caller\325s explicitly constructed AST)S100.426 N (18)S70.8 716.666 M (#93.)S11.3 N (How to use automatic AST tree construction when a token code depends on the alternative chosen)S43.495 N (18)SFmEendp%%Page: 4 4%%BeginPageSetupinitializepage(Moog; page: 4 of 6)setjob%%EndPageSetupgS 0 0 588 768 rC589 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE589 0 :Mf0_10 sf( )S591 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S128.881 N (3)S7 FmP60 78 495 648 FmqFFmE592 0 :Mf1_10 sf( )S594 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 84.667 M (#94.)S11.3 N (For doubly linked ASTs derive from class ASTDoublyLinkedBase and call tree\320>double_link\(0,0\))S40.045 N (18)S70.8 96.667 M (#95.)S11.3 N (When ASTs are constructed manually the programmer is responsible for deleting them on rule failure)S29.906 N (18)SFmE594 0 :Mf1_12 sf( )S597 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 110 M (Rules)SFmE597 0 :Mf1_10 sf( )S599 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 122.667 M (#96.)S11.3 N (To refer to a field of an )SFmE600 0 :Mf1_8 sf( )S602 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP195.374 122.667 M (ANTLR)SFmE602 0 :Mf1_10 sf( )S604 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP222.038 122.667 M (Token within a rule\325s action use  )SFmE604 0 :Mf2_10 sf( )S610 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP355.6 122.667 M 0 0 174(<<... mytoken\($x\)->field...>>)FmTxFmE610 0 :Mf1_10 sf( )S612 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP536 122.667 M (19)S70.8 134.667 M (#97.)S11.3 N (Rules don\325t return tokens values, thus this won\325t work: )S( )SFmE613 0 :Mf2_10 sf( )S619 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP324.268 134.667 M 0 0 174(rule: r1:rule1  <<...$r1...>>)FmTxFmE619 0 :Mf1_10 sf( )S621 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP536 134.667 M (19)S70.8 146.667 M (#98.)S11.3 N (A simple example of rewriting a grammar to remove left recursion)S169.859 N (19)S70.8 158.667 M (#99.)S11.3 N (A simple example of left-factoring to reduce the amount of )SFmE621 0 :Mf1_8 sf( )S623 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP338.382 158.667 M (ANTLR)SFmE623 0 :Mf1_10 sf( )S625 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP365.046 158.667 M ( lookahead)S127.36 N (19)S70.8 170.667 M (#100.)SFmE626 0 :Mf1_8 sf( )S628 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP99.6 170.667 M (ANTLR)SFmE628 0 :Mf1_10 sf( )S630 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP126.264 170.667 M ( will guess where to match \")SFmE630 0 :Mf2_10 sf( )S636 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP239.75 170.667 M 0 0 6(@)FmTxFmE636 0 :Mf1_10 sf( )S638 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP245.75 170.667 M (\" if the user omits it from the start rule)S136.505 N (20)S70.8 182.667 M (#101.)S6.3 N (To match any token use the token wild-card expression \".\" \(dot\))S180.279 N (20)S70.8 194.667 M (#102.)S6.3 N (The \"~\" \(tilde\) operator applied to a #token or #tokclass is satisfied when the input token does )SFmE639 0 :Mf0_10 sf( )S641 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP478.321 194.667 M (not)SFmE641 0 :Mf1_10 sf( )S643 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP491.099 194.667 M ( match)S17.967 N (20)S70.8 206.667 M (#103.)S6.3 N (To list the rules of the grammar grep )SFmE644 0 :Mf0_10 sf( )S646 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP248.982 206.667 M (parserClassName.)SFmE646 0 :Mf1_10 sf( )S648 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP323.142 206.667 M (h for \"_root\" or edit the output from )SFmE649 0 :Mf1_8 sf( )S651 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP469.593 206.667 M (ANTLR)SFmE651 0 :Mf1_10 sf( )S653 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP496.257 206.667 M ( \320cr)S26.977 N ( \320)S70.8 218.667 M (#104.)S6.3 N (The )SFmE653 0 :Mf1_8 sf( )S655 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 218.667 M (ANTLR)SFmE655 0 :Mf1_10 sf( )S657 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.311 218.667 M ( \320gd trace option can be useful in sometimes unexpected ways)S142.336 N (20)S70.8 230.666 M (#105.)S6.3 N (Associativity and precedence of operations is determined by nesting of rules)S130.968 N (20)S70.8 242.666 M (#106.)S6.3 N (#tokclass can replace a rule consisting only of alternatives with terminals \(no actions\))S93.766 N (21)S70.8 254.666 M (#107.)S6.3 N (Rather than comment out a rule during testing, add a nonsense token which never matches \321 See Item #110.)S2.379 N ( \320)SFmE658 0 :Mf1_12 sf( )S661 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 268 M (Init-Actions)SFmE661 0 :Mf1_10 sf( )S663 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 280.666 M (#108.)S6.3 N (Don\'t confuse init-actions with leading-actions \(actions which precede a rule\))S126.686 N (21)S70.8 292.666 M (#109.)S6.3 N (An empty sub-rule can change a regular action into an init-action)S175.958 N (22)S70.8 304.666 M (#110.)S6.3 N (Commenting out a sub-rule can change a leading-action into an init-action)S139.283 N (22)S70.8 316.666 M (#111.)S6.3 N (Init-actions are executed just once for sub-rules: )SFmE663 0 :Mf2_10 sf( )S669 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP294.778 316.666 M 0 0 36(\(...\)+)FmTxFmE669 0 :Mf1_10 sf( )S671 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP330.778 316.666 M (, )SFmE672 0 :Mf2_10 sf( )S678 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP335.778 316.666 M 0 0 36(\(...\)*)FmTxFmE678 0 :Mf1_10 sf( )S680 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP371.778 316.666 M (, and )SFmE680 0 :Mf2_10 sf( )S686 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP393.717 316.666 M 0 0 30({...})FmTxFmE686 0 :Mf1_10 sf( )S688 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP536 316.666 M (22)SFmE689 0 :Mf1_12 sf( )S692 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 330 M (Inheritance)SFmE692 0 :Mf1_10 sf( )S694 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 342.666 M (#112.)S6.3 N (Downward inherited variables are just normal C arguments to the function which recognizes the rule)S33.79 N (22)S70.8 354.666 M (#113.)S6.3 N (Upward inheritance returns arguments by passing back values)S188.451 N (23)S70.8 366.666 M (#114.)S6.3 N (Be careful about passing via upward inheritance LT\(i\)->getText\(\) if using )SFmE694 0 :Mf1_8 sf( )S696 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP397.876 366.666 M (ANTLR)SFmE696 0 :Mf1_10 sf( )S698 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP424.54 366.666 M (CommonToken)S48.686 N (23)S70.8 378.666 M (#115.)SFmE699 0 :Mf1_8 sf( )S701 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP99.6 378.666 M (ANTLR)SFmE701 0 :Mf1_10 sf( )S703 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP126.264 378.666 M ( \320gt code will include the AST with downward inheritance values in the rule\325s argument list)S44.306 N ( \320)S70.8 390.666 M (#116.)S6.3 N (Predefine the )SFmE703 0 :Mf1_8 sf( )S705 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP155.125 390.666 M (PURIFY)SFmE705 0 :Mf1_10 sf( )S707 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP183.578 390.666 M ( macro if you are passing objects using upward inheritance)S117.241 N (23)SFmE708 0 :Mf1_12 sf( )S711 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 404 M (Syntactic Predicates)SFmE711 0 :Mf1_10 sf( )S713 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 416.666 M (#117.)S6.3 N (Normal actions are suppressed while in guess mode because they have side effects)S109.051 N ( \320)S70.8 428.666 M (#118.)S6.3 N (Automatic construction of ASTs is suppressed during guess mode because it is a side effect)S72.919 N ( \320)S70.8 440.666 M (#119.)S6.3 N (Syntactic predicates should not have side-effects)S241.769 N (24)S70.8 452.666 M (#120.)S6.3 N (How to use init-actions to create side-effects in guess mode \(despite Item #119\))S117.648 N (24)S70.8 464.666 M (#121.)S6.3 N (With values of )SFmE713 0 :Mf0_10 sf( )S715 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP160.967 464.666 M (k)SFmE716 0 :Mf1_10 sf( )S718 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP165.406 464.666 M (>1 or infinite lookahead mode one cannot use feedback from parser to lexer)S67.318 N (24)S70.8 476.666 M (#122.)S6.3 N (Can\325t use interactive scanner \()SFmE718 0 :Mf1_8 sf( )S720 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP221.197 476.666 M (ANTLR)SFmE720 0 :Mf1_10 sf( )S722 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP247.861 476.666 M ( \320gk option\) with )SFmE723 0 :Mf1_8 sf( )S725 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP319.521 476.666 M (ANTLR)SFmE725 0 :Mf1_10 sf( )S727 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP346.185 476.666 M ( infinite lookahead)S117.342 N ( \320)S70.8 488.666 M (#123.)S6.3 N (Syntactic predicates are implemented using setjmp/longjmp \321 beware C++ objects requiring destructors)S19.156 N ( \320)SFmE727 0 :Mf1_12 sf( )S730 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 502 M (Semantic Predicates)SFmE730 0 :Mf1_10 sf( )S732 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 514.666 M (#124.)S6.3 N (Semantic predicates have higher precedence than alternation: )SFmE733 0 :Mf2_10 sf( )S739 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP346.968 514.666 M 0 0 54(<<>>? A|B)FmTxFmE739 0 :Mf1_10 sf( )S741 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP400.968 514.666 M ( means )SFmE741 0 :Mf2_10 sf( )S747 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP431.513 514.666 M 0 0 66(\(<<>>? A\)|B)FmTxFmE747 0 :Mf1_10 sf( )S749 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP538.5 514.666 M ( \320)S70.8 526.666 M (#125.)S6.3 N (Get rid of warnings about missing LT\(i\) by using a comment: )SFmE750 0 :Mf2_10 sf( )S756 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP348.699 526.666 M 0 0 66(/* LT\(i\) */)FmTxFmE756 0 :Mf1_10 sf( )S758 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP538.5 526.666 M ( \320)S70.8 538.666 M (#126.)S6.3 N (It is sometime desirable to use leading actions to inhibit hoisting of semantic predicates)S89.286 N ( \320)S70.8 550.666 M (#127.)S6.3 N (Any actions \(except init-actions\) inhibit the hoisting of semantic predicates)S135.675 N (24)S70.8 562.666 M (#128.)S6.3 N (Semantic predicates that use local variables or require init-actions must inhibit hoisting)S90.411 N ( \320)S70.8 574.666 M (#129.)S6.3 N (Semantic predicates that use inheritance variables must not be hoisted)S156.788 N (24)S70.8 586.666 M (#130.)S6.3 N (A semantic predicate which is not at the left edge of a rule becomes a validation predicate)S77.128 N (24)S70.8 598.666 M (#131.)S6.3 N (Semantic predicates are not always hoisted into the prediction expression)S143.458 N (25)S70.8 610.666 M (#132.)S6.3 N (Semantic predicates can\325t be hoisted into a sub-rule: \")SFmE758 0 :Mf2_10 sf( )S764 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP315.257 610.666 M 0 0 30({x} y)FmTxFmE764 0 :Mf1_10 sf( )S766 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP345.257 610.666 M (\" is not exactly equivalent to \")SFmE767 0 :Mf2_10 sf( )S773 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP466.162 610.666 M 0 0 42(x y | y)FmTxFmE773 0 :Mf1_10 sf( )S775 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP508.162 610.666 M (\")S23.758 N (25)S70.8 622.666 M (#133.)S6.3 N (How to change the reporting of failed semantic predicates)S204.845 N (25)S70.8 634.666 M (#134.)S6.3 N (A semantic predicate should be free of side-effects because it may be evaluated multiple times)S58.807 N (25)S70.8 646.666 M (#135.)S6.3 N (There\325s no simple way to avoid evaluation of a semantic predicate for validation after use in prediction)S26.859 N ( \320)S70.8 658.666 M (#136.)S6.3 N (What is the \"context\" of a semantic predicate ?)S248.885 N (26)S70.8 670.666 M (#137.)S6.3 N (Use )SFmE775 0 :Mf1_8 sf( )S777 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 670.666 M (ANTLR)SFmE777 0 :Mf1_10 sf( )S779 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.311 670.666 M ( option \"-info p\" for information on how semantic predicates are being handled and hoisted)S26.992 N (26)S70.8 682.666 M (#138.)S6.3 N (Semantic predicates, predicate context, and hoisting)S228.429 N (27)S70.8 694.666 M (#139.)S6.3 N (Another example of predicate hoisting)S282.574 N (28)S70.8 706.666 M (#140.)S6.3 N (Example of predicate hoisting and suppression with the )SFmE780 0 :Mf1_8 sf( )S782 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP323.975 706.666 M (ANTLR)SFmE782 0 :Mf1_10 sf( )S784 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP350.639 706.666 M ( option -mrhoist on)S108.425 N (29)S70.8 718.666 M (#141.)S6.3 N (The context guard)SFmE784 0 :Mf2_10 sf( )S790 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP172.347 718.666 M 0 0 150( \(...\)? && <<predicate>>?)FmTxFmE790 0 :Mf1_10 sf( )S792 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP322.347 718.666 M (  vs. )SFmE793 0 :Mf2_10 sf( )S799 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP341.236 718.666 M 0 0 138(\(...\) => <<predicate>>?)FmTxFmE799 0 :Mf1_10 sf( )S801 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP536 718.666 M (31)SFmEendp%%Page: 5 5%%BeginPageSetupinitializepage(Moog; page: 5 of 6)setjob%%EndPageSetupgS 0 0 588 768 rC801 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE801 0 :Mf0_10 sf( )S803 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S128.881 N (4)S7 FmP60 78 495 648 FmqFFmE804 0 :Mf1_10 sf( )S806 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 84.667 M (#142.)S6.3 N (Experimental )SFmE806 0 :Mf1_8 sf( )S808 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP155.965 84.667 M (ANTLR)SFmE808 0 :Mf1_10 sf( )S810 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP182.629 84.667 M ( option -mrhoistk on for suppression of predicates with lookahead depth )SFmE811 0 :Mf0_10 sf( )S813 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP473.373 84.667 M (k)SFmE813 0 :Mf1_10 sf( )S815 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP477.812 84.667 M ( > 1)S42.548 N (33)S70.8 96.667 M (#143.)S6.3 N ( Use #pred statement to describe the logical relationship of related predicates)S128.49 N (34)S70.8 108.667 M (#144.)S6.3 N (Disable predicate hoisting explicitly using the pseudo-action: )SFmE816 0 :Mf2_10 sf( )S822 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP347.024 108.667 M 0 0 162(rule: <<;>> <<nohoist>> ...)FmTxFmE822 0 :Mf1_10 sf( )S824 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP536 108.667 M (34)S70.8 120.667 M (#145.)S6.3 N (Simplification of predicate expressions when there are multiple references to predicates)S86.026 N (34)SFmE824 0 :Mf1_12 sf( )S827 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 134 M (Debugging Tips for New Users of )SFmE827 0 :Mf1_8 sf( )S829 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP226.603 134 M (PCCTS)SFmE829 0 :Mf1_10 sf( )S831 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 146.667 M (#146.)S6.3 N (A syntax error with quotation marks on separate lines means a problem with newline)S96.803 N (35)S70.8 158.667 M (#147.)S6.3 N (Use the )SFmE832 0 :Mf1_8 sf( )S834 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132.364 158.667 M (ANTLR)SFmE834 0 :Mf1_10 sf( )S836 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP159.028 158.667 M ( \320gd switch to debug via rule trace)S241.469 N ( \320)S70.8 170.667 M (#148.)S6.3 N (Use the )SFmE836 0 :Mf1_8 sf( )S838 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP132.364 170.667 M (ANTLR)SFmE838 0 :Mf1_10 sf( )S840 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP159.028 170.667 M ( \320gs switch to generate code with symbolic names for token tests)S119.836 N ( \320)S70.8 182.667 M (#149.)S6.3 N (How to track )SFmE841 0 :Mf1_8 sf( )S843 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP154.3 182.667 M (DLG)SFmE843 0 :Mf1_10 sf( )S845 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP170.741 182.667 M ( results)S336.658 N (35)S70.8 194.667 M (#150.)S6.3 N (For complex problems use traceOption and traceGuessOption to control trace output)S100.692 N ( \320)SFmE845 0 :Mf1_12 sf( )S848 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 208 M (Switches and Options)SFmE848 0 :Mf1_10 sf( )S850 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 220.667 M (#151.)S6.3 N (Use )SFmE851 0 :Mf1_8 sf( )S853 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 220.667 M (ANTLR)SFmE853 0 :Mf1_10 sf( )S855 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.311 220.667 M ( \320gx switch to suppress regeneration of the )SFmE855 0 :Mf1_8 sf( )S857 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP318.137 220.667 M (DLG)SFmE857 0 :Mf1_10 sf( )S859 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP334.578 220.667 M ( code and recompilation of )SFmE860 0 :Mf1_8 sf( )S862 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP444.256 220.667 M (DLG)SFmE862 0 :Mf1_10 sf( )S864 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP460.697 220.667 M (Lexer.cpp)S35.051 N (35)S70.8 232.667 M (#152.)S6.3 N (Can\325t use an interactive scanner \()SFmE864 0 :Mf1_8 sf( )S866 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP233.135 232.667 M (ANTLR)SFmE866 0 :Mf1_10 sf( )S868 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP259.799 232.667 M ( \320gk option\) with )SFmE869 0 :Mf1_8 sf( )S871 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP331.459 232.667 M (ANTLR)SFmE871 0 :Mf1_10 sf( )S873 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP358.123 232.667 M ( infinite lookahead)S105.403 N ( \320)S70.8 244.666 M (#153.)S6.3 N (To make )SFmE873 0 :Mf1_8 sf( )S875 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP137.364 244.666 M (DLG)SFmE875 0 :Mf1_10 sf( )S877 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP153.805 244.666 M ( case insensitive use the )SFmE878 0 :Mf1_8 sf( )S880 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP251.823 244.666 M (DLG)SFmE880 0 :Mf1_10 sf( )S882 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP268.264 244.666 M ( \320ci switch)S224.416 N (35)S70.8 256.666 M (#154.)S6.3 N ( Use )SFmE882 0 :Mf1_8 sf( )S884 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP120.147 256.666 M (ANTLR)SFmE884 0 :Mf1_10 sf( )S886 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP146.811 256.666 M ( option -glms to convert Microsoft file names like \"..\\foo.g\" to \"../foo.g\" in generated files)S32.148 N ( \320)S70.8 268.666 M (#155.)S6.3 N (Use )SFmE887 0 :Mf1_8 sf( )S889 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 268.666 M (ANTLR)SFmE889 0 :Mf1_10 sf( )S891 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.311 268.666 M ( option -treport )SFmE891 0 :Mf0_10 sf( )S893 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP207.346 268.666 M (number)SFmE894 0 :Mf1_10 sf( )S896 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP237.892 268.666 M ( to locate alternatives using a lot of CPU time to resolve)S74.011 N (35)S70.8 280.666 M (#156.)S6.3 N (The )SFmE896 0 :Mf1_8 sf( )S898 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 280.666 M (ANTLR)SFmE898 0 :Mf1_10 sf( )S900 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.311 280.666 M ( option -info \( p - predicate, t - tnodes, m - monitor, f - follow set, o - orphans\))S78.75 N (35)SFmE901 0 :Mf1_12 sf( )S904 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 294 M (Multiple Source Files)SFmE904 0 :Mf1_10 sf( )S906 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 306.666 M (#157.)S6.3 N (To see how to place main\(\) in a .cpp file rather than a grammar file \(\".g\"\) see pccts./testcpp/8/main.cpp)S23.712 N (36)S70.8 318.666 M (#158.)S6.3 N (How to put file scope information into the second file of a grammar with two .g files)S97.906 N (36)SFmE906 0 :Mf1_12 sf( )S909 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 332 M (Source Code Format)SFmE909 0 :Mf1_10 sf( )S911 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 344.666 M (#159.)S6.3 N (To place the C right shift operator \">>\" inside an action use \"\\>\\>\")S169.825 N (36)S70.8 356.666 M (#160.)S6.3 N (One can continue a regular expression in a #token statement across lines \(or use flex definitions\))S50.179 N (36)S70.8 368.666 M (#161.)S6.3 N (A #token without an action will attempt to swallow an action which immediately follows it - use \";\")S36.957 N (36)SFmE912 0 :Mf1_12 sf( )S915 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 382 M (Miscellaneous)SFmE915 0 :Mf1_10 sf( )S917 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 394.666 M (#162.)S6.3 N (A grammar may contain multiple start rules.  They aren\325t declared.)S171.249 N ( \320)S70.8 406.666 M (#163.)S6.3 N (Given )SFmE917 0 :Mf2_10 sf( )S923 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP126.536 406.666 M 0 0 126(rule[A a,B b] > [X x])FmTxFmE923 0 :Mf1_10 sf( )S925 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP252.536 406.666 M ( the proto is )SFmE926 0 :Mf2_10 sf( )S932 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP302.526 406.666 M 0 0 222(X rule\(ASTBase* ast,int* sig,A a,B b\))FmTxFmE932 0 :Mf1_10 sf( )S934 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP536 406.666 M (37)S70.8 418.666 M (#164.)S6.3 N (To remake )SFmE934 0 :Mf1_8 sf( )S936 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP145.13 418.666 M (ANTLR)SFmE936 0 :Mf1_10 sf( )S938 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP171.794 418.666 M ( after changes to the source code use )SFmE939 0 :Mf2_10 sf( )S945 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP320.602 418.666 M 0 0 102(make -f makefile1)FmTxFmE945 0 :Mf1_10 sf( )S947 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP536 418.666 M (37)S70.8 430.666 M (#165.)SFmE947 0 :Mf1_8 sf( )S949 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP99.6 430.666 M (ANTLR)SFmE949 0 :Mf1_10 sf( )S951 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP126.264 430.666 M ( reports \"... action buffer overflow ...\")S258.869 N (37)S70.8 442.666 M (#166.)S6.3 N (Exception handling uses status codes and )SFmE952 0 :Mf2_10 sf( )S958 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP267.332 442.666 M 0 0 36(switch)FmTxFmE958 0 :Mf1_10 sf( )S960 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP303.332 442.666 M ( statements to unwind the stack rule by rule)S61.335 N ( \320)S70.8 454.666 M (#167.)S6.3 N (For tokens with complex internal structure add #token expressions to match frequent errors)S71.542 N (37)S70.8 466.666 M (#168.)S6.3 N (See pccts/testcpp/2/test.g and testcpp/3/test.g for examples of how to integrate non-)SFmE960 0 :Mf1_8 sf( )S962 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP433.372 466.666 M (DLG)SFmE962 0 :Mf1_10 sf( )S964 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP449.813 466.666 M ( lexers with )SFmE965 0 :Mf1_8 sf( )S967 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP498.961 466.666 M (PCCTS)SFmE967 0 :Mf1_10 sf( )S969 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP538.5 466.666 M ( \320)S70.8 478.666 M (#169.)S6.3 N (Ambiguity, full LL\()SFmE969 0 :Mf0_10 sf( )S971 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP179.861 478.666 M (k)SFmE972 0 :Mf1_10 sf( )S974 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP184.3 478.666 M (\), and the linear approximation to LL\()SFmE974 0 :Mf0_10 sf( )S976 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP336.184 478.666 M (k)SFmE977 0 :Mf1_10 sf( )S979 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP340.623 478.666 M (\))S192.049 N (37)S70.8 490.666 M (#170.)S6.3 N (Ambiguity, )SFmE979 0 :Mf2_10 sf( )S985 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP147.933 490.666 M 0 0 42(#pragma)FmTxFmE985 0 :Mf1_10 sf( )S987 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP189.933 490.666 M (, and )SFmE988 0 :Mf1_8 sf( )S990 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP211.871 490.666 M (ANTLR)SFmE990 0 :Mf1_10 sf( )S992 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP238.535 490.666 M ( -rl switch \(Contributed by John Lilley  jlilley@empathy.com\))S48.041 N (39)S70.8 502.666 M (#171.)S6.3 N (What is the difference between \")SFmE992 0 :Mf2_10 sf( )S998 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP230.547 502.666 M 0 0 96(\(...\)? <<...>>? )FmTxFmE998 0 :Mf0_10 sf( )S1000 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP326.547 502.666 M (x)SFmE1001 0 :Mf1_10 sf( )S1003 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP330.986 502.666 M (\" and \")SFmE1003 0 :Mf2_10 sf( )S1009 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP358.583 502.666 M 0 0 114(\(...\)? => <<...>>? )FmTxFmE1009 0 :Mf0_10 sf( )S1011 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP472.583 502.666 M (x)SFmE1012 0 :Mf1_10 sf( )S1014 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP477.022 502.666 M (\" ?)S47.96 N (41)S70.8 514.666 M (#172.)S6.3 N (Memory leaks and lost resources)S304.789 N (41)S70.8 526.666 M (#173.)S6.3 N (Some ambiguities can be fixed by introduction of new #token numbers)S152.591 N (41)S70.8 538.666 M (#174.)S6.3 N ( Subclassing )SFmE1014 0 :Mf1_8 sf( )S1016 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP152.371 538.666 M (DLG)SFmE1016 0 :Mf1_10 sf( )S1018 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP168.812 538.666 M (InputStream)S317.761 N (42)SFmE1019 0 :Mf1_12 sf( )S1022 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 552 M (Changes From The Original 1.33 Which Are Not Part of Any Other Section)SFmE1022 0 :Mf1_10 sf( )S1024 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 564.666 M (#175.)S6.3 N (Use )SFmE1024 0 :Mf2_10 sf( )S1030 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 564.666 M 0 0 78(#first <<...>)FmTxFmE1030 0 :Mf1_10 sf( )S1032 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP195.647 564.666 M ( to place references to precompiled header files at the beginning of generated files)S14.977 N ( \320)S70.8 576.666 M (#176.)S6.3 N (Use )SFmE1033 0 :Mf1_8 sf( )S1035 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 576.666 M (DLG)SFmE1035 0 :Mf1_10 sf( )S1037 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP134.088 576.666 M (LexerBase::reset\(\) to reset the input stream when parsing the input stream multiple times.)S46.497 N ( \320)S70.8 588.666 M (#177.)S6.3 N (Error counters are: )SFmE1037 0 :Mf1_8 sf( )S1039 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP177.046 588.666 M (ANTLR)SFmE1039 0 :Mf1_10 sf( )S1041 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP203.71 588.666 M (Parser::syntaxErrCount and )SFmE1042 0 :Mf1_8 sf( )S1044 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP317.004 588.666 M (DLG)SFmE1044 0 :Mf1_10 sf( )S1046 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP333.445 588.666 M (LexerBase::lexErrCount)S104.82 N (42)S70.8 600.666 M (#178.)S6.3 N (Use \")SFmE1046 0 :Mf2_10 sf( )S1052 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP121.726 600.666 M 0 0 252(class MyParser : public MyBaseParser ... {)FmTxFmE1052 0 :Mf1_10 sf( )S1054 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP373.726 600.666 M ( \" to specify your own parser base class)S4.376 N (42)S70.8 612.666 M (#179.)S6.3 N (Use )SFmE1055 0 :Mf2_10 sf( )S1061 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 612.666 M 0 0 96(#FirstSetSymbol\()FmTxFmE1061 0 :Mf0_10 sf( )S1063 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP213.647 612.666 M (symbol_name)SFmE1063 0 :Mf2_10 sf( )S1069 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP268.63 612.666 M 0 0 6(\))FmTxFmE1069 0 :Mf1_10 sf( )S1071 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP274.63 612.666 M ( to generate symbol for first set of an alternative)S68.963 N (42)S70.8 624.666 M (#180.)S6.3 N (Use )SFmE1072 0 :Mf2_10 sf( )S1078 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 624.666 M 0 0 54(-preamble)FmTxFmE1078 0 :Mf1_10 sf( )S1080 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP171.647 624.666 M ( and )SFmE1080 0 :Mf2_10 sf( )S1086 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP191.085 624.666 M 0 0 90(-preamble_first)FmTxFmE1086 0 :Mf1_10 sf( )S1088 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP281.085 624.666 M ( to insert macro code at the start of each rule or block)S41.687 N (42)S70.8 636.666 M (#181.)S6.3 N (Preprocessor option )SFmE1089 0 :Mf2_10 sf( )S1095 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP181.792 636.666 M 0 0 78(ZZDEFER_FETCH)FmTxFmE1095 0 :Mf1_10 sf( )S1097 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP259.792 636.666 M ( to defer token fetch for C++ mode)S136.376 N (42)S70.8 648.666 M (#182.)S6.3 N (Exception handling)S358.363 N (42)SFmE1097 0 :Mf1_12 sf( )S1100 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 661.999 M (\(C Mode\) LA/LATEXT and NLA/NLATEXT)SFmE1100 0 :Mf1_10 sf( )S1102 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 674.666 M (#183.)S6.3 N (Do not use LA\()SFmE1103 0 :Mf0_10 sf( )S1105 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP162.08 674.666 M (i)SFmE1105 0 :Mf1_10 sf( )S1107 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP164.859 674.666 M (\) or LATEXT\()SFmE1108 0 :Mf0_10 sf( )S1110 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP223.714 674.666 M (i)SFmE1110 0 :Mf1_10 sf( )S1112 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP226.492 674.666 M (\) in the action routines of #token)S178.995 N (43)S70.8 686.666 M (#184.)S6.3 N (Care must be taken in using LA\()SFmE1113 0 :Mf0_10 sf( )S1115 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP230.115 686.666 M (i)SFmE1115 0 :Mf1_10 sf( )S1117 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP232.893 686.666 M (\) and LATEXT\()SFmE1118 0 :Mf0_10 sf( )S1120 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP297.859 686.666 M (i)SFmE1120 0 :Mf1_10 sf( )S1122 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP300.638 686.666 M (\) in interactive mode \()SFmE1123 0 :Mf1_8 sf( )S1125 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP389.483 686.666 M (ANTLR)SFmE1125 0 :Mf1_10 sf( )S1127 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP416.147 686.666 M ( switch \320gk\))S70.422 N (43)SFmE1127 0 :Mf1_12 sf( )S1130 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 699.999 M (\(C Mode\) Execution-Time Routines)SFmE1130 0 :Mf1_10 sf( )S1132 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 712.666 M (#185.)S6.3 N (Calls to zzskip\(\) and zzmore\(\) should appear only in #token actions \(or in subroutines they call\))S55.433 N ( \320)SFmEendp%%Page: 6 6%%BeginPageSetupinitializepage(Moog; page: 6 of 6)setjob%%EndPageSetupgS 0 0 588 768 rC1133 0 :MFrMacBegin0 FmP0 FmSP0 0 0 1 0 0 0 FmK7 FmP60 42.087 495 17.913 FmqFFmE1133 0 :Mf0_10 sf( )S1135 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 48.753 M (27 March 2000)S( )S( )S( )S(Release )S(2.22)S( )S( )S( )S( )S(Notes for New Users of PCCTS Version 1.33MR22)S128.881 N (5)S7 FmP60 78 495 648 FmqFFmE1136 0 :Mf1_10 sf( )S1138 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 84.667 M (#186.)S6.3 N (Use )SFmE1138 0 :Mf1_8 sf( )S1140 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP117.647 84.667 M (ANTLR)SFmE1140 0 :Mf1_10 sf( )S1142 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP144.311 84.667 M (s or )SFmE1143 0 :Mf1_8 sf( )S1145 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP161.528 84.667 M (ANTLR)SFmE1145 0 :Mf1_10 sf( )S1147 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP188.192 84.667 M (f in line-oriented languages to control the prefetching of characters and tokens)S34.903 N (43)S70.8 96.667 M (#187.)S6.3 N (Saving and restoring parser state in order to parse other objects \(input files\))S134.867 N (43)SFmE1147 0 :Mf1_12 sf( )S1150 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 110 M (\(C Mode\) Attributes)SFmE1150 0 :Mf1_10 sf( )S1152 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 122.667 M (#188.)S6.3 N (Use symbolic tags \(rather than numbers\) to refer to attributes and ASTs in rules)S117.919 N (44)S70.8 134.667 M (#189.)S6.3 N (Rules no longer have attributes: )S( )S( )SFmE1153 0 :Mf2_10 sf( )S1159 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP234.283 134.667 M 0 0 180(rule : r1:rule1 <<...$r1...;>>)FmTxFmE1159 0 :Mf1_10 sf( )S1161 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP414.283 134.667 M ( won\325t work)S72.845 N (44)S70.8 146.667 M (#190.)S6.3 N (Attributes are built automatically only for terminals)S229.808 N (44)S70.8 158.667 M (#191.)S6.3 N (How to access the text or token part of an attribute)S234.266 N (44)S70.8 170.667 M (#192.)S6.3 N (The $0 and $$ constructs are no longer supported \321 use inheritance instead \(Item #113\))S85.148 N ( \320)S70.8 182.667 M (#193.)S6.3 N (If you use attributes then define a zzd_attr\(\) to release resources \(memory\) when an attribute is destroyed)S18.009 N ( \320)S70.8 194.667 M (#194.)S6.3 N (Don\'t pass automatically constructed attributes to an outer rule or sibling rule \321 they\325ll be out of scope)S23.353 N (44)S70.8 206.667 M (#195.)S6.3 N (A charptr.c attribute must be copied before being passed to a calling rule)S145.697 N (44)S70.8 218.667 M (#196.)S6.3 N (Attributes created in a rule should be assumed )SFmE1161 0 :Mf0_10 sf( )S1163 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP286.748 218.667 M (not)SFmE1164 0 :Mf1_10 sf( )S1166 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP299.527 218.667 M ( valid on entry to a fail action)S118.461 N (45)S70.8 230.666 M (#197.)S6.3 N (Use a fail action to destroy temporary attributes when a rule fails)S176.798 N (45)S70.8 242.666 M (#198.)S6.3 N (When you need more information for a token than just token type, text, and line number)S84.015 N (45)S70.8 254.666 M (#199.)S6.3 N (About the pipeline between )SFmE1166 0 :Mf1_8 sf( )S1168 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP212.339 254.666 M (DLG)SFmE1168 0 :Mf1_10 sf( )S1170 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP228.781 254.666 M ( and )SFmE1171 0 :Mf1_8 sf( )S1173 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP248.219 254.666 M (ANTLR)SFmE1173 0 :Mf1_10 sf( )S1175 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP274.883 254.666 M ( \(C mode\))S220.575 N (45)SFmE1175 0 :Mf1_12 sf( )S1178 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 268 M (\(C Mode\) ASTs)SFmE1178 0 :Mf1_10 sf( )S1180 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 280.666 M (#200.)S6.3 N (Define a zzd_ast\(\) to recover resources when an AST is deleted)S184.601 N ( \320)S70.8 292.666 M (#201.)S6.3 N (How to place prototypes for routines using ASTs in the #header)S180.929 N (46)S70.8 304.666 M (#202.)S6.3 N (To free an AST tree use zzfree_ast\(\) to recursively descend the AST tree and free all sub-trees)S59.413 N (46)S70.8 316.666 M (#203.)S6.3 N (Use #define zzAST_DOUBLE to add support for doubly linked ASTs)S155.646 N (46)SFmE1181 0 :Mf1_12 sf( )S1184 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP60 330 M (Extended Examples and Short Descriptions of Distributed Source Code)SFmE1184 0 :Mf1_10 sf( )S1186 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP70.8 342.666 M (#1.)SFmE1186 0 :Mf1_8 sf( )S1188 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP99.6 342.666 M (DLG)SFmE1188 0 :Mf1_10 sf( )S1190 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP116.041 342.666 M ( definitions for C and C++ comments, character literals, and string literals)S124.624 N (46)S70.8 354.666 M (#2.)S16.3 N (A simple floating point calculator implemented using )SFmE1191 0 :Mf1_8 sf( )S1193 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP315.931 354.666 M (PCCTS)SFmE1193 0 :Mf1_10 sf( )S1195 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP340.388 354.666 M ( attributes and inheritance)S92.05 N (46)S70.8 366.666 M (#3.)S16.3 N (A simple floating point calculator implemented using )SFmE1195 0 :Mf1_8 sf( )S1197 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP315.931 366.666 M (PCCTS)SFmE1197 0 :Mf1_10 sf( )S1199 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP340.388 366.666 M ( ASTs and C++ virtual functions)S64.636 N (46)S70.8 378.666 M (#4.)S16.3 N (An )SFmE1200 0 :Mf1_8 sf( )S1202 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP114.319 378.666 M (ANTLR)SFmE1202 0 :Mf1_10 sf( )S1204 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP140.983 378.666 M (Token class for variable length strings allocated from the heap)S145.407 N (46)S70.8 390.666 M (#5.)S16.3 N (How to extend )SFmE1204 0 :Mf1_8 sf( )S1206 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP160.972 390.666 M (PCCTS)SFmE1206 0 :Mf1_10 sf( )S1208 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP185.429 390.666 M ( C++ classes using the example of adding column information)S101.858 N (46)S70.8 402.666 M (#6.)S16.3 N (Use of parser exception handling in C and C++ programs)S207.14 N (46)S70.8 414.666 M (#7.)S16.3 N (How to pass whitespace through )SFmE1209 0 :Mf1_8 sf( )S1211 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP232.058 414.666 M (DLG)SFmE1211 0 :Mf1_10 sf( )S1213 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP248.5 414.666 M ( for pretty-printers)S213.655 N (47)S70.8 426.666 M (#8.)S16.3 N (How to prepend a newline to the )SFmE1213 0 :Mf1_8 sf( )S1215 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP232.608 426.666 M (DLG)SFmE1215 0 :Mf1_10 sf( )S1217 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP249.049 426.666 M (InputStream via derivation from )SFmE1218 0 :Mf1_8 sf( )S1220 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP380.665 426.666 M (DLG)SFmE1220 0 :Mf1_10 sf( )S1222 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP397.107 426.666 M (Lexer)S115.58 N (47)S70.8 438.666 M (#9.)S16.3 N (How to maintain a stack of #lexclass modes)S260.626 N (47)S70.8 450.666 M (#10.)S11.3 N (When you want to change the token type just before passing the token to the parser)S104.02 N (47)S70.8 462.666 M (#11.)S11.3 N (Rewriting a grammar to remove left recursion and perform left factoring)S146.549 N (47)S70.8 474.666 M (#12.)S11.3 N (Processing counted strings in )SFmE1222 0 :Mf1_8 sf( )S1224 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP219.016 474.666 M (DLG)SFmE1224 0 :Mf1_10 sf( )S1226 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP536 474.666 M (48)S70.8 486.666 M (#13.)S11.3 N (How to convert a failed validation predicate into a signal for treatment by parser exception handling)S36.293 N (49)S70.8 498.666 M (#14.)S11.3 N (How to use Vern Paxson\325s flex with )SFmE1227 0 :Mf1_8 sf( )S1229 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP247.054 498.666 M (PCCTS)SFmE1229 0 :Mf1_10 sf( )S1231 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP271.511 498.666 M ( in C++ mode by inheritance from )SFmE1231 0 :Mf1_8 sf( )S1233 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP410.805 498.666 M (ANTLR)SFmE1233 0 :Mf1_10 sf( )S1235 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP437.469 498.666 M (TokenStream)S44.664 N (49)S70.8 510.666 M (#15.)S11.3 N (Using the GNU gperf \(generate perfect hashing function\) with )SFmE1236 0 :Mf1_8 sf( )S1238 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP351.424 510.666 M (PCCTS)SFmE1238 0 :Mf1_10 sf( )S1240 0 :MFrMacBegin0 0 0 1 0 0 0 FmK0 FmP536 510.666 M (49)S70.8 522.666 M (#16.)S11.3 N (Multiple files managed as a single token stream)S245.636 N (49)SFmEendp%%Trailerend		% md%%EOF