<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<title>A Simple Language</title>
<style>
<!--
PRE { color: rgb(128,0,0) }
CODE { color: rgb(128,0,0) }
-->
</style>


<meta name="Microsoft Theme" content="expeditn 001, default"><meta name="Microsoft Border" content="tb, default"></head>

<body background="../_themes/expeditn/exptextb.jpg" bgcolor="#FFFFFF" text="#000000" link="#006600" vlink="#669966" alink="#990000"><!--mstheme--><font face="book antiqua"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="book antiqua">

<h1 align="center"><font size="7" color="#800000"><strong>A Simple Language</strong></font></h1>

<p align="center"><a href="../index.htm"><img src="../_derived/home_cmp_expeditn000_home.gif" width="100" height="20" border="0" alt="Home"></a><a href="index.htm"><img src="../_derived/up_cmp_expeditn000_up.gif" width="100" height="20" border="0" alt="Up"></a><a href="pccts3.htm"><img src="../_derived/next_cmp_expeditn000_next.gif" width="100" height="20" border="0" alt="Next"></a></p>
<!--mstheme--></font></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top">

<p align="center">&nbsp;</p>

<p>The compiler course I took at Johns Hopkins featured a small language called
&quot;XL.&quot; I'm not sure who came up with this language, but the course was taught by
Dr. John Moore, and he presented XL to us. I wanted to at least give him some credit for
getting me really interested in compilers and such. If anyone knows a reason why I
shouldn't be presenting this language, please let me know and I'll remove this from the
net. I'll be presenting the language almost verbatim from Dr. Moore's writeup of the
language.</p>

<p>Note that in this tutorial I will not be implementing the entire XL language. I will
only be implementing the features I selected when writing the compiler for the class.
Eventually I will try to implement all the features in this document, if I have lots of
extra time between reading to the kids and changing their diapers. I will try to mention
when features are not implemented.</p>

<p>XL is a small but complete programming language based primarily on Ada and, to a lesser
extent on C, C++ and Pascal. XL was designed to be suitable for use as a project language
in a course on compiler design and construction. Its features illustrate many of the
techniques and problems associated with language translation.</p>

<!--msthemeseparator--><p align="center"><img src="../_themes/expeditn/exphorsd.gif" width="300" height="10"></p>

<h3><!--mstheme--><font color="#996600">General<!--mstheme--></font></h3>

<p>XL is case sensitive. Upper-case letters and lower-case letters are considered to be
distinct in all tokens, including reserved words.</p>

<p>White space (space character, tab character and end-of-line) serves to separate tokens;
otherwise, it is ignored. No token can extend past end-of-line. Spaces may not appear
inside any token except character and string literals.</p>

<p>A comment begins with two forward slashes and extends to end of line, as in C++.</p>

<!--msthemeseparator--><p align="center"><img src="../_themes/expeditn/exphorsd.gif" width="300" height="10"></p>

<h3><!--mstheme--><font color="#996600">Identifiers<!--mstheme--></font></h3>

<p>Identifiers start with a letter and contain letters and digits. An identifier must fit
on a single line and its first 100 characters are significant.</p>

<!--msthemeseparator--><p align="center"><img src="../_themes/expeditn/exphorsd.gif" width="300" height="10"></p>

<h3><!--mstheme--><font color="#996600">Reserved Words<!--mstheme--></font></h3>

<p>The following keywords are reserved in XL:</p>

<table border="0" cellpadding="9" cellspacing="0" width="100%">
  <tr>
    <td><!--mstheme--><font face="book antiqua"><b>and</b><!--mstheme--></font></td>
    <td><!--mstheme--><font face="book antiqua"><b>array</b><!--mstheme--></font></td>
    <td><!--mstheme--><font face="book antiqua"><b>Boolean</b><!--mstheme--></font></td>
    <td><!--mstheme--><font face="book antiqua"><b>begin</b><!--mstheme--></font></td>
    <td><!--mstheme--><font face="book antiqua"><b>Char</b><!--mstheme--></font></td>
  </tr>
  <tr>
    <td width="72"><!--mstheme--><font face="book antiqua"><b>constant</b><!--mstheme--></font></td>
    <td width="78"><!--mstheme--><font face="book antiqua"><b>else</b><!--mstheme--></font></td>
    <td width="98"><!--mstheme--><font face="book antiqua"><b>elsif</b><!--mstheme--></font></td>
    <td width="67"><!--mstheme--><font face="book antiqua"><b>end</b><!--mstheme--></font></td>
    <td width="109"><!--mstheme--><font face="book antiqua"><b>exit</b><!--mstheme--></font></td>
  </tr>
  <tr>
    <td width="72"><!--mstheme--><font face="book antiqua"><b>function</b><!--mstheme--></font></td>
    <td width="78"><!--mstheme--><font face="book antiqua"><b>if</b><!--mstheme--></font></td>
    <td width="98"><!--mstheme--><font face="book antiqua"><b>Integer</b><!--mstheme--></font></td>
    <td width="67"><!--mstheme--><font face="book antiqua"><b>loop</b><!--mstheme--></font></td>
    <td width="109"><!--mstheme--><font face="book antiqua"><b>mod</b><!--mstheme--></font></td>
  </tr>
  <tr>
    <td width="72"><!--mstheme--><font face="book antiqua"><b>not</b><!--mstheme--></font></td>
    <td width="78"><!--mstheme--><font face="book antiqua"><b>of</b><!--mstheme--></font></td>
    <td width="98"><!--mstheme--><font face="book antiqua"><b>or</b><!--mstheme--></font></td>
    <td width="67"><!--mstheme--><font face="book antiqua"><b>out</b><!--mstheme--></font></td>
    <td width="109"><!--mstheme--><font face="book antiqua"><b>procedure</b><!--mstheme--></font></td>
  </tr>
  <tr>
    <td width="72"><!--mstheme--><font face="book antiqua"><b>program</b><!--mstheme--></font></td>
    <td width="78"><!--mstheme--><font face="book antiqua"><b>record</b><!--mstheme--></font></td>
    <td width="98"><!--mstheme--><font face="book antiqua"><b>return</b><!--mstheme--></font></td>
    <td width="67"><!--mstheme--><font face="book antiqua"><b>String</b><!--mstheme--></font></td>
    <td width="109"><!--mstheme--><font face="book antiqua"><b>then</b><!--mstheme--></font></td>
  </tr>
  <tr>
    <td width="72"><!--mstheme--><font face="book antiqua"><b>type</b><!--mstheme--></font></td>
    <td width="78"><!--mstheme--><font face="book antiqua"><b>var</b><!--mstheme--></font></td>
    <td width="98"><!--mstheme--><font face="book antiqua"><b>when</b><!--mstheme--></font></td>
    <td width="67"><!--mstheme--><font face="book antiqua"><b>while</b><!--mstheme--></font></td>
    <td width="109"><!--mstheme--><font face="book antiqua"><!--mstheme--></font></td>
  </tr>
</table>

<!--msthemeseparator--><p align="center"><img src="../_themes/expeditn/exphorsd.gif" width="300" height="10"></p>

<h3><!--mstheme--><font color="#996600">Literals<!--mstheme--></font></h3>

<p>An integer literal consists of a sequence of one or more digits</p>

<p>A character literal is a single character enclosed by a pair of apostrophes (sometimes
called &quot;single quotes&quot;.) Examples include <b>'A'</b>, <b>'x'</b>, and <b>'''</b>.
A character literal is distinct from a string literal of length one.</p>

<p>A string literal is a sequence of zero or more printable characters enclosed by a pair
of quotation marks (&quot;double quotes.&quot;) The double quote character itself can be
represented in a string as two adjacent double quotes. In XL, string literals are only
used as arguments to the predefined I/O procedure &quot;put&quot; (see below)</p>

<!--msthemeseparator--><p align="center"><img src="../_themes/expeditn/exphorsd.gif" width="300" height="10"></p>

<h3><!--mstheme--><font color="#996600">Other Tokens (delimiters and operators)<!--mstheme--></font></h3>

<p><strong>: ; , . ( ) [ ]</strong> // one character</p>

<p><strong>+ - * / &lt; = &gt; '</strong></p>

<p><strong>.. := /= &gt;= &lt;=</strong> // two characters</p>

<p>and the end-of-file character</p>

<!--msthemeseparator--><p align="center"><img src="../_themes/expeditn/exphorsd.gif" width="300" height="10"></p>

<h3><!--mstheme--><font color="#996600">Standard (Predefined) Scalar Types<!--mstheme--></font></h3>

<p>The type <b>Boolean</b> is treated as a predefined enumeration type with elements <b>FALSE</b>
and <b>TRUE</b></p>

<p>The type <b>Integer</b> is a predefined type as in Pascal and FORTRAN (equivalent to
type <b>int</b> in C)</p>

<p>The type <b>Char</b> is a predefined type which is equivalent to Pascal's <b>CHAR</b>.
The predecessor and successor functions are invoked as attributes <b>Char'pred</b> and <b>Char'succ</b>.
Thus, <b>Char'pred('D')</b> is 'C' and <b>Char'succ('A')</b> is 'B'. (At this point, these
attributes are not implemented. I may add them later.)</p>

<!--msthemeseparator--><p align="center"><img src="../_themes/expeditn/exphorsd.gif" width="300" height="10"></p>

<h3><!--mstheme--><font color="#996600">Type Generators<!--mstheme--></font></h3>

<p>An enumeration type is defined by listing the identifiers which are the actual values
of the type. As with type <b>Char</b>, the predecessor and successor functions of an
enumeration type <b>T</b> as invoked as attributes <b>T'pred</b> and <b>T'succ</b>. For
example:</p>

<!--mstheme--></font><pre>type CardSuit = &lt;CLUB, DIAMOND, HEART, SPADE&gt;;
      </pre><!--mstheme--><font face="book antiqua">

<p>Then <b>CardSuit'pred(HEART)</b> is DIAMOND and <b>CardSuit'succ(HEART)</b> is SPADE.</p>

<p>An array type (one dimensional only) is defined by giving a range of indices and the
component type. Only integer indices are allowed in XL. For example</p>

<!--mstheme--></font><pre>type Table = array[1..10] of Integer;
      </pre><!--mstheme--><font face="book antiqua">

<p>A record type is defined by listing the individual component names (fields) and their
types. For example:</p>

<!--mstheme--></font><pre>type Date =
    record
        day : Integer;
        month: Integer;
        year: Integer;
    end record;
      </pre><!--mstheme--><font face="book antiqua">

<!--msthemeseparator--><p align="center"><img src="../_themes/expeditn/exphorsd.gif" width="300" height="10"></p>

<h3><!--mstheme--><font color="#996600">Named Constants<!--mstheme--></font></h3>

<p>Named constants are introduced by declarations of the form</p>

<!--mstheme--></font><pre>constant ID, ID, . . ., ID: typeName := expression;
      </pre><!--mstheme--><font face="book antiqua">

<p><code>typeName</code> must be an identifier representing a scalar type (<b>Integer</b>,
<b>Boolean</b>, <b>Char</b> or a user-defined enumeration type.) The phrase &quot;<code>:=
</code>expression&quot; is required. For example:</p>

<!--mstheme--></font><pre>constant maxIndex : Integer := 100;
      </pre><!--mstheme--><font face="book antiqua">

<!--msthemeseparator--><p align="center"><img src="../_themes/expeditn/exphorsd.gif" width="300" height="10"></p>

<h3><!--mstheme--><font color="#996600">Variables<!--mstheme--></font></h3>

<p>Variables are introduced by declarations of the form</p>

<!--mstheme--></font><pre>var ID, ID, ..., ID : typeName := expression;
      </pre><!--mstheme--><font face="book antiqua">

<p><code>typeName</code> must be an identifier, not a type constructor such as an <b>array</b>
or <b>record</b>. The phrase &quot;<code>:= expression</code>&quot; is optional and can
only involve literals and named constants. For example:</p>

<!--mstheme--></font><pre>var I : Integer := 1;
var b1, b2 : Boolean;
      </pre><!--mstheme--><font face="book antiqua">

<!--msthemeseparator--><p align="center"><img src="../_themes/expeditn/exphorsd.gif" width="300" height="10"></p>

<h3><!--mstheme--><font color="#996600">Operators and Expressions<!--mstheme--></font></h3>

<h4>Operators</h4>

<p>The operators, in order of precedence, are</p>
<div align="center"><center>

<table border="1" cellpadding="9" cellspacing="1" width="480" bordercolordark="#660000" bordercolorlight="#CC9966">
  <tr>
    <td width="53%"><!--mstheme--><font face="book antiqua">Boolean negation<!--mstheme--></font></td>
    <td width="47%"><!--mstheme--><font face="book antiqua"><b>not</b><!--mstheme--></font></td>
  </tr>
  <tr>
    <td width="53%"><!--mstheme--><font face="book antiqua">Unary adding operators<!--mstheme--></font></td>
    <td width="47%"><!--mstheme--><font face="book antiqua">+ -<!--mstheme--></font></td>
  </tr>
  <tr>
    <td width="53%"><!--mstheme--><font face="book antiqua">Multiplying operators<!--mstheme--></font></td>
    <td width="47%"><!--mstheme--><font face="book antiqua">* / <b>mod</b><!--mstheme--></font></td>
  </tr>
  <tr>
    <td width="53%"><!--mstheme--><font face="book antiqua">Binary adding operators<!--mstheme--></font></td>
    <td width="47%"><!--mstheme--><font face="book antiqua">+ -<!--mstheme--></font></td>
  </tr>
  <tr>
    <td width="53%"><!--mstheme--><font face="book antiqua">Relational operators<!--mstheme--></font></td>
    <td width="47%"><!--mstheme--><font face="book antiqua">= /= &lt; &lt;= &gt; &gt;=<!--mstheme--></font></td>
  </tr>
  <tr>
    <td width="53%"><!--mstheme--><font face="book antiqua">Logical operators<!--mstheme--></font></td>
    <td width="47%"><!--mstheme--><font face="book antiqua"><b>and</b> <b>or</b><!--mstheme--></font></td>
  </tr>
</table>
</center></div>

<h4>Expressions</h4>

<p>For binary operators, both operands must be the same type. Similarly, for assignment
compatibility, both the left and right sides must have the same type. Objects are
considered to have the same type only if they both have the same type name. Thus, two
distinct type definitions are considered different even if they may be structurally
identical. This is known as &quot;name equivalence&quot; of types.</p>

<h4>Short Circuiting</h4>

<p>Logical operators <b>and</b> and <b>or</b> use short-circuit evaluation.</p>

<p>(If you are not familiar with short-circuiting, this means that as soon as the truth
value can be determined, evaluation stops. For example, if the first operand of an <b>and</b>
evaluates <b>false</b>, the expression will evaluate <b>false</b> no matter what the
second operand is, so the second operand is not even evaluated. If the first operand of an
<b>or</b> evaluates <b>true</b>, the second isn't evaluated either.)</p>

<!--msthemeseparator--><p align="center"><img src="../_themes/expeditn/exphorsd.gif" width="300" height="10"></p>

<h3><!--mstheme--><font color="#996600">Statements<!--mstheme--></font></h3>

<p>All statements are terminated with a semicolon.</p>

<h4>Assignment statement</h4>

<p>(&quot;:=&quot; is the assignment operator). For example</p>

<!--mstheme--></font><pre>i := 2*I + 5;</pre><!--mstheme--><font face="book antiqua">

<h4>If statement</h4>

<!--mstheme--></font><pre>if x &gt; MAX then             if x &lt; 10 then
    MAX := x;                   x := x + 1;
elsif x &lt; MIN then              y := 2*x;
    MIN := x;               end if;
end if;
      </pre><!--mstheme--><font face="book antiqua">

<h4>Loop and exit statements</h4>

<!--mstheme--></font><pre>loop                        while I &lt; n loop
    get(x);                     sum := sum + a[I];
    exit when x = SIGNAL;       i := i + 1;
    process(x);             end loop;
end loop;
      </pre><!--mstheme--><font face="book antiqua">

<h4>I/O Statements (for text I/O only) </h4>

<p>XL defines only sequential I/O for two basic character streams, standard input and
standard output. All I/O is provided by the following procedures:</p>

<!--mstheme--></font><pre>procedure put(item : String); // for string literals
procedure put(item : Char);
procedure put(item : Integer);
procedure newLine;
procedure get(var item : Char);
procedure get(var item : Integer);
procedure skipLine;
      </pre><!--mstheme--><font face="book antiqua">

<!--msthemeseparator--><p align="center"><img src="../_themes/expeditn/exphorsd.gif" width="300" height="10"></p>

<h3><!--mstheme--><font color="#996600">Subprograms<!--mstheme--></font></h3>

<h4>Procedures</h4>

<p>Procedures are similar to those in Pascal except that an explicit return is allowed.
The program is essentially the outermost procedure (with no parameters) and serves as a
starting point for the program.</p>

<h4>Functions</h4>

<p>Functions can return scalar types only, not arrays or records. Only value parameters
are allowed. A function returns a value by executing a statement of the form</p>

<!--mstheme--></font><pre>return expression;
      </pre><!--mstheme--><font face="book antiqua">

<h4>Parameters</h4>

<p>There are two parameter modes in XL: value parameters and variable parameters. Value
parameters (passed by copy) are the default. Variable parameters (passed by reference)
must be explicitly declared as in</p>

<!--mstheme--></font><pre>procedure p(var x : Integer) ...
      </pre><!--mstheme--><font face="book antiqua">

<h4>Subprogram end</h4>

<p>The name of the procedure must be repeated at the end of its declaration. For example</p>

<!--mstheme--></font><pre>procedure proc1;
end proc1;
      </pre><!--mstheme--><font face="book antiqua">

<!--msthemeseparator--><p align="center"><img src="../_themes/expeditn/exphorsd.gif" width="300" height="10"></p>

<h3><!--mstheme--><font color="#996600">Specification Conclusion<!--mstheme--></font></h3>

<p>OK, so it's sketchy. I know, I know. But that's what I got. Maybe I'll improve it
someday, but I think if you're a programmer you'll probably understand it pretty well
anyway... </p>

<p>Next we'll discuss our <a href="pccts3.htm">strategy</a>... </p>

<p align="center">&nbsp; 
<!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="book antiqua">

<p align="center"><a href="../index.htm"><img src="../_derived/home_cmp_expeditn000_home.gif" width="100" height="20" border="0" alt="Home"></a><a href="index.htm"><img src="../_derived/up_cmp_expeditn000_up.gif" width="100" height="20" border="0" alt="Up"></a><a href="pccts3.htm"><img src="../_derived/next_cmp_expeditn000_next.gif" width="100" height="20" border="0" alt="Next"></a></p>

<p align="center">This page was last updated on 09/08/97.</p>
<!--mstheme--></font></td></tr><!--msnavigation--></table><!--mstheme--></font></body>
</html>
