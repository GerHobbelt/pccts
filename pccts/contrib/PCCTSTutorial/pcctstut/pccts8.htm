<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<html>

<head>
<title>PCCTS Glue</title>
<style>
<!--
PRE {color: maroon;}
CODE {color: maroon;}
-->
</style>


<meta name="Microsoft Theme" content="expeditn 001, default"><meta name="Microsoft Border" content="tb, default"></head>

<body background="../_themes/expeditn/exptextb.jpg" bgcolor="#FFFFFF" text="#000000" link="#006600" vlink="#669966" alink="#990000"><!--mstheme--><font face="book antiqua"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="book antiqua">

<h1 align="center"><font size="7" color="#800000"><strong>PCCTS Glue</strong></font></h1>

<p align="center"><a href="pccts7.htm"><img src="../_derived/back_cmp_expeditn000_back.gif" width="100" height="20" border="0" alt="Back"></a><a href="../index.htm"><img src="../_derived/home_cmp_expeditn000_home.gif" width="100" height="20" border="0" alt="Home"></a><a href="index.htm"><img src="../_derived/up_cmp_expeditn000_up.gif" width="100" height="20" border="0" alt="Up"></a><a href="pccts9.htm"><img src="../_derived/next_cmp_expeditn000_next.gif" width="100" height="20" border="0" alt="Next"></a></p>
<!--mstheme--></font></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top">

<p align="center">&nbsp;</p>

<p>I like to call the code that wraps the scanner specification and grammar specification
together into a PCCTS &quot;grammar&quot; file the &quot;PCCTS glue.&quot; It's a bit
messy at first, but if we really think about what it does, step-by-step, at least some of
the mystery should disappear.</p>

<p>First, let's look at the overall design of a PCCTS-based parser.</p>

<p>Let's consider what information we already have. We have already defined how we want to
group input characters into tokens in our scanner definition. We have defined the syntax
of our language in our grammar definition. But what gets generated when these definitions
are processed by DLG and ANTLR?</p>

<p>We need the startup code (a &quot;main&quot; function), a shell class to hold the
parser definition, and references to all the fun definitions that ANTLR and DLG need to
create an executable. Without saying much more (I may later), we have the following. Note
that we'll be changing some of it later when we add trees, symbols and other compiler
goodies...</p>

<!--mstheme--></font><pre>
#header
&lt;&lt;
// any definitions that you need in the generated files
&gt;&gt;

&lt;&lt;// scanner definitions would go here
#include &quot;DLexerBase.h&quot;
    // Base info for DLG-generated scanner
#include &quot;DLGLexer.h&quot;
    // The scanner generated by DLG from this file
#include &quot;AToken.h&quot;
    // Base token definitions for ANTLR

typedef ANTLRCommonToken ANTLRToken;
  // Define your token type (ANTLRToken) as just
  // ANTLRCommonToken (basically just token type
  // and text

int main(int argc, char **argv)
{
    // define input file; standard input for this one
    DLGFileInput in(stdin);
</pre><!--mstheme--><font face="book antiqua">

<!--mstheme--></font><pre>    // define an instance of your scanner
    DLGLexer scanner(&amp;in);

    // define token buffer between scanner and parser
    ANTLRTokenBuffer pipe(&amp;scanner);

    // create a token to use as a model
    ANTLRToken tok;</pre><!--mstheme--><font face="book antiqua">

<!--mstheme--></font><pre>    // tell the scanner what type the token is
    scanner.setToken(&amp;tok);

    // create an instance of your parser
    XLParser xlParser(&amp;pipe);

    // initialize your parser
    xlParser.init();

    // start first rule
    xlParser.program();

    return 0; // it's over Johnnie... it's over
}
&gt;&gt;


// scanner rules would go here


// tell ANTLR that your grammar class starts here
class XLParser
{
&lt;&lt;
    // parser definitions go here

    public:
        void init()
        {
            ANTLRParser::init();
            // any specific initialization you need
            // (if none, don't override 
            //    the init() method
        }
&gt;&gt;


// parser rules would go here

} // end grammar class
      </pre><!--mstheme--><font face="book antiqua">

<p>Now we know everything that needs to go into our recognizer. Let's <a href="pccts9.htm">put
it together and compile/test it</a>!</p>

<p align="center">&nbsp; 
<!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td><!--mstheme--><font face="book antiqua">

<p align="center"><a href="pccts7.htm"><img src="../_derived/back_cmp_expeditn000_back.gif" width="100" height="20" border="0" alt="Back"></a><a href="../index.htm"><img src="../_derived/home_cmp_expeditn000_home.gif" width="100" height="20" border="0" alt="Home"></a><a href="index.htm"><img src="../_derived/up_cmp_expeditn000_up.gif" width="100" height="20" border="0" alt="Up"></a><a href="pccts9.htm"><img src="../_derived/next_cmp_expeditn000_next.gif" width="100" height="20" border="0" alt="Next"></a></p>

<p align="center">This page was last updated on 09/08/97.</p>
<!--mstheme--></font></td></tr><!--msnavigation--></table><!--mstheme--></font></body>
</html>
